
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model Patients
 * 
 */
export type Patients = $Result.DefaultSelection<Prisma.$PatientsPayload>
/**
 * Model Consultations
 * 
 */
export type Consultations = $Result.DefaultSelection<Prisma.$ConsultationsPayload>
/**
 * Model Appointments
 * 
 */
export type Appointments = $Result.DefaultSelection<Prisma.$AppointmentsPayload>
/**
 * Model Doctors
 * 
 */
export type Doctors = $Result.DefaultSelection<Prisma.$DoctorsPayload>
/**
 * Model Availability
 * 
 */
export type Availability = $Result.DefaultSelection<Prisma.$AvailabilityPayload>
/**
 * Model Allergy
 * 
 */
export type Allergy = $Result.DefaultSelection<Prisma.$AllergyPayload>
/**
 * Model TriageAllergy
 * 
 */
export type TriageAllergy = $Result.DefaultSelection<Prisma.$TriageAllergyPayload>
/**
 * Model Problem
 * 
 */
export type Problem = $Result.DefaultSelection<Prisma.$ProblemPayload>
/**
 * Model TriageProblem
 * 
 */
export type TriageProblem = $Result.DefaultSelection<Prisma.$TriageProblemPayload>
/**
 * Model PatientTriage
 * 
 */
export type PatientTriage = $Result.DefaultSelection<Prisma.$PatientTriagePayload>
/**
 * Model PatientAssessment
 * 
 */
export type PatientAssessment = $Result.DefaultSelection<Prisma.$PatientAssessmentPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model PatientTreatment
 * 
 */
export type PatientTreatment = $Result.DefaultSelection<Prisma.$PatientTreatmentPayload>
/**
 * Model PatientMedication
 * 
 */
export type PatientMedication = $Result.DefaultSelection<Prisma.$PatientMedicationPayload>
/**
 * Model PatientPackage
 * 
 */
export type PatientPackage = $Result.DefaultSelection<Prisma.$PatientPackagePayload>
/**
 * Model PatientItem
 * 
 */
export type PatientItem = $Result.DefaultSelection<Prisma.$PatientItemPayload>
/**
 * Model Medicine
 * 
 */
export type Medicine = $Result.DefaultSelection<Prisma.$MedicinePayload>
/**
 * Model Item
 * 
 */
export type Item = $Result.DefaultSelection<Prisma.$ItemPayload>
/**
 * Model Treatment
 * 
 */
export type Treatment = $Result.DefaultSelection<Prisma.$TreatmentPayload>
/**
 * Model Package
 * 
 */
export type Package = $Result.DefaultSelection<Prisma.$PackagePayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Supplier
 * 
 */
export type Supplier = $Result.DefaultSelection<Prisma.$SupplierPayload>
/**
 * Model InventoryTransaction
 * 
 */
export type InventoryTransaction = $Result.DefaultSelection<Prisma.$InventoryTransactionPayload>
/**
 * Model InventoryCount
 * 
 */
export type InventoryCount = $Result.DefaultSelection<Prisma.$InventoryCountPayload>
/**
 * Model InventoryCountItem
 * 
 */
export type InventoryCountItem = $Result.DefaultSelection<Prisma.$InventoryCountItemPayload>
/**
 * Model PurchaseOrder
 * 
 */
export type PurchaseOrder = $Result.DefaultSelection<Prisma.$PurchaseOrderPayload>
/**
 * Model PurchaseOrderItem
 * 
 */
export type PurchaseOrderItem = $Result.DefaultSelection<Prisma.$PurchaseOrderItemPayload>
/**
 * Model Billings
 * 
 */
export type Billings = $Result.DefaultSelection<Prisma.$BillingsPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Position: {
  ADMIN: 'ADMIN',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  RECEPTIONIST: 'RECEPTIONIST',
  DEVELOPER: 'DEVELOPER'
};

export type Position = (typeof Position)[keyof typeof Position]

}

export type Position = $Enums.Position

export const Position: typeof $Enums.Position

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs>;

  /**
   * `prisma.patients`: Exposes CRUD operations for the **Patients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patients.findMany()
    * ```
    */
  get patients(): Prisma.PatientsDelegate<ExtArgs>;

  /**
   * `prisma.consultations`: Exposes CRUD operations for the **Consultations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consultations
    * const consultations = await prisma.consultations.findMany()
    * ```
    */
  get consultations(): Prisma.ConsultationsDelegate<ExtArgs>;

  /**
   * `prisma.appointments`: Exposes CRUD operations for the **Appointments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointments.findMany()
    * ```
    */
  get appointments(): Prisma.AppointmentsDelegate<ExtArgs>;

  /**
   * `prisma.doctors`: Exposes CRUD operations for the **Doctors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctors.findMany()
    * ```
    */
  get doctors(): Prisma.DoctorsDelegate<ExtArgs>;

  /**
   * `prisma.availability`: Exposes CRUD operations for the **Availability** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Availabilities
    * const availabilities = await prisma.availability.findMany()
    * ```
    */
  get availability(): Prisma.AvailabilityDelegate<ExtArgs>;

  /**
   * `prisma.allergy`: Exposes CRUD operations for the **Allergy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allergies
    * const allergies = await prisma.allergy.findMany()
    * ```
    */
  get allergy(): Prisma.AllergyDelegate<ExtArgs>;

  /**
   * `prisma.triageAllergy`: Exposes CRUD operations for the **TriageAllergy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriageAllergies
    * const triageAllergies = await prisma.triageAllergy.findMany()
    * ```
    */
  get triageAllergy(): Prisma.TriageAllergyDelegate<ExtArgs>;

  /**
   * `prisma.problem`: Exposes CRUD operations for the **Problem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Problems
    * const problems = await prisma.problem.findMany()
    * ```
    */
  get problem(): Prisma.ProblemDelegate<ExtArgs>;

  /**
   * `prisma.triageProblem`: Exposes CRUD operations for the **TriageProblem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriageProblems
    * const triageProblems = await prisma.triageProblem.findMany()
    * ```
    */
  get triageProblem(): Prisma.TriageProblemDelegate<ExtArgs>;

  /**
   * `prisma.patientTriage`: Exposes CRUD operations for the **PatientTriage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientTriages
    * const patientTriages = await prisma.patientTriage.findMany()
    * ```
    */
  get patientTriage(): Prisma.PatientTriageDelegate<ExtArgs>;

  /**
   * `prisma.patientAssessment`: Exposes CRUD operations for the **PatientAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientAssessments
    * const patientAssessments = await prisma.patientAssessment.findMany()
    * ```
    */
  get patientAssessment(): Prisma.PatientAssessmentDelegate<ExtArgs>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs>;

  /**
   * `prisma.patientTreatment`: Exposes CRUD operations for the **PatientTreatment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientTreatments
    * const patientTreatments = await prisma.patientTreatment.findMany()
    * ```
    */
  get patientTreatment(): Prisma.PatientTreatmentDelegate<ExtArgs>;

  /**
   * `prisma.patientMedication`: Exposes CRUD operations for the **PatientMedication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientMedications
    * const patientMedications = await prisma.patientMedication.findMany()
    * ```
    */
  get patientMedication(): Prisma.PatientMedicationDelegate<ExtArgs>;

  /**
   * `prisma.patientPackage`: Exposes CRUD operations for the **PatientPackage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientPackages
    * const patientPackages = await prisma.patientPackage.findMany()
    * ```
    */
  get patientPackage(): Prisma.PatientPackageDelegate<ExtArgs>;

  /**
   * `prisma.patientItem`: Exposes CRUD operations for the **PatientItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientItems
    * const patientItems = await prisma.patientItem.findMany()
    * ```
    */
  get patientItem(): Prisma.PatientItemDelegate<ExtArgs>;

  /**
   * `prisma.medicine`: Exposes CRUD operations for the **Medicine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medicines
    * const medicines = await prisma.medicine.findMany()
    * ```
    */
  get medicine(): Prisma.MedicineDelegate<ExtArgs>;

  /**
   * `prisma.item`: Exposes CRUD operations for the **Item** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Items
    * const items = await prisma.item.findMany()
    * ```
    */
  get item(): Prisma.ItemDelegate<ExtArgs>;

  /**
   * `prisma.treatment`: Exposes CRUD operations for the **Treatment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Treatments
    * const treatments = await prisma.treatment.findMany()
    * ```
    */
  get treatment(): Prisma.TreatmentDelegate<ExtArgs>;

  /**
   * `prisma.package`: Exposes CRUD operations for the **Package** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packages
    * const packages = await prisma.package.findMany()
    * ```
    */
  get package(): Prisma.PackageDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.supplier`: Exposes CRUD operations for the **Supplier** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Suppliers
    * const suppliers = await prisma.supplier.findMany()
    * ```
    */
  get supplier(): Prisma.SupplierDelegate<ExtArgs>;

  /**
   * `prisma.inventoryTransaction`: Exposes CRUD operations for the **InventoryTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryTransactions
    * const inventoryTransactions = await prisma.inventoryTransaction.findMany()
    * ```
    */
  get inventoryTransaction(): Prisma.InventoryTransactionDelegate<ExtArgs>;

  /**
   * `prisma.inventoryCount`: Exposes CRUD operations for the **InventoryCount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryCounts
    * const inventoryCounts = await prisma.inventoryCount.findMany()
    * ```
    */
  get inventoryCount(): Prisma.InventoryCountDelegate<ExtArgs>;

  /**
   * `prisma.inventoryCountItem`: Exposes CRUD operations for the **InventoryCountItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryCountItems
    * const inventoryCountItems = await prisma.inventoryCountItem.findMany()
    * ```
    */
  get inventoryCountItem(): Prisma.InventoryCountItemDelegate<ExtArgs>;

  /**
   * `prisma.purchaseOrder`: Exposes CRUD operations for the **PurchaseOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseOrders
    * const purchaseOrders = await prisma.purchaseOrder.findMany()
    * ```
    */
  get purchaseOrder(): Prisma.PurchaseOrderDelegate<ExtArgs>;

  /**
   * `prisma.purchaseOrderItem`: Exposes CRUD operations for the **PurchaseOrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseOrderItems
    * const purchaseOrderItems = await prisma.purchaseOrderItem.findMany()
    * ```
    */
  get purchaseOrderItem(): Prisma.PurchaseOrderItemDelegate<ExtArgs>;

  /**
   * `prisma.billings`: Exposes CRUD operations for the **Billings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Billings
    * const billings = await prisma.billings.findMany()
    * ```
    */
  get billings(): Prisma.BillingsDelegate<ExtArgs>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Employee: 'Employee',
    AuditLog: 'AuditLog',
    Schedule: 'Schedule',
    Patients: 'Patients',
    Consultations: 'Consultations',
    Appointments: 'Appointments',
    Doctors: 'Doctors',
    Availability: 'Availability',
    Allergy: 'Allergy',
    TriageAllergy: 'TriageAllergy',
    Problem: 'Problem',
    TriageProblem: 'TriageProblem',
    PatientTriage: 'PatientTriage',
    PatientAssessment: 'PatientAssessment',
    Note: 'Note',
    PatientTreatment: 'PatientTreatment',
    PatientMedication: 'PatientMedication',
    PatientPackage: 'PatientPackage',
    PatientItem: 'PatientItem',
    Medicine: 'Medicine',
    Item: 'Item',
    Treatment: 'Treatment',
    Package: 'Package',
    Category: 'Category',
    Supplier: 'Supplier',
    InventoryTransaction: 'InventoryTransaction',
    InventoryCount: 'InventoryCount',
    InventoryCountItem: 'InventoryCountItem',
    PurchaseOrder: 'PurchaseOrder',
    PurchaseOrderItem: 'PurchaseOrderItem',
    Billings: 'Billings',
    Payment: 'Payment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "employee" | "auditLog" | "schedule" | "patients" | "consultations" | "appointments" | "doctors" | "availability" | "allergy" | "triageAllergy" | "problem" | "triageProblem" | "patientTriage" | "patientAssessment" | "note" | "patientTreatment" | "patientMedication" | "patientPackage" | "patientItem" | "medicine" | "item" | "treatment" | "package" | "category" | "supplier" | "inventoryTransaction" | "inventoryCount" | "inventoryCountItem" | "purchaseOrder" | "purchaseOrderItem" | "billings" | "payment"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      Patients: {
        payload: Prisma.$PatientsPayload<ExtArgs>
        fields: Prisma.PatientsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload>
          }
          findFirst: {
            args: Prisma.PatientsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload>
          }
          findMany: {
            args: Prisma.PatientsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload>[]
          }
          create: {
            args: Prisma.PatientsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload>
          }
          createMany: {
            args: Prisma.PatientsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload>[]
          }
          delete: {
            args: Prisma.PatientsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload>
          }
          update: {
            args: Prisma.PatientsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload>
          }
          deleteMany: {
            args: Prisma.PatientsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientsPayload>
          }
          aggregate: {
            args: Prisma.PatientsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatients>
          }
          groupBy: {
            args: Prisma.PatientsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientsCountArgs<ExtArgs>
            result: $Utils.Optional<PatientsCountAggregateOutputType> | number
          }
        }
      }
      Consultations: {
        payload: Prisma.$ConsultationsPayload<ExtArgs>
        fields: Prisma.ConsultationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsultationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsultationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload>
          }
          findFirst: {
            args: Prisma.ConsultationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsultationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload>
          }
          findMany: {
            args: Prisma.ConsultationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload>[]
          }
          create: {
            args: Prisma.ConsultationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload>
          }
          createMany: {
            args: Prisma.ConsultationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsultationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload>[]
          }
          delete: {
            args: Prisma.ConsultationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload>
          }
          update: {
            args: Prisma.ConsultationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload>
          }
          deleteMany: {
            args: Prisma.ConsultationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsultationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ConsultationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultationsPayload>
          }
          aggregate: {
            args: Prisma.ConsultationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsultations>
          }
          groupBy: {
            args: Prisma.ConsultationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsultationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsultationsCountArgs<ExtArgs>
            result: $Utils.Optional<ConsultationsCountAggregateOutputType> | number
          }
        }
      }
      Appointments: {
        payload: Prisma.$AppointmentsPayload<ExtArgs>
        fields: Prisma.AppointmentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload>
          }
          findFirst: {
            args: Prisma.AppointmentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload>
          }
          findMany: {
            args: Prisma.AppointmentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload>[]
          }
          create: {
            args: Prisma.AppointmentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload>
          }
          createMany: {
            args: Prisma.AppointmentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload>[]
          }
          delete: {
            args: Prisma.AppointmentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload>
          }
          update: {
            args: Prisma.AppointmentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AppointmentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentsPayload>
          }
          aggregate: {
            args: Prisma.AppointmentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointments>
          }
          groupBy: {
            args: Prisma.AppointmentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentsCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentsCountAggregateOutputType> | number
          }
        }
      }
      Doctors: {
        payload: Prisma.$DoctorsPayload<ExtArgs>
        fields: Prisma.DoctorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          findFirst: {
            args: Prisma.DoctorsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          findMany: {
            args: Prisma.DoctorsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>[]
          }
          create: {
            args: Prisma.DoctorsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          createMany: {
            args: Prisma.DoctorsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>[]
          }
          delete: {
            args: Prisma.DoctorsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          update: {
            args: Prisma.DoctorsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          deleteMany: {
            args: Prisma.DoctorsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DoctorsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorsPayload>
          }
          aggregate: {
            args: Prisma.DoctorsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctors>
          }
          groupBy: {
            args: Prisma.DoctorsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorsCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorsCountAggregateOutputType> | number
          }
        }
      }
      Availability: {
        payload: Prisma.$AvailabilityPayload<ExtArgs>
        fields: Prisma.AvailabilityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AvailabilityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AvailabilityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload>
          }
          findFirst: {
            args: Prisma.AvailabilityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AvailabilityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload>
          }
          findMany: {
            args: Prisma.AvailabilityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload>[]
          }
          create: {
            args: Prisma.AvailabilityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload>
          }
          createMany: {
            args: Prisma.AvailabilityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AvailabilityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload>[]
          }
          delete: {
            args: Prisma.AvailabilityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload>
          }
          update: {
            args: Prisma.AvailabilityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload>
          }
          deleteMany: {
            args: Prisma.AvailabilityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AvailabilityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AvailabilityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AvailabilityPayload>
          }
          aggregate: {
            args: Prisma.AvailabilityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAvailability>
          }
          groupBy: {
            args: Prisma.AvailabilityGroupByArgs<ExtArgs>
            result: $Utils.Optional<AvailabilityGroupByOutputType>[]
          }
          count: {
            args: Prisma.AvailabilityCountArgs<ExtArgs>
            result: $Utils.Optional<AvailabilityCountAggregateOutputType> | number
          }
        }
      }
      Allergy: {
        payload: Prisma.$AllergyPayload<ExtArgs>
        fields: Prisma.AllergyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllergyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllergyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload>
          }
          findFirst: {
            args: Prisma.AllergyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllergyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload>
          }
          findMany: {
            args: Prisma.AllergyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload>[]
          }
          create: {
            args: Prisma.AllergyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload>
          }
          createMany: {
            args: Prisma.AllergyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AllergyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload>[]
          }
          delete: {
            args: Prisma.AllergyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload>
          }
          update: {
            args: Prisma.AllergyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload>
          }
          deleteMany: {
            args: Prisma.AllergyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AllergyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AllergyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AllergyPayload>
          }
          aggregate: {
            args: Prisma.AllergyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAllergy>
          }
          groupBy: {
            args: Prisma.AllergyGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllergyGroupByOutputType>[]
          }
          count: {
            args: Prisma.AllergyCountArgs<ExtArgs>
            result: $Utils.Optional<AllergyCountAggregateOutputType> | number
          }
        }
      }
      TriageAllergy: {
        payload: Prisma.$TriageAllergyPayload<ExtArgs>
        fields: Prisma.TriageAllergyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TriageAllergyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TriageAllergyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload>
          }
          findFirst: {
            args: Prisma.TriageAllergyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TriageAllergyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload>
          }
          findMany: {
            args: Prisma.TriageAllergyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload>[]
          }
          create: {
            args: Prisma.TriageAllergyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload>
          }
          createMany: {
            args: Prisma.TriageAllergyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TriageAllergyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload>[]
          }
          delete: {
            args: Prisma.TriageAllergyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload>
          }
          update: {
            args: Prisma.TriageAllergyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload>
          }
          deleteMany: {
            args: Prisma.TriageAllergyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TriageAllergyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TriageAllergyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageAllergyPayload>
          }
          aggregate: {
            args: Prisma.TriageAllergyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTriageAllergy>
          }
          groupBy: {
            args: Prisma.TriageAllergyGroupByArgs<ExtArgs>
            result: $Utils.Optional<TriageAllergyGroupByOutputType>[]
          }
          count: {
            args: Prisma.TriageAllergyCountArgs<ExtArgs>
            result: $Utils.Optional<TriageAllergyCountAggregateOutputType> | number
          }
        }
      }
      Problem: {
        payload: Prisma.$ProblemPayload<ExtArgs>
        fields: Prisma.ProblemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          findFirst: {
            args: Prisma.ProblemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          findMany: {
            args: Prisma.ProblemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>[]
          }
          create: {
            args: Prisma.ProblemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          createMany: {
            args: Prisma.ProblemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>[]
          }
          delete: {
            args: Prisma.ProblemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          update: {
            args: Prisma.ProblemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          deleteMany: {
            args: Prisma.ProblemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProblemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          aggregate: {
            args: Prisma.ProblemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblem>
          }
          groupBy: {
            args: Prisma.ProblemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemCountAggregateOutputType> | number
          }
        }
      }
      TriageProblem: {
        payload: Prisma.$TriageProblemPayload<ExtArgs>
        fields: Prisma.TriageProblemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TriageProblemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TriageProblemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload>
          }
          findFirst: {
            args: Prisma.TriageProblemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TriageProblemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload>
          }
          findMany: {
            args: Prisma.TriageProblemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload>[]
          }
          create: {
            args: Prisma.TriageProblemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload>
          }
          createMany: {
            args: Prisma.TriageProblemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TriageProblemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload>[]
          }
          delete: {
            args: Prisma.TriageProblemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload>
          }
          update: {
            args: Prisma.TriageProblemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload>
          }
          deleteMany: {
            args: Prisma.TriageProblemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TriageProblemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TriageProblemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TriageProblemPayload>
          }
          aggregate: {
            args: Prisma.TriageProblemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTriageProblem>
          }
          groupBy: {
            args: Prisma.TriageProblemGroupByArgs<ExtArgs>
            result: $Utils.Optional<TriageProblemGroupByOutputType>[]
          }
          count: {
            args: Prisma.TriageProblemCountArgs<ExtArgs>
            result: $Utils.Optional<TriageProblemCountAggregateOutputType> | number
          }
        }
      }
      PatientTriage: {
        payload: Prisma.$PatientTriagePayload<ExtArgs>
        fields: Prisma.PatientTriageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientTriageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientTriageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload>
          }
          findFirst: {
            args: Prisma.PatientTriageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientTriageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload>
          }
          findMany: {
            args: Prisma.PatientTriageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload>[]
          }
          create: {
            args: Prisma.PatientTriageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload>
          }
          createMany: {
            args: Prisma.PatientTriageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientTriageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload>[]
          }
          delete: {
            args: Prisma.PatientTriageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload>
          }
          update: {
            args: Prisma.PatientTriageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload>
          }
          deleteMany: {
            args: Prisma.PatientTriageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientTriageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientTriageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTriagePayload>
          }
          aggregate: {
            args: Prisma.PatientTriageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientTriage>
          }
          groupBy: {
            args: Prisma.PatientTriageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientTriageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientTriageCountArgs<ExtArgs>
            result: $Utils.Optional<PatientTriageCountAggregateOutputType> | number
          }
        }
      }
      PatientAssessment: {
        payload: Prisma.$PatientAssessmentPayload<ExtArgs>
        fields: Prisma.PatientAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientAssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientAssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload>
          }
          findFirst: {
            args: Prisma.PatientAssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientAssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload>
          }
          findMany: {
            args: Prisma.PatientAssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload>[]
          }
          create: {
            args: Prisma.PatientAssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload>
          }
          createMany: {
            args: Prisma.PatientAssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientAssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload>[]
          }
          delete: {
            args: Prisma.PatientAssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload>
          }
          update: {
            args: Prisma.PatientAssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.PatientAssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientAssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientAssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientAssessmentPayload>
          }
          aggregate: {
            args: Prisma.PatientAssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientAssessment>
          }
          groupBy: {
            args: Prisma.PatientAssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientAssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<PatientAssessmentCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      PatientTreatment: {
        payload: Prisma.$PatientTreatmentPayload<ExtArgs>
        fields: Prisma.PatientTreatmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientTreatmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientTreatmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          findFirst: {
            args: Prisma.PatientTreatmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientTreatmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          findMany: {
            args: Prisma.PatientTreatmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>[]
          }
          create: {
            args: Prisma.PatientTreatmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          createMany: {
            args: Prisma.PatientTreatmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientTreatmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>[]
          }
          delete: {
            args: Prisma.PatientTreatmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          update: {
            args: Prisma.PatientTreatmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          deleteMany: {
            args: Prisma.PatientTreatmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientTreatmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientTreatmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientTreatmentPayload>
          }
          aggregate: {
            args: Prisma.PatientTreatmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientTreatment>
          }
          groupBy: {
            args: Prisma.PatientTreatmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientTreatmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientTreatmentCountArgs<ExtArgs>
            result: $Utils.Optional<PatientTreatmentCountAggregateOutputType> | number
          }
        }
      }
      PatientMedication: {
        payload: Prisma.$PatientMedicationPayload<ExtArgs>
        fields: Prisma.PatientMedicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientMedicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientMedicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload>
          }
          findFirst: {
            args: Prisma.PatientMedicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientMedicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload>
          }
          findMany: {
            args: Prisma.PatientMedicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload>[]
          }
          create: {
            args: Prisma.PatientMedicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload>
          }
          createMany: {
            args: Prisma.PatientMedicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientMedicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload>[]
          }
          delete: {
            args: Prisma.PatientMedicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload>
          }
          update: {
            args: Prisma.PatientMedicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload>
          }
          deleteMany: {
            args: Prisma.PatientMedicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientMedicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientMedicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMedicationPayload>
          }
          aggregate: {
            args: Prisma.PatientMedicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientMedication>
          }
          groupBy: {
            args: Prisma.PatientMedicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientMedicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientMedicationCountArgs<ExtArgs>
            result: $Utils.Optional<PatientMedicationCountAggregateOutputType> | number
          }
        }
      }
      PatientPackage: {
        payload: Prisma.$PatientPackagePayload<ExtArgs>
        fields: Prisma.PatientPackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientPackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientPackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload>
          }
          findFirst: {
            args: Prisma.PatientPackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientPackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload>
          }
          findMany: {
            args: Prisma.PatientPackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload>[]
          }
          create: {
            args: Prisma.PatientPackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload>
          }
          createMany: {
            args: Prisma.PatientPackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientPackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload>[]
          }
          delete: {
            args: Prisma.PatientPackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload>
          }
          update: {
            args: Prisma.PatientPackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload>
          }
          deleteMany: {
            args: Prisma.PatientPackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientPackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientPackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPackagePayload>
          }
          aggregate: {
            args: Prisma.PatientPackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientPackage>
          }
          groupBy: {
            args: Prisma.PatientPackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientPackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientPackageCountArgs<ExtArgs>
            result: $Utils.Optional<PatientPackageCountAggregateOutputType> | number
          }
        }
      }
      PatientItem: {
        payload: Prisma.$PatientItemPayload<ExtArgs>
        fields: Prisma.PatientItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload>
          }
          findFirst: {
            args: Prisma.PatientItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload>
          }
          findMany: {
            args: Prisma.PatientItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload>[]
          }
          create: {
            args: Prisma.PatientItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload>
          }
          createMany: {
            args: Prisma.PatientItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload>[]
          }
          delete: {
            args: Prisma.PatientItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload>
          }
          update: {
            args: Prisma.PatientItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload>
          }
          deleteMany: {
            args: Prisma.PatientItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientItemPayload>
          }
          aggregate: {
            args: Prisma.PatientItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientItem>
          }
          groupBy: {
            args: Prisma.PatientItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientItemCountArgs<ExtArgs>
            result: $Utils.Optional<PatientItemCountAggregateOutputType> | number
          }
        }
      }
      Medicine: {
        payload: Prisma.$MedicinePayload<ExtArgs>
        fields: Prisma.MedicineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          findFirst: {
            args: Prisma.MedicineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          findMany: {
            args: Prisma.MedicineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>[]
          }
          create: {
            args: Prisma.MedicineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          createMany: {
            args: Prisma.MedicineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>[]
          }
          delete: {
            args: Prisma.MedicineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          update: {
            args: Prisma.MedicineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          deleteMany: {
            args: Prisma.MedicineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MedicineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicinePayload>
          }
          aggregate: {
            args: Prisma.MedicineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicine>
          }
          groupBy: {
            args: Prisma.MedicineGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicineGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicineCountArgs<ExtArgs>
            result: $Utils.Optional<MedicineCountAggregateOutputType> | number
          }
        }
      }
      Item: {
        payload: Prisma.$ItemPayload<ExtArgs>
        fields: Prisma.ItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findFirst: {
            args: Prisma.ItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          findMany: {
            args: Prisma.ItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          create: {
            args: Prisma.ItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          createMany: {
            args: Prisma.ItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>[]
          }
          delete: {
            args: Prisma.ItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          update: {
            args: Prisma.ItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          deleteMany: {
            args: Prisma.ItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ItemPayload>
          }
          aggregate: {
            args: Prisma.ItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateItem>
          }
          groupBy: {
            args: Prisma.ItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItemCountArgs<ExtArgs>
            result: $Utils.Optional<ItemCountAggregateOutputType> | number
          }
        }
      }
      Treatment: {
        payload: Prisma.$TreatmentPayload<ExtArgs>
        fields: Prisma.TreatmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreatmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreatmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          findFirst: {
            args: Prisma.TreatmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreatmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          findMany: {
            args: Prisma.TreatmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>[]
          }
          create: {
            args: Prisma.TreatmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          createMany: {
            args: Prisma.TreatmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreatmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>[]
          }
          delete: {
            args: Prisma.TreatmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          update: {
            args: Prisma.TreatmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          deleteMany: {
            args: Prisma.TreatmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreatmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TreatmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPayload>
          }
          aggregate: {
            args: Prisma.TreatmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTreatment>
          }
          groupBy: {
            args: Prisma.TreatmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreatmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreatmentCountArgs<ExtArgs>
            result: $Utils.Optional<TreatmentCountAggregateOutputType> | number
          }
        }
      }
      Package: {
        payload: Prisma.$PackagePayload<ExtArgs>
        fields: Prisma.PackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findFirst: {
            args: Prisma.PackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findMany: {
            args: Prisma.PackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          create: {
            args: Prisma.PackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          createMany: {
            args: Prisma.PackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          delete: {
            args: Prisma.PackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          update: {
            args: Prisma.PackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          deleteMany: {
            args: Prisma.PackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          aggregate: {
            args: Prisma.PackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackage>
          }
          groupBy: {
            args: Prisma.PackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageCountArgs<ExtArgs>
            result: $Utils.Optional<PackageCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Supplier: {
        payload: Prisma.$SupplierPayload<ExtArgs>
        fields: Prisma.SupplierFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupplierFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupplierFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findFirst: {
            args: Prisma.SupplierFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupplierFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          findMany: {
            args: Prisma.SupplierFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          create: {
            args: Prisma.SupplierCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          createMany: {
            args: Prisma.SupplierCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupplierCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>[]
          }
          delete: {
            args: Prisma.SupplierDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          update: {
            args: Prisma.SupplierUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          deleteMany: {
            args: Prisma.SupplierDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupplierUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SupplierUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupplierPayload>
          }
          aggregate: {
            args: Prisma.SupplierAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupplier>
          }
          groupBy: {
            args: Prisma.SupplierGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupplierGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupplierCountArgs<ExtArgs>
            result: $Utils.Optional<SupplierCountAggregateOutputType> | number
          }
        }
      }
      InventoryTransaction: {
        payload: Prisma.$InventoryTransactionPayload<ExtArgs>
        fields: Prisma.InventoryTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload>
          }
          findFirst: {
            args: Prisma.InventoryTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload>
          }
          findMany: {
            args: Prisma.InventoryTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload>[]
          }
          create: {
            args: Prisma.InventoryTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload>
          }
          createMany: {
            args: Prisma.InventoryTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload>[]
          }
          delete: {
            args: Prisma.InventoryTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload>
          }
          update: {
            args: Prisma.InventoryTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload>
          }
          deleteMany: {
            args: Prisma.InventoryTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryTransactionPayload>
          }
          aggregate: {
            args: Prisma.InventoryTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryTransaction>
          }
          groupBy: {
            args: Prisma.InventoryTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryTransactionCountAggregateOutputType> | number
          }
        }
      }
      InventoryCount: {
        payload: Prisma.$InventoryCountPayload<ExtArgs>
        fields: Prisma.InventoryCountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryCountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryCountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload>
          }
          findFirst: {
            args: Prisma.InventoryCountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryCountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload>
          }
          findMany: {
            args: Prisma.InventoryCountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload>[]
          }
          create: {
            args: Prisma.InventoryCountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload>
          }
          createMany: {
            args: Prisma.InventoryCountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryCountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload>[]
          }
          delete: {
            args: Prisma.InventoryCountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload>
          }
          update: {
            args: Prisma.InventoryCountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload>
          }
          deleteMany: {
            args: Prisma.InventoryCountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryCountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryCountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountPayload>
          }
          aggregate: {
            args: Prisma.InventoryCountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryCount>
          }
          groupBy: {
            args: Prisma.InventoryCountGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountCountAggregateOutputType> | number
          }
        }
      }
      InventoryCountItem: {
        payload: Prisma.$InventoryCountItemPayload<ExtArgs>
        fields: Prisma.InventoryCountItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryCountItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryCountItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload>
          }
          findFirst: {
            args: Prisma.InventoryCountItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryCountItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload>
          }
          findMany: {
            args: Prisma.InventoryCountItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload>[]
          }
          create: {
            args: Prisma.InventoryCountItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload>
          }
          createMany: {
            args: Prisma.InventoryCountItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryCountItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload>[]
          }
          delete: {
            args: Prisma.InventoryCountItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload>
          }
          update: {
            args: Prisma.InventoryCountItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload>
          }
          deleteMany: {
            args: Prisma.InventoryCountItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryCountItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryCountItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryCountItemPayload>
          }
          aggregate: {
            args: Prisma.InventoryCountItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryCountItem>
          }
          groupBy: {
            args: Prisma.InventoryCountItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountItemCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountItemCountAggregateOutputType> | number
          }
        }
      }
      PurchaseOrder: {
        payload: Prisma.$PurchaseOrderPayload<ExtArgs>
        fields: Prisma.PurchaseOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          findFirst: {
            args: Prisma.PurchaseOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          findMany: {
            args: Prisma.PurchaseOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>[]
          }
          create: {
            args: Prisma.PurchaseOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          createMany: {
            args: Prisma.PurchaseOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PurchaseOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>[]
          }
          delete: {
            args: Prisma.PurchaseOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          update: {
            args: Prisma.PurchaseOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          deleteMany: {
            args: Prisma.PurchaseOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PurchaseOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderPayload>
          }
          aggregate: {
            args: Prisma.PurchaseOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePurchaseOrder>
          }
          groupBy: {
            args: Prisma.PurchaseOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseOrderCountArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderCountAggregateOutputType> | number
          }
        }
      }
      PurchaseOrderItem: {
        payload: Prisma.$PurchaseOrderItemPayload<ExtArgs>
        fields: Prisma.PurchaseOrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchaseOrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseOrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          findFirst: {
            args: Prisma.PurchaseOrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseOrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          findMany: {
            args: Prisma.PurchaseOrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>[]
          }
          create: {
            args: Prisma.PurchaseOrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          createMany: {
            args: Prisma.PurchaseOrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PurchaseOrderItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>[]
          }
          delete: {
            args: Prisma.PurchaseOrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          update: {
            args: Prisma.PurchaseOrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          deleteMany: {
            args: Prisma.PurchaseOrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseOrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PurchaseOrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchaseOrderItemPayload>
          }
          aggregate: {
            args: Prisma.PurchaseOrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePurchaseOrderItem>
          }
          groupBy: {
            args: Prisma.PurchaseOrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseOrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<PurchaseOrderItemCountAggregateOutputType> | number
          }
        }
      }
      Billings: {
        payload: Prisma.$BillingsPayload<ExtArgs>
        fields: Prisma.BillingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload>
          }
          findFirst: {
            args: Prisma.BillingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload>
          }
          findMany: {
            args: Prisma.BillingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload>[]
          }
          create: {
            args: Prisma.BillingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload>
          }
          createMany: {
            args: Prisma.BillingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload>[]
          }
          delete: {
            args: Prisma.BillingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload>
          }
          update: {
            args: Prisma.BillingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload>
          }
          deleteMany: {
            args: Prisma.BillingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BillingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingsPayload>
          }
          aggregate: {
            args: Prisma.BillingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillings>
          }
          groupBy: {
            args: Prisma.BillingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillingsCountArgs<ExtArgs>
            result: $Utils.Optional<BillingsCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdEmployees: number
    updatedEmployees: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdEmployees?: boolean | UserCountOutputTypeCountCreatedEmployeesArgs
    updatedEmployees?: boolean | UserCountOutputTypeCountUpdatedEmployeesArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    schedules: number
    Appointments: number
    consultations: number
    billings: number
    notes: number
    InventoryTransaction: number
    InventoryCount: number
    createdPOs: number
    updatedPOs: number
    PurchaseOrder: number
    createdConsultations: number
    updatedConsultations: number
    createdAppointments: number
    updatedAppointments: number
    createdPatients: number
    updatedPatients: number
    createdPatientTriages: number
    updatedPatientTriages: number
    createdPatientAssessments: number
    updatedPatientAssessments: number
    createdPatientTreatments: number
    updatedPatientTreatments: number
    updatedPatientMedications: number
    createdPatientMedications: number
    updatedPatientPackages: number
    createdPatientPackages: number
    createdPatientItems: number
    updatedPatientItems: number
    createdMedicines: number
    updatedMedicines: number
    createdItems: number
    updatedItems: number
    createdTreatments: number
    updatedTreatments: number
    createdPackages: number
    updatedPackages: number
    createdCategories: number
    updatedCategories: number
    createdSuppliers: number
    updatedSuppliers: number
    createdInventoryTransactions: number
    updatedInventoryTransactions: number
    createdInventoryCounts: number
    updatedInventoryCounts: number
    createdInventoryCountItems: number
    updatedInventoryCountItems: number
    createdBillings: number
    updatedBillings: number
    createdPayments: number
    updatedPayments: number
    createdSchedules: number
    updatedSchedules: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | EmployeeCountOutputTypeCountSchedulesArgs
    Appointments?: boolean | EmployeeCountOutputTypeCountAppointmentsArgs
    consultations?: boolean | EmployeeCountOutputTypeCountConsultationsArgs
    billings?: boolean | EmployeeCountOutputTypeCountBillingsArgs
    notes?: boolean | EmployeeCountOutputTypeCountNotesArgs
    InventoryTransaction?: boolean | EmployeeCountOutputTypeCountInventoryTransactionArgs
    InventoryCount?: boolean | EmployeeCountOutputTypeCountInventoryCountArgs
    createdPOs?: boolean | EmployeeCountOutputTypeCountCreatedPOsArgs
    updatedPOs?: boolean | EmployeeCountOutputTypeCountUpdatedPOsArgs
    PurchaseOrder?: boolean | EmployeeCountOutputTypeCountPurchaseOrderArgs
    createdConsultations?: boolean | EmployeeCountOutputTypeCountCreatedConsultationsArgs
    updatedConsultations?: boolean | EmployeeCountOutputTypeCountUpdatedConsultationsArgs
    createdAppointments?: boolean | EmployeeCountOutputTypeCountCreatedAppointmentsArgs
    updatedAppointments?: boolean | EmployeeCountOutputTypeCountUpdatedAppointmentsArgs
    createdPatients?: boolean | EmployeeCountOutputTypeCountCreatedPatientsArgs
    updatedPatients?: boolean | EmployeeCountOutputTypeCountUpdatedPatientsArgs
    createdPatientTriages?: boolean | EmployeeCountOutputTypeCountCreatedPatientTriagesArgs
    updatedPatientTriages?: boolean | EmployeeCountOutputTypeCountUpdatedPatientTriagesArgs
    createdPatientAssessments?: boolean | EmployeeCountOutputTypeCountCreatedPatientAssessmentsArgs
    updatedPatientAssessments?: boolean | EmployeeCountOutputTypeCountUpdatedPatientAssessmentsArgs
    createdPatientTreatments?: boolean | EmployeeCountOutputTypeCountCreatedPatientTreatmentsArgs
    updatedPatientTreatments?: boolean | EmployeeCountOutputTypeCountUpdatedPatientTreatmentsArgs
    updatedPatientMedications?: boolean | EmployeeCountOutputTypeCountUpdatedPatientMedicationsArgs
    createdPatientMedications?: boolean | EmployeeCountOutputTypeCountCreatedPatientMedicationsArgs
    updatedPatientPackages?: boolean | EmployeeCountOutputTypeCountUpdatedPatientPackagesArgs
    createdPatientPackages?: boolean | EmployeeCountOutputTypeCountCreatedPatientPackagesArgs
    createdPatientItems?: boolean | EmployeeCountOutputTypeCountCreatedPatientItemsArgs
    updatedPatientItems?: boolean | EmployeeCountOutputTypeCountUpdatedPatientItemsArgs
    createdMedicines?: boolean | EmployeeCountOutputTypeCountCreatedMedicinesArgs
    updatedMedicines?: boolean | EmployeeCountOutputTypeCountUpdatedMedicinesArgs
    createdItems?: boolean | EmployeeCountOutputTypeCountCreatedItemsArgs
    updatedItems?: boolean | EmployeeCountOutputTypeCountUpdatedItemsArgs
    createdTreatments?: boolean | EmployeeCountOutputTypeCountCreatedTreatmentsArgs
    updatedTreatments?: boolean | EmployeeCountOutputTypeCountUpdatedTreatmentsArgs
    createdPackages?: boolean | EmployeeCountOutputTypeCountCreatedPackagesArgs
    updatedPackages?: boolean | EmployeeCountOutputTypeCountUpdatedPackagesArgs
    createdCategories?: boolean | EmployeeCountOutputTypeCountCreatedCategoriesArgs
    updatedCategories?: boolean | EmployeeCountOutputTypeCountUpdatedCategoriesArgs
    createdSuppliers?: boolean | EmployeeCountOutputTypeCountCreatedSuppliersArgs
    updatedSuppliers?: boolean | EmployeeCountOutputTypeCountUpdatedSuppliersArgs
    createdInventoryTransactions?: boolean | EmployeeCountOutputTypeCountCreatedInventoryTransactionsArgs
    updatedInventoryTransactions?: boolean | EmployeeCountOutputTypeCountUpdatedInventoryTransactionsArgs
    createdInventoryCounts?: boolean | EmployeeCountOutputTypeCountCreatedInventoryCountsArgs
    updatedInventoryCounts?: boolean | EmployeeCountOutputTypeCountUpdatedInventoryCountsArgs
    createdInventoryCountItems?: boolean | EmployeeCountOutputTypeCountCreatedInventoryCountItemsArgs
    updatedInventoryCountItems?: boolean | EmployeeCountOutputTypeCountUpdatedInventoryCountItemsArgs
    createdBillings?: boolean | EmployeeCountOutputTypeCountCreatedBillingsArgs
    updatedBillings?: boolean | EmployeeCountOutputTypeCountUpdatedBillingsArgs
    createdPayments?: boolean | EmployeeCountOutputTypeCountCreatedPaymentsArgs
    updatedPayments?: boolean | EmployeeCountOutputTypeCountUpdatedPaymentsArgs
    createdSchedules?: boolean | EmployeeCountOutputTypeCountCreatedSchedulesArgs
    updatedSchedules?: boolean | EmployeeCountOutputTypeCountUpdatedSchedulesArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountBillingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountInventoryTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryTransactionWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountInventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPOsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPOsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountPurchaseOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPatientTriagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTriageWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPatientTriagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTriageWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPatientAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientAssessmentWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPatientAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientAssessmentWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPatientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPatientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPatientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMedicationWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPatientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMedicationWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPatientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientPackageWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPatientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientPackageWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPatientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientItemWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPatientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientItemWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicineWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicineWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedSuppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedSuppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedInventoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryTransactionWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedInventoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryTransactionWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedInventoryCountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedInventoryCountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedInventoryCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountItemWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedInventoryCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountItemWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedBillingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedBillingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingsWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountCreatedSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountUpdatedSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }


  /**
   * Count Type PatientsCountOutputType
   */

  export type PatientsCountOutputType = {
    billings: number
    consultations: number
  }

  export type PatientsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billings?: boolean | PatientsCountOutputTypeCountBillingsArgs
    consultations?: boolean | PatientsCountOutputTypeCountConsultationsArgs
  }

  // Custom InputTypes
  /**
   * PatientsCountOutputType without action
   */
  export type PatientsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientsCountOutputType
     */
    select?: PatientsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientsCountOutputType without action
   */
  export type PatientsCountOutputTypeCountBillingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingsWhereInput
  }

  /**
   * PatientsCountOutputType without action
   */
  export type PatientsCountOutputTypeCountConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationsWhereInput
  }


  /**
   * Count Type ConsultationsCountOutputType
   */

  export type ConsultationsCountOutputType = {
    billings: number
  }

  export type ConsultationsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billings?: boolean | ConsultationsCountOutputTypeCountBillingsArgs
  }

  // Custom InputTypes
  /**
   * ConsultationsCountOutputType without action
   */
  export type ConsultationsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationsCountOutputType
     */
    select?: ConsultationsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConsultationsCountOutputType without action
   */
  export type ConsultationsCountOutputTypeCountBillingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingsWhereInput
  }


  /**
   * Count Type DoctorsCountOutputType
   */

  export type DoctorsCountOutputType = {
    avaialability: number
  }

  export type DoctorsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avaialability?: boolean | DoctorsCountOutputTypeCountAvaialabilityArgs
  }

  // Custom InputTypes
  /**
   * DoctorsCountOutputType without action
   */
  export type DoctorsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorsCountOutputType
     */
    select?: DoctorsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorsCountOutputType without action
   */
  export type DoctorsCountOutputTypeCountAvaialabilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvailabilityWhereInput
  }


  /**
   * Count Type AllergyCountOutputType
   */

  export type AllergyCountOutputType = {
    TriageAllergy: number
  }

  export type AllergyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TriageAllergy?: boolean | AllergyCountOutputTypeCountTriageAllergyArgs
  }

  // Custom InputTypes
  /**
   * AllergyCountOutputType without action
   */
  export type AllergyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllergyCountOutputType
     */
    select?: AllergyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AllergyCountOutputType without action
   */
  export type AllergyCountOutputTypeCountTriageAllergyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriageAllergyWhereInput
  }


  /**
   * Count Type ProblemCountOutputType
   */

  export type ProblemCountOutputType = {
    TriageProblem: number
  }

  export type ProblemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TriageProblem?: boolean | ProblemCountOutputTypeCountTriageProblemArgs
  }

  // Custom InputTypes
  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCountOutputType
     */
    select?: ProblemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountTriageProblemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriageProblemWhereInput
  }


  /**
   * Count Type PatientTriageCountOutputType
   */

  export type PatientTriageCountOutputType = {
    problems: number
    allergies: number
    consultations: number
    notes: number
  }

  export type PatientTriageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problems?: boolean | PatientTriageCountOutputTypeCountProblemsArgs
    allergies?: boolean | PatientTriageCountOutputTypeCountAllergiesArgs
    consultations?: boolean | PatientTriageCountOutputTypeCountConsultationsArgs
    notes?: boolean | PatientTriageCountOutputTypeCountNotesArgs
  }

  // Custom InputTypes
  /**
   * PatientTriageCountOutputType without action
   */
  export type PatientTriageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriageCountOutputType
     */
    select?: PatientTriageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientTriageCountOutputType without action
   */
  export type PatientTriageCountOutputTypeCountProblemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriageProblemWhereInput
  }

  /**
   * PatientTriageCountOutputType without action
   */
  export type PatientTriageCountOutputTypeCountAllergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriageAllergyWhereInput
  }

  /**
   * PatientTriageCountOutputType without action
   */
  export type PatientTriageCountOutputTypeCountConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationsWhereInput
  }

  /**
   * PatientTriageCountOutputType without action
   */
  export type PatientTriageCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }


  /**
   * Count Type PatientAssessmentCountOutputType
   */

  export type PatientAssessmentCountOutputType = {
    consultations: number
    patientMedications: number
    patientTreatments: number
    patientPackages: number
    patientItems: number
    notes: number
  }

  export type PatientAssessmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultations?: boolean | PatientAssessmentCountOutputTypeCountConsultationsArgs
    patientMedications?: boolean | PatientAssessmentCountOutputTypeCountPatientMedicationsArgs
    patientTreatments?: boolean | PatientAssessmentCountOutputTypeCountPatientTreatmentsArgs
    patientPackages?: boolean | PatientAssessmentCountOutputTypeCountPatientPackagesArgs
    patientItems?: boolean | PatientAssessmentCountOutputTypeCountPatientItemsArgs
    notes?: boolean | PatientAssessmentCountOutputTypeCountNotesArgs
  }

  // Custom InputTypes
  /**
   * PatientAssessmentCountOutputType without action
   */
  export type PatientAssessmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessmentCountOutputType
     */
    select?: PatientAssessmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientAssessmentCountOutputType without action
   */
  export type PatientAssessmentCountOutputTypeCountConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationsWhereInput
  }

  /**
   * PatientAssessmentCountOutputType without action
   */
  export type PatientAssessmentCountOutputTypeCountPatientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMedicationWhereInput
  }

  /**
   * PatientAssessmentCountOutputType without action
   */
  export type PatientAssessmentCountOutputTypeCountPatientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
  }

  /**
   * PatientAssessmentCountOutputType without action
   */
  export type PatientAssessmentCountOutputTypeCountPatientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientPackageWhereInput
  }

  /**
   * PatientAssessmentCountOutputType without action
   */
  export type PatientAssessmentCountOutputTypeCountPatientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientItemWhereInput
  }

  /**
   * PatientAssessmentCountOutputType without action
   */
  export type PatientAssessmentCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }


  /**
   * Count Type MedicineCountOutputType
   */

  export type MedicineCountOutputType = {
    patientMedications: number
    inventoryTransactions: number
    inventoryCountItems: number
    purchaseOrderItems: number
  }

  export type MedicineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientMedications?: boolean | MedicineCountOutputTypeCountPatientMedicationsArgs
    inventoryTransactions?: boolean | MedicineCountOutputTypeCountInventoryTransactionsArgs
    inventoryCountItems?: boolean | MedicineCountOutputTypeCountInventoryCountItemsArgs
    purchaseOrderItems?: boolean | MedicineCountOutputTypeCountPurchaseOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * MedicineCountOutputType without action
   */
  export type MedicineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicineCountOutputType
     */
    select?: MedicineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicineCountOutputType without action
   */
  export type MedicineCountOutputTypeCountPatientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMedicationWhereInput
  }

  /**
   * MedicineCountOutputType without action
   */
  export type MedicineCountOutputTypeCountInventoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryTransactionWhereInput
  }

  /**
   * MedicineCountOutputType without action
   */
  export type MedicineCountOutputTypeCountInventoryCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountItemWhereInput
  }

  /**
   * MedicineCountOutputType without action
   */
  export type MedicineCountOutputTypeCountPurchaseOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderItemWhereInput
  }


  /**
   * Count Type ItemCountOutputType
   */

  export type ItemCountOutputType = {
    patientItems: number
    inventoryTransactions: number
    inventoryCountItems: number
    purchaseOrderItems: number
  }

  export type ItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientItems?: boolean | ItemCountOutputTypeCountPatientItemsArgs
    inventoryTransactions?: boolean | ItemCountOutputTypeCountInventoryTransactionsArgs
    inventoryCountItems?: boolean | ItemCountOutputTypeCountInventoryCountItemsArgs
    purchaseOrderItems?: boolean | ItemCountOutputTypeCountPurchaseOrderItemsArgs
  }

  // Custom InputTypes
  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItemCountOutputType
     */
    select?: ItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountPatientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientItemWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountInventoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryTransactionWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountInventoryCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountItemWhereInput
  }

  /**
   * ItemCountOutputType without action
   */
  export type ItemCountOutputTypeCountPurchaseOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderItemWhereInput
  }


  /**
   * Count Type TreatmentCountOutputType
   */

  export type TreatmentCountOutputType = {
    patientTreatments: number
  }

  export type TreatmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTreatments?: boolean | TreatmentCountOutputTypeCountPatientTreatmentsArgs
  }

  // Custom InputTypes
  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentCountOutputType
     */
    select?: TreatmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TreatmentCountOutputType without action
   */
  export type TreatmentCountOutputTypeCountPatientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
  }


  /**
   * Count Type PackageCountOutputType
   */

  export type PackageCountOutputType = {
    patientPackages: number
  }

  export type PackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientPackages?: boolean | PackageCountOutputTypeCountPatientPackagesArgs
  }

  // Custom InputTypes
  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageCountOutputType
     */
    select?: PackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountPatientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientPackageWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    medicines: number
    items: number
    treatments: number
    packages: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicines?: boolean | CategoryCountOutputTypeCountMedicinesArgs
    items?: boolean | CategoryCountOutputTypeCountItemsArgs
    treatments?: boolean | CategoryCountOutputTypeCountTreatmentsArgs
    packages?: boolean | CategoryCountOutputTypeCountPackagesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicineWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
  }


  /**
   * Count Type SupplierCountOutputType
   */

  export type SupplierCountOutputType = {
    medicines: number
    items: number
    purchaseOrders: number
  }

  export type SupplierCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicines?: boolean | SupplierCountOutputTypeCountMedicinesArgs
    items?: boolean | SupplierCountOutputTypeCountItemsArgs
    purchaseOrders?: boolean | SupplierCountOutputTypeCountPurchaseOrdersArgs
  }

  // Custom InputTypes
  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SupplierCountOutputType
     */
    select?: SupplierCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicineWhereInput
  }

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
  }

  /**
   * SupplierCountOutputType without action
   */
  export type SupplierCountOutputTypeCountPurchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
  }


  /**
   * Count Type InventoryCountCountOutputType
   */

  export type InventoryCountCountOutputType = {
    items: number
  }

  export type InventoryCountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | InventoryCountCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * InventoryCountCountOutputType without action
   */
  export type InventoryCountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountCountOutputType
     */
    select?: InventoryCountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryCountCountOutputType without action
   */
  export type InventoryCountCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountItemWhereInput
  }


  /**
   * Count Type PurchaseOrderCountOutputType
   */

  export type PurchaseOrderCountOutputType = {
    items: number
  }

  export type PurchaseOrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | PurchaseOrderCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * PurchaseOrderCountOutputType without action
   */
  export type PurchaseOrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderCountOutputType
     */
    select?: PurchaseOrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PurchaseOrderCountOutputType without action
   */
  export type PurchaseOrderCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderItemWhereInput
  }


  /**
   * Count Type BillingsCountOutputType
   */

  export type BillingsCountOutputType = {
    patientTreatments: number
    patientMedications: number
    patientPackages: number
    patientItems: number
    payments: number
  }

  export type BillingsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTreatments?: boolean | BillingsCountOutputTypeCountPatientTreatmentsArgs
    patientMedications?: boolean | BillingsCountOutputTypeCountPatientMedicationsArgs
    patientPackages?: boolean | BillingsCountOutputTypeCountPatientPackagesArgs
    patientItems?: boolean | BillingsCountOutputTypeCountPatientItemsArgs
    payments?: boolean | BillingsCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * BillingsCountOutputType without action
   */
  export type BillingsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingsCountOutputType
     */
    select?: BillingsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BillingsCountOutputType without action
   */
  export type BillingsCountOutputTypeCountPatientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
  }

  /**
   * BillingsCountOutputType without action
   */
  export type BillingsCountOutputTypeCountPatientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMedicationWhereInput
  }

  /**
   * BillingsCountOutputType without action
   */
  export type BillingsCountOutputTypeCountPatientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientPackageWhereInput
  }

  /**
   * BillingsCountOutputType without action
   */
  export type BillingsCountOutputTypeCountPatientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientItemWhereInput
  }

  /**
   * BillingsCountOutputType without action
   */
  export type BillingsCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
    firstName: string | null
    lastName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    deletedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
    firstName: string | null
    lastName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    deletedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    firstName: number
    lastName: number
    createdAt: number
    updatedAt: number
    deleted: number
    deletedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    firstName?: true
    lastName?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt: Date
    updatedAt: Date
    deleted: boolean
    deletedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    deletedAt?: boolean
    employee?: boolean | User$employeeArgs<ExtArgs>
    createdEmployees?: boolean | User$createdEmployeesArgs<ExtArgs>
    updatedEmployees?: boolean | User$updatedEmployeesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    deletedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | User$employeeArgs<ExtArgs>
    createdEmployees?: boolean | User$createdEmployeesArgs<ExtArgs>
    updatedEmployees?: boolean | User$updatedEmployeesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs> | null
      createdEmployees: Prisma.$EmployeePayload<ExtArgs>[]
      updatedEmployees: Prisma.$EmployeePayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      role: string
      firstName: string
      lastName: string
      createdAt: Date
      updatedAt: Date
      deleted: boolean
      deletedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends User$employeeArgs<ExtArgs> = {}>(args?: Subset<T, User$employeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdEmployees<T extends User$createdEmployeesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdEmployeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany"> | Null>
    updatedEmployees<T extends User$updatedEmployeesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedEmployeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deleted: FieldRef<"User", 'Boolean'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.employee
   */
  export type User$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * User.createdEmployees
   */
  export type User$createdEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * User.updatedEmployees
   */
  export type User$updatedEmployeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    salary: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type EmployeeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    salary: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    position: $Enums.Position | null
    hireDate: Date | null
    salary: number | null
    phoneNumber: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
    deleted: boolean | null
    deletedAt: Date | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    position: $Enums.Position | null
    hireDate: Date | null
    salary: number | null
    phoneNumber: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
    deleted: boolean | null
    deletedAt: Date | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    userId: number
    firstName: number
    lastName: number
    email: number
    department: number
    position: number
    hireDate: number
    salary: number
    phoneNumber: number
    address: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    deleted: number
    deletedAt: number
    _all: number
  }


  export type EmployeeAvgAggregateInputType = {
    id?: true
    userId?: true
    salary?: true
    createdById?: true
    updatedById?: true
  }

  export type EmployeeSumAggregateInputType = {
    id?: true
    userId?: true
    salary?: true
    createdById?: true
    updatedById?: true
  }

  export type EmployeeMinAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    position?: true
    hireDate?: true
    salary?: true
    phoneNumber?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    deleted?: true
    deletedAt?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    position?: true
    hireDate?: true
    salary?: true
    phoneNumber?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    deleted?: true
    deletedAt?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    department?: true
    position?: true
    hireDate?: true
    salary?: true
    phoneNumber?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    deleted?: true
    deletedAt?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _avg?: EmployeeAvgAggregateInputType
    _sum?: EmployeeSumAggregateInputType
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department: string[]
    position: $Enums.Position
    hireDate: Date | null
    salary: number | null
    phoneNumber: string | null
    address: string | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    deleted: boolean
    deletedAt: Date | null
    _count: EmployeeCountAggregateOutputType | null
    _avg: EmployeeAvgAggregateOutputType | null
    _sum: EmployeeSumAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    department?: boolean
    position?: boolean
    hireDate?: boolean
    salary?: boolean
    phoneNumber?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    deleted?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    schedules?: boolean | Employee$schedulesArgs<ExtArgs>
    Appointments?: boolean | Employee$AppointmentsArgs<ExtArgs>
    consultations?: boolean | Employee$consultationsArgs<ExtArgs>
    billings?: boolean | Employee$billingsArgs<ExtArgs>
    notes?: boolean | Employee$notesArgs<ExtArgs>
    InventoryTransaction?: boolean | Employee$InventoryTransactionArgs<ExtArgs>
    InventoryCount?: boolean | Employee$InventoryCountArgs<ExtArgs>
    createdPOs?: boolean | Employee$createdPOsArgs<ExtArgs>
    updatedPOs?: boolean | Employee$updatedPOsArgs<ExtArgs>
    PurchaseOrder?: boolean | Employee$PurchaseOrderArgs<ExtArgs>
    createdConsultations?: boolean | Employee$createdConsultationsArgs<ExtArgs>
    updatedConsultations?: boolean | Employee$updatedConsultationsArgs<ExtArgs>
    createdAppointments?: boolean | Employee$createdAppointmentsArgs<ExtArgs>
    updatedAppointments?: boolean | Employee$updatedAppointmentsArgs<ExtArgs>
    createdPatients?: boolean | Employee$createdPatientsArgs<ExtArgs>
    updatedPatients?: boolean | Employee$updatedPatientsArgs<ExtArgs>
    createdPatientTriages?: boolean | Employee$createdPatientTriagesArgs<ExtArgs>
    updatedPatientTriages?: boolean | Employee$updatedPatientTriagesArgs<ExtArgs>
    createdPatientAssessments?: boolean | Employee$createdPatientAssessmentsArgs<ExtArgs>
    updatedPatientAssessments?: boolean | Employee$updatedPatientAssessmentsArgs<ExtArgs>
    createdPatientTreatments?: boolean | Employee$createdPatientTreatmentsArgs<ExtArgs>
    updatedPatientTreatments?: boolean | Employee$updatedPatientTreatmentsArgs<ExtArgs>
    updatedPatientMedications?: boolean | Employee$updatedPatientMedicationsArgs<ExtArgs>
    createdPatientMedications?: boolean | Employee$createdPatientMedicationsArgs<ExtArgs>
    updatedPatientPackages?: boolean | Employee$updatedPatientPackagesArgs<ExtArgs>
    createdPatientPackages?: boolean | Employee$createdPatientPackagesArgs<ExtArgs>
    createdPatientItems?: boolean | Employee$createdPatientItemsArgs<ExtArgs>
    updatedPatientItems?: boolean | Employee$updatedPatientItemsArgs<ExtArgs>
    createdMedicines?: boolean | Employee$createdMedicinesArgs<ExtArgs>
    updatedMedicines?: boolean | Employee$updatedMedicinesArgs<ExtArgs>
    createdItems?: boolean | Employee$createdItemsArgs<ExtArgs>
    updatedItems?: boolean | Employee$updatedItemsArgs<ExtArgs>
    createdTreatments?: boolean | Employee$createdTreatmentsArgs<ExtArgs>
    updatedTreatments?: boolean | Employee$updatedTreatmentsArgs<ExtArgs>
    createdPackages?: boolean | Employee$createdPackagesArgs<ExtArgs>
    updatedPackages?: boolean | Employee$updatedPackagesArgs<ExtArgs>
    createdCategories?: boolean | Employee$createdCategoriesArgs<ExtArgs>
    updatedCategories?: boolean | Employee$updatedCategoriesArgs<ExtArgs>
    createdSuppliers?: boolean | Employee$createdSuppliersArgs<ExtArgs>
    updatedSuppliers?: boolean | Employee$updatedSuppliersArgs<ExtArgs>
    createdInventoryTransactions?: boolean | Employee$createdInventoryTransactionsArgs<ExtArgs>
    updatedInventoryTransactions?: boolean | Employee$updatedInventoryTransactionsArgs<ExtArgs>
    createdInventoryCounts?: boolean | Employee$createdInventoryCountsArgs<ExtArgs>
    updatedInventoryCounts?: boolean | Employee$updatedInventoryCountsArgs<ExtArgs>
    createdInventoryCountItems?: boolean | Employee$createdInventoryCountItemsArgs<ExtArgs>
    updatedInventoryCountItems?: boolean | Employee$updatedInventoryCountItemsArgs<ExtArgs>
    createdBillings?: boolean | Employee$createdBillingsArgs<ExtArgs>
    updatedBillings?: boolean | Employee$updatedBillingsArgs<ExtArgs>
    createdPayments?: boolean | Employee$createdPaymentsArgs<ExtArgs>
    updatedPayments?: boolean | Employee$updatedPaymentsArgs<ExtArgs>
    createdSchedules?: boolean | Employee$createdSchedulesArgs<ExtArgs>
    updatedSchedules?: boolean | Employee$updatedSchedulesArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    department?: boolean
    position?: boolean
    hireDate?: boolean
    salary?: boolean
    phoneNumber?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    deleted?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    department?: boolean
    position?: boolean
    hireDate?: boolean
    salary?: boolean
    phoneNumber?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    deleted?: boolean
    deletedAt?: boolean
  }

  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
    schedules?: boolean | Employee$schedulesArgs<ExtArgs>
    Appointments?: boolean | Employee$AppointmentsArgs<ExtArgs>
    consultations?: boolean | Employee$consultationsArgs<ExtArgs>
    billings?: boolean | Employee$billingsArgs<ExtArgs>
    notes?: boolean | Employee$notesArgs<ExtArgs>
    InventoryTransaction?: boolean | Employee$InventoryTransactionArgs<ExtArgs>
    InventoryCount?: boolean | Employee$InventoryCountArgs<ExtArgs>
    createdPOs?: boolean | Employee$createdPOsArgs<ExtArgs>
    updatedPOs?: boolean | Employee$updatedPOsArgs<ExtArgs>
    PurchaseOrder?: boolean | Employee$PurchaseOrderArgs<ExtArgs>
    createdConsultations?: boolean | Employee$createdConsultationsArgs<ExtArgs>
    updatedConsultations?: boolean | Employee$updatedConsultationsArgs<ExtArgs>
    createdAppointments?: boolean | Employee$createdAppointmentsArgs<ExtArgs>
    updatedAppointments?: boolean | Employee$updatedAppointmentsArgs<ExtArgs>
    createdPatients?: boolean | Employee$createdPatientsArgs<ExtArgs>
    updatedPatients?: boolean | Employee$updatedPatientsArgs<ExtArgs>
    createdPatientTriages?: boolean | Employee$createdPatientTriagesArgs<ExtArgs>
    updatedPatientTriages?: boolean | Employee$updatedPatientTriagesArgs<ExtArgs>
    createdPatientAssessments?: boolean | Employee$createdPatientAssessmentsArgs<ExtArgs>
    updatedPatientAssessments?: boolean | Employee$updatedPatientAssessmentsArgs<ExtArgs>
    createdPatientTreatments?: boolean | Employee$createdPatientTreatmentsArgs<ExtArgs>
    updatedPatientTreatments?: boolean | Employee$updatedPatientTreatmentsArgs<ExtArgs>
    updatedPatientMedications?: boolean | Employee$updatedPatientMedicationsArgs<ExtArgs>
    createdPatientMedications?: boolean | Employee$createdPatientMedicationsArgs<ExtArgs>
    updatedPatientPackages?: boolean | Employee$updatedPatientPackagesArgs<ExtArgs>
    createdPatientPackages?: boolean | Employee$createdPatientPackagesArgs<ExtArgs>
    createdPatientItems?: boolean | Employee$createdPatientItemsArgs<ExtArgs>
    updatedPatientItems?: boolean | Employee$updatedPatientItemsArgs<ExtArgs>
    createdMedicines?: boolean | Employee$createdMedicinesArgs<ExtArgs>
    updatedMedicines?: boolean | Employee$updatedMedicinesArgs<ExtArgs>
    createdItems?: boolean | Employee$createdItemsArgs<ExtArgs>
    updatedItems?: boolean | Employee$updatedItemsArgs<ExtArgs>
    createdTreatments?: boolean | Employee$createdTreatmentsArgs<ExtArgs>
    updatedTreatments?: boolean | Employee$updatedTreatmentsArgs<ExtArgs>
    createdPackages?: boolean | Employee$createdPackagesArgs<ExtArgs>
    updatedPackages?: boolean | Employee$updatedPackagesArgs<ExtArgs>
    createdCategories?: boolean | Employee$createdCategoriesArgs<ExtArgs>
    updatedCategories?: boolean | Employee$updatedCategoriesArgs<ExtArgs>
    createdSuppliers?: boolean | Employee$createdSuppliersArgs<ExtArgs>
    updatedSuppliers?: boolean | Employee$updatedSuppliersArgs<ExtArgs>
    createdInventoryTransactions?: boolean | Employee$createdInventoryTransactionsArgs<ExtArgs>
    updatedInventoryTransactions?: boolean | Employee$updatedInventoryTransactionsArgs<ExtArgs>
    createdInventoryCounts?: boolean | Employee$createdInventoryCountsArgs<ExtArgs>
    updatedInventoryCounts?: boolean | Employee$updatedInventoryCountsArgs<ExtArgs>
    createdInventoryCountItems?: boolean | Employee$createdInventoryCountItemsArgs<ExtArgs>
    updatedInventoryCountItems?: boolean | Employee$updatedInventoryCountItemsArgs<ExtArgs>
    createdBillings?: boolean | Employee$createdBillingsArgs<ExtArgs>
    updatedBillings?: boolean | Employee$updatedBillingsArgs<ExtArgs>
    createdPayments?: boolean | Employee$createdPaymentsArgs<ExtArgs>
    updatedPayments?: boolean | Employee$updatedPaymentsArgs<ExtArgs>
    createdSchedules?: boolean | Employee$createdSchedulesArgs<ExtArgs>
    updatedSchedules?: boolean | Employee$updatedSchedulesArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      updatedBy: Prisma.$UserPayload<ExtArgs>
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
      Appointments: Prisma.$AppointmentsPayload<ExtArgs>[]
      consultations: Prisma.$ConsultationsPayload<ExtArgs>[]
      billings: Prisma.$BillingsPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      InventoryTransaction: Prisma.$InventoryTransactionPayload<ExtArgs>[]
      InventoryCount: Prisma.$InventoryCountPayload<ExtArgs>[]
      createdPOs: Prisma.$PurchaseOrderPayload<ExtArgs>[]
      updatedPOs: Prisma.$PurchaseOrderPayload<ExtArgs>[]
      PurchaseOrder: Prisma.$PurchaseOrderPayload<ExtArgs>[]
      createdConsultations: Prisma.$ConsultationsPayload<ExtArgs>[]
      updatedConsultations: Prisma.$ConsultationsPayload<ExtArgs>[]
      createdAppointments: Prisma.$AppointmentsPayload<ExtArgs>[]
      updatedAppointments: Prisma.$AppointmentsPayload<ExtArgs>[]
      createdPatients: Prisma.$PatientsPayload<ExtArgs>[]
      updatedPatients: Prisma.$PatientsPayload<ExtArgs>[]
      createdPatientTriages: Prisma.$PatientTriagePayload<ExtArgs>[]
      updatedPatientTriages: Prisma.$PatientTriagePayload<ExtArgs>[]
      createdPatientAssessments: Prisma.$PatientAssessmentPayload<ExtArgs>[]
      updatedPatientAssessments: Prisma.$PatientAssessmentPayload<ExtArgs>[]
      createdPatientTreatments: Prisma.$PatientTreatmentPayload<ExtArgs>[]
      updatedPatientTreatments: Prisma.$PatientTreatmentPayload<ExtArgs>[]
      updatedPatientMedications: Prisma.$PatientMedicationPayload<ExtArgs>[]
      createdPatientMedications: Prisma.$PatientMedicationPayload<ExtArgs>[]
      updatedPatientPackages: Prisma.$PatientPackagePayload<ExtArgs>[]
      createdPatientPackages: Prisma.$PatientPackagePayload<ExtArgs>[]
      createdPatientItems: Prisma.$PatientItemPayload<ExtArgs>[]
      updatedPatientItems: Prisma.$PatientItemPayload<ExtArgs>[]
      createdMedicines: Prisma.$MedicinePayload<ExtArgs>[]
      updatedMedicines: Prisma.$MedicinePayload<ExtArgs>[]
      createdItems: Prisma.$ItemPayload<ExtArgs>[]
      updatedItems: Prisma.$ItemPayload<ExtArgs>[]
      createdTreatments: Prisma.$TreatmentPayload<ExtArgs>[]
      updatedTreatments: Prisma.$TreatmentPayload<ExtArgs>[]
      createdPackages: Prisma.$PackagePayload<ExtArgs>[]
      updatedPackages: Prisma.$PackagePayload<ExtArgs>[]
      createdCategories: Prisma.$CategoryPayload<ExtArgs>[]
      updatedCategories: Prisma.$CategoryPayload<ExtArgs>[]
      createdSuppliers: Prisma.$SupplierPayload<ExtArgs>[]
      updatedSuppliers: Prisma.$SupplierPayload<ExtArgs>[]
      createdInventoryTransactions: Prisma.$InventoryTransactionPayload<ExtArgs>[]
      updatedInventoryTransactions: Prisma.$InventoryTransactionPayload<ExtArgs>[]
      createdInventoryCounts: Prisma.$InventoryCountPayload<ExtArgs>[]
      updatedInventoryCounts: Prisma.$InventoryCountPayload<ExtArgs>[]
      createdInventoryCountItems: Prisma.$InventoryCountItemPayload<ExtArgs>[]
      updatedInventoryCountItems: Prisma.$InventoryCountItemPayload<ExtArgs>[]
      createdBillings: Prisma.$BillingsPayload<ExtArgs>[]
      updatedBillings: Prisma.$BillingsPayload<ExtArgs>[]
      createdPayments: Prisma.$PaymentPayload<ExtArgs>[]
      updatedPayments: Prisma.$PaymentPayload<ExtArgs>[]
      createdSchedules: Prisma.$SchedulePayload<ExtArgs>[]
      updatedSchedules: Prisma.$SchedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      firstName: string
      lastName: string
      email: string
      department: string[]
      position: $Enums.Position
      hireDate: Date | null
      salary: number | null
      phoneNumber: string | null
      address: string | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
      deleted: boolean
      deletedAt: Date | null
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    schedules<T extends Employee$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    Appointments<T extends Employee$AppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$AppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findMany"> | Null>
    consultations<T extends Employee$consultationsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$consultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findMany"> | Null>
    billings<T extends Employee$billingsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$billingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findMany"> | Null>
    notes<T extends Employee$notesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    InventoryTransaction<T extends Employee$InventoryTransactionArgs<ExtArgs> = {}>(args?: Subset<T, Employee$InventoryTransactionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    InventoryCount<T extends Employee$InventoryCountArgs<ExtArgs> = {}>(args?: Subset<T, Employee$InventoryCountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "findMany"> | Null>
    createdPOs<T extends Employee$createdPOsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPOsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany"> | Null>
    updatedPOs<T extends Employee$updatedPOsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPOsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany"> | Null>
    PurchaseOrder<T extends Employee$PurchaseOrderArgs<ExtArgs> = {}>(args?: Subset<T, Employee$PurchaseOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany"> | Null>
    createdConsultations<T extends Employee$createdConsultationsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdConsultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findMany"> | Null>
    updatedConsultations<T extends Employee$updatedConsultationsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedConsultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findMany"> | Null>
    createdAppointments<T extends Employee$createdAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findMany"> | Null>
    updatedAppointments<T extends Employee$updatedAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findMany"> | Null>
    createdPatients<T extends Employee$createdPatientsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPatientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "findMany"> | Null>
    updatedPatients<T extends Employee$updatedPatientsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPatientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "findMany"> | Null>
    createdPatientTriages<T extends Employee$createdPatientTriagesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPatientTriagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findMany"> | Null>
    updatedPatientTriages<T extends Employee$updatedPatientTriagesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPatientTriagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findMany"> | Null>
    createdPatientAssessments<T extends Employee$createdPatientAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPatientAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findMany"> | Null>
    updatedPatientAssessments<T extends Employee$updatedPatientAssessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPatientAssessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findMany"> | Null>
    createdPatientTreatments<T extends Employee$createdPatientTreatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPatientTreatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany"> | Null>
    updatedPatientTreatments<T extends Employee$updatedPatientTreatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPatientTreatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany"> | Null>
    updatedPatientMedications<T extends Employee$updatedPatientMedicationsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPatientMedicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findMany"> | Null>
    createdPatientMedications<T extends Employee$createdPatientMedicationsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPatientMedicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findMany"> | Null>
    updatedPatientPackages<T extends Employee$updatedPatientPackagesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPatientPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findMany"> | Null>
    createdPatientPackages<T extends Employee$createdPatientPackagesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPatientPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findMany"> | Null>
    createdPatientItems<T extends Employee$createdPatientItemsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPatientItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findMany"> | Null>
    updatedPatientItems<T extends Employee$updatedPatientItemsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPatientItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findMany"> | Null>
    createdMedicines<T extends Employee$createdMedicinesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdMedicinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findMany"> | Null>
    updatedMedicines<T extends Employee$updatedMedicinesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedMedicinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findMany"> | Null>
    createdItems<T extends Employee$createdItemsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany"> | Null>
    updatedItems<T extends Employee$updatedItemsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany"> | Null>
    createdTreatments<T extends Employee$createdTreatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdTreatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany"> | Null>
    updatedTreatments<T extends Employee$updatedTreatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedTreatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany"> | Null>
    createdPackages<T extends Employee$createdPackagesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany"> | Null>
    updatedPackages<T extends Employee$updatedPackagesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany"> | Null>
    createdCategories<T extends Employee$createdCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    updatedCategories<T extends Employee$updatedCategoriesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedCategoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    createdSuppliers<T extends Employee$createdSuppliersArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdSuppliersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findMany"> | Null>
    updatedSuppliers<T extends Employee$updatedSuppliersArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedSuppliersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findMany"> | Null>
    createdInventoryTransactions<T extends Employee$createdInventoryTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdInventoryTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    updatedInventoryTransactions<T extends Employee$updatedInventoryTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedInventoryTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    createdInventoryCounts<T extends Employee$createdInventoryCountsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdInventoryCountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "findMany"> | Null>
    updatedInventoryCounts<T extends Employee$updatedInventoryCountsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedInventoryCountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "findMany"> | Null>
    createdInventoryCountItems<T extends Employee$createdInventoryCountItemsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdInventoryCountItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findMany"> | Null>
    updatedInventoryCountItems<T extends Employee$updatedInventoryCountItemsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedInventoryCountItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findMany"> | Null>
    createdBillings<T extends Employee$createdBillingsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdBillingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findMany"> | Null>
    updatedBillings<T extends Employee$updatedBillingsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedBillingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findMany"> | Null>
    createdPayments<T extends Employee$createdPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    updatedPayments<T extends Employee$updatedPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    createdSchedules<T extends Employee$createdSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$createdSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    updatedSchedules<T extends Employee$updatedSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, Employee$updatedSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */ 
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'Int'>
    readonly userId: FieldRef<"Employee", 'Int'>
    readonly firstName: FieldRef<"Employee", 'String'>
    readonly lastName: FieldRef<"Employee", 'String'>
    readonly email: FieldRef<"Employee", 'String'>
    readonly department: FieldRef<"Employee", 'String[]'>
    readonly position: FieldRef<"Employee", 'Position'>
    readonly hireDate: FieldRef<"Employee", 'DateTime'>
    readonly salary: FieldRef<"Employee", 'Float'>
    readonly phoneNumber: FieldRef<"Employee", 'String'>
    readonly address: FieldRef<"Employee", 'String'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
    readonly createdById: FieldRef<"Employee", 'Int'>
    readonly updatedById: FieldRef<"Employee", 'Int'>
    readonly deleted: FieldRef<"Employee", 'Boolean'>
    readonly deletedAt: FieldRef<"Employee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
  }

  /**
   * Employee.schedules
   */
  export type Employee$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Employee.Appointments
   */
  export type Employee$AppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    where?: AppointmentsWhereInput
    orderBy?: AppointmentsOrderByWithRelationInput | AppointmentsOrderByWithRelationInput[]
    cursor?: AppointmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentsScalarFieldEnum | AppointmentsScalarFieldEnum[]
  }

  /**
   * Employee.consultations
   */
  export type Employee$consultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    where?: ConsultationsWhereInput
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    cursor?: ConsultationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationsScalarFieldEnum | ConsultationsScalarFieldEnum[]
  }

  /**
   * Employee.billings
   */
  export type Employee$billingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    where?: BillingsWhereInput
    orderBy?: BillingsOrderByWithRelationInput | BillingsOrderByWithRelationInput[]
    cursor?: BillingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingsScalarFieldEnum | BillingsScalarFieldEnum[]
  }

  /**
   * Employee.notes
   */
  export type Employee$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Employee.InventoryTransaction
   */
  export type Employee$InventoryTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    where?: InventoryTransactionWhereInput
    orderBy?: InventoryTransactionOrderByWithRelationInput | InventoryTransactionOrderByWithRelationInput[]
    cursor?: InventoryTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryTransactionScalarFieldEnum | InventoryTransactionScalarFieldEnum[]
  }

  /**
   * Employee.InventoryCount
   */
  export type Employee$InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    where?: InventoryCountWhereInput
    orderBy?: InventoryCountOrderByWithRelationInput | InventoryCountOrderByWithRelationInput[]
    cursor?: InventoryCountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryCountScalarFieldEnum | InventoryCountScalarFieldEnum[]
  }

  /**
   * Employee.createdPOs
   */
  export type Employee$createdPOsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    cursor?: PurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * Employee.updatedPOs
   */
  export type Employee$updatedPOsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    cursor?: PurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * Employee.PurchaseOrder
   */
  export type Employee$PurchaseOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    cursor?: PurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * Employee.createdConsultations
   */
  export type Employee$createdConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    where?: ConsultationsWhereInput
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    cursor?: ConsultationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationsScalarFieldEnum | ConsultationsScalarFieldEnum[]
  }

  /**
   * Employee.updatedConsultations
   */
  export type Employee$updatedConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    where?: ConsultationsWhereInput
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    cursor?: ConsultationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationsScalarFieldEnum | ConsultationsScalarFieldEnum[]
  }

  /**
   * Employee.createdAppointments
   */
  export type Employee$createdAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    where?: AppointmentsWhereInput
    orderBy?: AppointmentsOrderByWithRelationInput | AppointmentsOrderByWithRelationInput[]
    cursor?: AppointmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentsScalarFieldEnum | AppointmentsScalarFieldEnum[]
  }

  /**
   * Employee.updatedAppointments
   */
  export type Employee$updatedAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    where?: AppointmentsWhereInput
    orderBy?: AppointmentsOrderByWithRelationInput | AppointmentsOrderByWithRelationInput[]
    cursor?: AppointmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentsScalarFieldEnum | AppointmentsScalarFieldEnum[]
  }

  /**
   * Employee.createdPatients
   */
  export type Employee$createdPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    where?: PatientsWhereInput
    orderBy?: PatientsOrderByWithRelationInput | PatientsOrderByWithRelationInput[]
    cursor?: PatientsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientsScalarFieldEnum | PatientsScalarFieldEnum[]
  }

  /**
   * Employee.updatedPatients
   */
  export type Employee$updatedPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    where?: PatientsWhereInput
    orderBy?: PatientsOrderByWithRelationInput | PatientsOrderByWithRelationInput[]
    cursor?: PatientsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientsScalarFieldEnum | PatientsScalarFieldEnum[]
  }

  /**
   * Employee.createdPatientTriages
   */
  export type Employee$createdPatientTriagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    where?: PatientTriageWhereInput
    orderBy?: PatientTriageOrderByWithRelationInput | PatientTriageOrderByWithRelationInput[]
    cursor?: PatientTriageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTriageScalarFieldEnum | PatientTriageScalarFieldEnum[]
  }

  /**
   * Employee.updatedPatientTriages
   */
  export type Employee$updatedPatientTriagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    where?: PatientTriageWhereInput
    orderBy?: PatientTriageOrderByWithRelationInput | PatientTriageOrderByWithRelationInput[]
    cursor?: PatientTriageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTriageScalarFieldEnum | PatientTriageScalarFieldEnum[]
  }

  /**
   * Employee.createdPatientAssessments
   */
  export type Employee$createdPatientAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    where?: PatientAssessmentWhereInput
    orderBy?: PatientAssessmentOrderByWithRelationInput | PatientAssessmentOrderByWithRelationInput[]
    cursor?: PatientAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientAssessmentScalarFieldEnum | PatientAssessmentScalarFieldEnum[]
  }

  /**
   * Employee.updatedPatientAssessments
   */
  export type Employee$updatedPatientAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    where?: PatientAssessmentWhereInput
    orderBy?: PatientAssessmentOrderByWithRelationInput | PatientAssessmentOrderByWithRelationInput[]
    cursor?: PatientAssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientAssessmentScalarFieldEnum | PatientAssessmentScalarFieldEnum[]
  }

  /**
   * Employee.createdPatientTreatments
   */
  export type Employee$createdPatientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    cursor?: PatientTreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * Employee.updatedPatientTreatments
   */
  export type Employee$updatedPatientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    cursor?: PatientTreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * Employee.updatedPatientMedications
   */
  export type Employee$updatedPatientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    where?: PatientMedicationWhereInput
    orderBy?: PatientMedicationOrderByWithRelationInput | PatientMedicationOrderByWithRelationInput[]
    cursor?: PatientMedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientMedicationScalarFieldEnum | PatientMedicationScalarFieldEnum[]
  }

  /**
   * Employee.createdPatientMedications
   */
  export type Employee$createdPatientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    where?: PatientMedicationWhereInput
    orderBy?: PatientMedicationOrderByWithRelationInput | PatientMedicationOrderByWithRelationInput[]
    cursor?: PatientMedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientMedicationScalarFieldEnum | PatientMedicationScalarFieldEnum[]
  }

  /**
   * Employee.updatedPatientPackages
   */
  export type Employee$updatedPatientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    where?: PatientPackageWhereInput
    orderBy?: PatientPackageOrderByWithRelationInput | PatientPackageOrderByWithRelationInput[]
    cursor?: PatientPackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientPackageScalarFieldEnum | PatientPackageScalarFieldEnum[]
  }

  /**
   * Employee.createdPatientPackages
   */
  export type Employee$createdPatientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    where?: PatientPackageWhereInput
    orderBy?: PatientPackageOrderByWithRelationInput | PatientPackageOrderByWithRelationInput[]
    cursor?: PatientPackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientPackageScalarFieldEnum | PatientPackageScalarFieldEnum[]
  }

  /**
   * Employee.createdPatientItems
   */
  export type Employee$createdPatientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    where?: PatientItemWhereInput
    orderBy?: PatientItemOrderByWithRelationInput | PatientItemOrderByWithRelationInput[]
    cursor?: PatientItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientItemScalarFieldEnum | PatientItemScalarFieldEnum[]
  }

  /**
   * Employee.updatedPatientItems
   */
  export type Employee$updatedPatientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    where?: PatientItemWhereInput
    orderBy?: PatientItemOrderByWithRelationInput | PatientItemOrderByWithRelationInput[]
    cursor?: PatientItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientItemScalarFieldEnum | PatientItemScalarFieldEnum[]
  }

  /**
   * Employee.createdMedicines
   */
  export type Employee$createdMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    where?: MedicineWhereInput
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    cursor?: MedicineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Employee.updatedMedicines
   */
  export type Employee$updatedMedicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    where?: MedicineWhereInput
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    cursor?: MedicineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Employee.createdItems
   */
  export type Employee$createdItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Employee.updatedItems
   */
  export type Employee$updatedItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Employee.createdTreatments
   */
  export type Employee$createdTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    cursor?: TreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Employee.updatedTreatments
   */
  export type Employee$updatedTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    cursor?: TreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Employee.createdPackages
   */
  export type Employee$createdPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    cursor?: PackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Employee.updatedPackages
   */
  export type Employee$updatedPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    cursor?: PackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Employee.createdCategories
   */
  export type Employee$createdCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Employee.updatedCategories
   */
  export type Employee$updatedCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Employee.createdSuppliers
   */
  export type Employee$createdSuppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    cursor?: SupplierWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Employee.updatedSuppliers
   */
  export type Employee$updatedSuppliersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    cursor?: SupplierWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Employee.createdInventoryTransactions
   */
  export type Employee$createdInventoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    where?: InventoryTransactionWhereInput
    orderBy?: InventoryTransactionOrderByWithRelationInput | InventoryTransactionOrderByWithRelationInput[]
    cursor?: InventoryTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryTransactionScalarFieldEnum | InventoryTransactionScalarFieldEnum[]
  }

  /**
   * Employee.updatedInventoryTransactions
   */
  export type Employee$updatedInventoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    where?: InventoryTransactionWhereInput
    orderBy?: InventoryTransactionOrderByWithRelationInput | InventoryTransactionOrderByWithRelationInput[]
    cursor?: InventoryTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryTransactionScalarFieldEnum | InventoryTransactionScalarFieldEnum[]
  }

  /**
   * Employee.createdInventoryCounts
   */
  export type Employee$createdInventoryCountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    where?: InventoryCountWhereInput
    orderBy?: InventoryCountOrderByWithRelationInput | InventoryCountOrderByWithRelationInput[]
    cursor?: InventoryCountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryCountScalarFieldEnum | InventoryCountScalarFieldEnum[]
  }

  /**
   * Employee.updatedInventoryCounts
   */
  export type Employee$updatedInventoryCountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    where?: InventoryCountWhereInput
    orderBy?: InventoryCountOrderByWithRelationInput | InventoryCountOrderByWithRelationInput[]
    cursor?: InventoryCountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryCountScalarFieldEnum | InventoryCountScalarFieldEnum[]
  }

  /**
   * Employee.createdInventoryCountItems
   */
  export type Employee$createdInventoryCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    where?: InventoryCountItemWhereInput
    orderBy?: InventoryCountItemOrderByWithRelationInput | InventoryCountItemOrderByWithRelationInput[]
    cursor?: InventoryCountItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryCountItemScalarFieldEnum | InventoryCountItemScalarFieldEnum[]
  }

  /**
   * Employee.updatedInventoryCountItems
   */
  export type Employee$updatedInventoryCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    where?: InventoryCountItemWhereInput
    orderBy?: InventoryCountItemOrderByWithRelationInput | InventoryCountItemOrderByWithRelationInput[]
    cursor?: InventoryCountItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryCountItemScalarFieldEnum | InventoryCountItemScalarFieldEnum[]
  }

  /**
   * Employee.createdBillings
   */
  export type Employee$createdBillingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    where?: BillingsWhereInput
    orderBy?: BillingsOrderByWithRelationInput | BillingsOrderByWithRelationInput[]
    cursor?: BillingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingsScalarFieldEnum | BillingsScalarFieldEnum[]
  }

  /**
   * Employee.updatedBillings
   */
  export type Employee$updatedBillingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    where?: BillingsWhereInput
    orderBy?: BillingsOrderByWithRelationInput | BillingsOrderByWithRelationInput[]
    cursor?: BillingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingsScalarFieldEnum | BillingsScalarFieldEnum[]
  }

  /**
   * Employee.createdPayments
   */
  export type Employee$createdPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Employee.updatedPayments
   */
  export type Employee$updatedPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Employee.createdSchedules
   */
  export type Employee$createdSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Employee.updatedSchedules
   */
  export type Employee$updatedSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
    entityId: number | null
    userId: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: number | null
    entityId: number | null
    userId: number | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: number | null
    entityId: number | null
    entityType: string | null
    userId: number | null
    action: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: number | null
    entityId: number | null
    entityType: string | null
    userId: number | null
    action: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    entityId: number
    entityType: number
    userId: number
    action: number
    details: number
    createdAt: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
    entityId?: true
    userId?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
    entityId?: true
    userId?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    entityId?: true
    entityType?: true
    userId?: true
    action?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    entityId?: true
    entityType?: true
    userId?: true
    action?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    entityId?: true
    entityType?: true
    userId?: true
    action?: true
    details?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: number
    entityId: number | null
    entityType: string | null
    userId: number
    action: string
    details: JsonValue
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    entityType?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityId?: boolean
    entityType?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    entityId?: boolean
    entityType?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      entityId: number | null
      entityType: string | null
      userId: number
      action: string
      details: Prisma.JsonValue
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'Int'>
    readonly entityId: FieldRef<"AuditLog", 'Int'>
    readonly entityType: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'Int'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'Json'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: number | null
    employeeId: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: number | null
    employeeId: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    employeeId: number
    startTime: number
    endTime: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    id?: true
    employeeId?: true
    createdById?: true
    updatedById?: true
  }

  export type ScheduleSumAggregateInputType = {
    id?: true
    employeeId?: true
    createdById?: true
    updatedById?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    employeeId?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    employeeId?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    employeeId?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: number
    employeeId: number
    startTime: Date
    endTime: Date
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    employeeId?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type ScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employeeId: number
      startTime: Date
      endTime: Date
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schedules and returns the data saved in the database.
     * @param {ScheduleCreateManyAndReturnArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */ 
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'Int'>
    readonly employeeId: FieldRef<"Schedule", 'Int'>
    readonly startTime: FieldRef<"Schedule", 'DateTime'>
    readonly endTime: FieldRef<"Schedule", 'DateTime'>
    readonly createdAt: FieldRef<"Schedule", 'DateTime'>
    readonly updatedAt: FieldRef<"Schedule", 'DateTime'>
    readonly createdById: FieldRef<"Schedule", 'Int'>
    readonly updatedById: FieldRef<"Schedule", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule createManyAndReturn
   */
  export type ScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model Patients
   */

  export type AggregatePatients = {
    _count: PatientsCountAggregateOutputType | null
    _avg: PatientsAvgAggregateOutputType | null
    _sum: PatientsSumAggregateOutputType | null
    _min: PatientsMinAggregateOutputType | null
    _max: PatientsMaxAggregateOutputType | null
  }

  export type PatientsAvgAggregateOutputType = {
    id: number | null
    doctorId: number | null
    appointmentId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientsSumAggregateOutputType = {
    id: number | null
    doctorId: number | null
    appointmentId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientsMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    nationality: string | null
    maritalStatus: string | null
    dob: string | null
    gender: string | null
    source: string | null
    email: string | null
    countryCode: string | null
    phoneNumber: string | null
    address: string | null
    district: string | null
    emirate: string | null
    country: string | null
    visaType: string | null
    nationalID: string | null
    otherID: string | null
    emergencyContactNumber: string | null
    emergencyContactName: string | null
    emergencyContactRelationship: string | null
    allergies: string | null
    profilePicture: string | null
    createdAt: Date | null
    updatedAt: Date | null
    doctorId: number | null
    mrNumber: string | null
    appointmentId: number | null
    createdById: number | null
    updatedById: number | null
    deleted: boolean | null
    deletedAt: Date | null
  }

  export type PatientsMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    nationality: string | null
    maritalStatus: string | null
    dob: string | null
    gender: string | null
    source: string | null
    email: string | null
    countryCode: string | null
    phoneNumber: string | null
    address: string | null
    district: string | null
    emirate: string | null
    country: string | null
    visaType: string | null
    nationalID: string | null
    otherID: string | null
    emergencyContactNumber: string | null
    emergencyContactName: string | null
    emergencyContactRelationship: string | null
    allergies: string | null
    profilePicture: string | null
    createdAt: Date | null
    updatedAt: Date | null
    doctorId: number | null
    mrNumber: string | null
    appointmentId: number | null
    createdById: number | null
    updatedById: number | null
    deleted: boolean | null
    deletedAt: Date | null
  }

  export type PatientsCountAggregateOutputType = {
    id: number
    firstName: number
    middleName: number
    lastName: number
    nationality: number
    maritalStatus: number
    dob: number
    gender: number
    source: number
    email: number
    countryCode: number
    phoneNumber: number
    address: number
    district: number
    emirate: number
    country: number
    visaType: number
    nationalID: number
    otherID: number
    emergencyContactNumber: number
    emergencyContactName: number
    emergencyContactRelationship: number
    allergies: number
    profilePicture: number
    createdAt: number
    updatedAt: number
    doctorId: number
    mrNumber: number
    appointmentId: number
    createdById: number
    updatedById: number
    deleted: number
    deletedAt: number
    _all: number
  }


  export type PatientsAvgAggregateInputType = {
    id?: true
    doctorId?: true
    appointmentId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientsSumAggregateInputType = {
    id?: true
    doctorId?: true
    appointmentId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientsMinAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    nationality?: true
    maritalStatus?: true
    dob?: true
    gender?: true
    source?: true
    email?: true
    countryCode?: true
    phoneNumber?: true
    address?: true
    district?: true
    emirate?: true
    country?: true
    visaType?: true
    nationalID?: true
    otherID?: true
    emergencyContactNumber?: true
    emergencyContactName?: true
    emergencyContactRelationship?: true
    allergies?: true
    profilePicture?: true
    createdAt?: true
    updatedAt?: true
    doctorId?: true
    mrNumber?: true
    appointmentId?: true
    createdById?: true
    updatedById?: true
    deleted?: true
    deletedAt?: true
  }

  export type PatientsMaxAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    nationality?: true
    maritalStatus?: true
    dob?: true
    gender?: true
    source?: true
    email?: true
    countryCode?: true
    phoneNumber?: true
    address?: true
    district?: true
    emirate?: true
    country?: true
    visaType?: true
    nationalID?: true
    otherID?: true
    emergencyContactNumber?: true
    emergencyContactName?: true
    emergencyContactRelationship?: true
    allergies?: true
    profilePicture?: true
    createdAt?: true
    updatedAt?: true
    doctorId?: true
    mrNumber?: true
    appointmentId?: true
    createdById?: true
    updatedById?: true
    deleted?: true
    deletedAt?: true
  }

  export type PatientsCountAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    nationality?: true
    maritalStatus?: true
    dob?: true
    gender?: true
    source?: true
    email?: true
    countryCode?: true
    phoneNumber?: true
    address?: true
    district?: true
    emirate?: true
    country?: true
    visaType?: true
    nationalID?: true
    otherID?: true
    emergencyContactNumber?: true
    emergencyContactName?: true
    emergencyContactRelationship?: true
    allergies?: true
    profilePicture?: true
    createdAt?: true
    updatedAt?: true
    doctorId?: true
    mrNumber?: true
    appointmentId?: true
    createdById?: true
    updatedById?: true
    deleted?: true
    deletedAt?: true
    _all?: true
  }

  export type PatientsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to aggregate.
     */
    where?: PatientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientsOrderByWithRelationInput | PatientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientsMaxAggregateInputType
  }

  export type GetPatientsAggregateType<T extends PatientsAggregateArgs> = {
        [P in keyof T & keyof AggregatePatients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatients[P]>
      : GetScalarType<T[P], AggregatePatients[P]>
  }




  export type PatientsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientsWhereInput
    orderBy?: PatientsOrderByWithAggregationInput | PatientsOrderByWithAggregationInput[]
    by: PatientsScalarFieldEnum[] | PatientsScalarFieldEnum
    having?: PatientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientsCountAggregateInputType | true
    _avg?: PatientsAvgAggregateInputType
    _sum?: PatientsSumAggregateInputType
    _min?: PatientsMinAggregateInputType
    _max?: PatientsMaxAggregateInputType
  }

  export type PatientsGroupByOutputType = {
    id: number
    firstName: string
    middleName: string | null
    lastName: string
    nationality: string | null
    maritalStatus: string | null
    dob: string | null
    gender: string | null
    source: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address: string | null
    district: string | null
    emirate: string | null
    country: string | null
    visaType: string | null
    nationalID: string | null
    otherID: string | null
    emergencyContactNumber: string | null
    emergencyContactName: string | null
    emergencyContactRelationship: string | null
    allergies: string | null
    profilePicture: string | null
    createdAt: Date
    updatedAt: Date
    doctorId: number | null
    mrNumber: string
    appointmentId: number | null
    createdById: number
    updatedById: number
    deleted: boolean
    deletedAt: Date | null
    _count: PatientsCountAggregateOutputType | null
    _avg: PatientsAvgAggregateOutputType | null
    _sum: PatientsSumAggregateOutputType | null
    _min: PatientsMinAggregateOutputType | null
    _max: PatientsMaxAggregateOutputType | null
  }

  type GetPatientsGroupByPayload<T extends PatientsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientsGroupByOutputType[P]>
            : GetScalarType<T[P], PatientsGroupByOutputType[P]>
        }
      >
    >


  export type PatientsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    nationality?: boolean
    maritalStatus?: boolean
    dob?: boolean
    gender?: boolean
    source?: boolean
    email?: boolean
    countryCode?: boolean
    phoneNumber?: boolean
    address?: boolean
    district?: boolean
    emirate?: boolean
    country?: boolean
    visaType?: boolean
    nationalID?: boolean
    otherID?: boolean
    emergencyContactNumber?: boolean
    emergencyContactName?: boolean
    emergencyContactRelationship?: boolean
    allergies?: boolean
    profilePicture?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorId?: boolean
    mrNumber?: boolean
    appointmentId?: boolean
    createdById?: boolean
    updatedById?: boolean
    deleted?: boolean
    deletedAt?: boolean
    billings?: boolean | Patients$billingsArgs<ExtArgs>
    consultations?: boolean | Patients$consultationsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | PatientsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patients"]>

  export type PatientsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    nationality?: boolean
    maritalStatus?: boolean
    dob?: boolean
    gender?: boolean
    source?: boolean
    email?: boolean
    countryCode?: boolean
    phoneNumber?: boolean
    address?: boolean
    district?: boolean
    emirate?: boolean
    country?: boolean
    visaType?: boolean
    nationalID?: boolean
    otherID?: boolean
    emergencyContactNumber?: boolean
    emergencyContactName?: boolean
    emergencyContactRelationship?: boolean
    allergies?: boolean
    profilePicture?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorId?: boolean
    mrNumber?: boolean
    appointmentId?: boolean
    createdById?: boolean
    updatedById?: boolean
    deleted?: boolean
    deletedAt?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patients"]>

  export type PatientsSelectScalar = {
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    nationality?: boolean
    maritalStatus?: boolean
    dob?: boolean
    gender?: boolean
    source?: boolean
    email?: boolean
    countryCode?: boolean
    phoneNumber?: boolean
    address?: boolean
    district?: boolean
    emirate?: boolean
    country?: boolean
    visaType?: boolean
    nationalID?: boolean
    otherID?: boolean
    emergencyContactNumber?: boolean
    emergencyContactName?: boolean
    emergencyContactRelationship?: boolean
    allergies?: boolean
    profilePicture?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctorId?: boolean
    mrNumber?: boolean
    appointmentId?: boolean
    createdById?: boolean
    updatedById?: boolean
    deleted?: boolean
    deletedAt?: boolean
  }

  export type PatientsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billings?: boolean | Patients$billingsArgs<ExtArgs>
    consultations?: boolean | Patients$consultationsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | PatientsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PatientsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patients"
    objects: {
      billings: Prisma.$BillingsPayload<ExtArgs>[]
      consultations: Prisma.$ConsultationsPayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      middleName: string | null
      lastName: string
      nationality: string | null
      maritalStatus: string | null
      dob: string | null
      gender: string | null
      source: string | null
      email: string
      countryCode: string
      phoneNumber: string
      address: string | null
      district: string | null
      emirate: string | null
      country: string | null
      visaType: string | null
      nationalID: string | null
      otherID: string | null
      emergencyContactNumber: string | null
      emergencyContactName: string | null
      emergencyContactRelationship: string | null
      allergies: string | null
      profilePicture: string | null
      createdAt: Date
      updatedAt: Date
      doctorId: number | null
      mrNumber: string
      appointmentId: number | null
      createdById: number
      updatedById: number
      deleted: boolean
      deletedAt: Date | null
    }, ExtArgs["result"]["patients"]>
    composites: {}
  }

  type PatientsGetPayload<S extends boolean | null | undefined | PatientsDefaultArgs> = $Result.GetResult<Prisma.$PatientsPayload, S>

  type PatientsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientsCountAggregateInputType | true
    }

  export interface PatientsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patients'], meta: { name: 'Patients' } }
    /**
     * Find zero or one Patients that matches the filter.
     * @param {PatientsFindUniqueArgs} args - Arguments to find a Patients
     * @example
     * // Get one Patients
     * const patients = await prisma.patients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientsFindUniqueArgs>(args: SelectSubset<T, PatientsFindUniqueArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Patients that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientsFindUniqueOrThrowArgs} args - Arguments to find a Patients
     * @example
     * // Get one Patients
     * const patients = await prisma.patients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientsFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientsFindFirstArgs} args - Arguments to find a Patients
     * @example
     * // Get one Patients
     * const patients = await prisma.patients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientsFindFirstArgs>(args?: SelectSubset<T, PatientsFindFirstArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Patients that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientsFindFirstOrThrowArgs} args - Arguments to find a Patients
     * @example
     * // Get one Patients
     * const patients = await prisma.patients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientsFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patients.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientsWithIdOnly = await prisma.patients.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientsFindManyArgs>(args?: SelectSubset<T, PatientsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Patients.
     * @param {PatientsCreateArgs} args - Arguments to create a Patients.
     * @example
     * // Create one Patients
     * const Patients = await prisma.patients.create({
     *   data: {
     *     // ... data to create a Patients
     *   }
     * })
     * 
     */
    create<T extends PatientsCreateArgs>(args: SelectSubset<T, PatientsCreateArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Patients.
     * @param {PatientsCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patients = await prisma.patients.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientsCreateManyArgs>(args?: SelectSubset<T, PatientsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientsCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patients = await prisma.patients.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientsWithIdOnly = await prisma.patients.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientsCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Patients.
     * @param {PatientsDeleteArgs} args - Arguments to delete one Patients.
     * @example
     * // Delete one Patients
     * const Patients = await prisma.patients.delete({
     *   where: {
     *     // ... filter to delete one Patients
     *   }
     * })
     * 
     */
    delete<T extends PatientsDeleteArgs>(args: SelectSubset<T, PatientsDeleteArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Patients.
     * @param {PatientsUpdateArgs} args - Arguments to update one Patients.
     * @example
     * // Update one Patients
     * const patients = await prisma.patients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientsUpdateArgs>(args: SelectSubset<T, PatientsUpdateArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientsDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientsDeleteManyArgs>(args?: SelectSubset<T, PatientsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patients = await prisma.patients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientsUpdateManyArgs>(args: SelectSubset<T, PatientsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patients.
     * @param {PatientsUpsertArgs} args - Arguments to update or create a Patients.
     * @example
     * // Update or create a Patients
     * const patients = await prisma.patients.upsert({
     *   create: {
     *     // ... data to create a Patients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patients we want to update
     *   }
     * })
     */
    upsert<T extends PatientsUpsertArgs>(args: SelectSubset<T, PatientsUpsertArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientsCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patients.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientsCountArgs>(
      args?: Subset<T, PatientsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientsAggregateArgs>(args: Subset<T, PatientsAggregateArgs>): Prisma.PrismaPromise<GetPatientsAggregateType<T>>

    /**
     * Group by Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientsGroupByArgs['orderBy'] }
        : { orderBy?: PatientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patients model
   */
  readonly fields: PatientsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    billings<T extends Patients$billingsArgs<ExtArgs> = {}>(args?: Subset<T, Patients$billingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findMany"> | Null>
    consultations<T extends Patients$consultationsArgs<ExtArgs> = {}>(args?: Subset<T, Patients$consultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patients model
   */ 
  interface PatientsFieldRefs {
    readonly id: FieldRef<"Patients", 'Int'>
    readonly firstName: FieldRef<"Patients", 'String'>
    readonly middleName: FieldRef<"Patients", 'String'>
    readonly lastName: FieldRef<"Patients", 'String'>
    readonly nationality: FieldRef<"Patients", 'String'>
    readonly maritalStatus: FieldRef<"Patients", 'String'>
    readonly dob: FieldRef<"Patients", 'String'>
    readonly gender: FieldRef<"Patients", 'String'>
    readonly source: FieldRef<"Patients", 'String'>
    readonly email: FieldRef<"Patients", 'String'>
    readonly countryCode: FieldRef<"Patients", 'String'>
    readonly phoneNumber: FieldRef<"Patients", 'String'>
    readonly address: FieldRef<"Patients", 'String'>
    readonly district: FieldRef<"Patients", 'String'>
    readonly emirate: FieldRef<"Patients", 'String'>
    readonly country: FieldRef<"Patients", 'String'>
    readonly visaType: FieldRef<"Patients", 'String'>
    readonly nationalID: FieldRef<"Patients", 'String'>
    readonly otherID: FieldRef<"Patients", 'String'>
    readonly emergencyContactNumber: FieldRef<"Patients", 'String'>
    readonly emergencyContactName: FieldRef<"Patients", 'String'>
    readonly emergencyContactRelationship: FieldRef<"Patients", 'String'>
    readonly allergies: FieldRef<"Patients", 'String'>
    readonly profilePicture: FieldRef<"Patients", 'String'>
    readonly createdAt: FieldRef<"Patients", 'DateTime'>
    readonly updatedAt: FieldRef<"Patients", 'DateTime'>
    readonly doctorId: FieldRef<"Patients", 'Int'>
    readonly mrNumber: FieldRef<"Patients", 'String'>
    readonly appointmentId: FieldRef<"Patients", 'Int'>
    readonly createdById: FieldRef<"Patients", 'Int'>
    readonly updatedById: FieldRef<"Patients", 'Int'>
    readonly deleted: FieldRef<"Patients", 'Boolean'>
    readonly deletedAt: FieldRef<"Patients", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patients findUnique
   */
  export type PatientsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where: PatientsWhereUniqueInput
  }

  /**
   * Patients findUniqueOrThrow
   */
  export type PatientsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where: PatientsWhereUniqueInput
  }

  /**
   * Patients findFirst
   */
  export type PatientsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientsOrderByWithRelationInput | PatientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientsScalarFieldEnum | PatientsScalarFieldEnum[]
  }

  /**
   * Patients findFirstOrThrow
   */
  export type PatientsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientsOrderByWithRelationInput | PatientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientsScalarFieldEnum | PatientsScalarFieldEnum[]
  }

  /**
   * Patients findMany
   */
  export type PatientsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientsOrderByWithRelationInput | PatientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientsScalarFieldEnum | PatientsScalarFieldEnum[]
  }

  /**
   * Patients create
   */
  export type PatientsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    /**
     * The data needed to create a Patients.
     */
    data: XOR<PatientsCreateInput, PatientsUncheckedCreateInput>
  }

  /**
   * Patients createMany
   */
  export type PatientsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientsCreateManyInput | PatientsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patients createManyAndReturn
   */
  export type PatientsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientsCreateManyInput | PatientsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patients update
   */
  export type PatientsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    /**
     * The data needed to update a Patients.
     */
    data: XOR<PatientsUpdateInput, PatientsUncheckedUpdateInput>
    /**
     * Choose, which Patients to update.
     */
    where: PatientsWhereUniqueInput
  }

  /**
   * Patients updateMany
   */
  export type PatientsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientsUpdateManyMutationInput, PatientsUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientsWhereInput
  }

  /**
   * Patients upsert
   */
  export type PatientsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    /**
     * The filter to search for the Patients to update in case it exists.
     */
    where: PatientsWhereUniqueInput
    /**
     * In case the Patients found by the `where` argument doesn't exist, create a new Patients with this data.
     */
    create: XOR<PatientsCreateInput, PatientsUncheckedCreateInput>
    /**
     * In case the Patients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientsUpdateInput, PatientsUncheckedUpdateInput>
  }

  /**
   * Patients delete
   */
  export type PatientsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    /**
     * Filter which Patients to delete.
     */
    where: PatientsWhereUniqueInput
  }

  /**
   * Patients deleteMany
   */
  export type PatientsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientsWhereInput
  }

  /**
   * Patients.billings
   */
  export type Patients$billingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    where?: BillingsWhereInput
    orderBy?: BillingsOrderByWithRelationInput | BillingsOrderByWithRelationInput[]
    cursor?: BillingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingsScalarFieldEnum | BillingsScalarFieldEnum[]
  }

  /**
   * Patients.consultations
   */
  export type Patients$consultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    where?: ConsultationsWhereInput
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    cursor?: ConsultationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationsScalarFieldEnum | ConsultationsScalarFieldEnum[]
  }

  /**
   * Patients without action
   */
  export type PatientsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
  }


  /**
   * Model Consultations
   */

  export type AggregateConsultations = {
    _count: ConsultationsCountAggregateOutputType | null
    _avg: ConsultationsAvgAggregateOutputType | null
    _sum: ConsultationsSumAggregateOutputType | null
    _min: ConsultationsMinAggregateOutputType | null
    _max: ConsultationsMaxAggregateOutputType | null
  }

  export type ConsultationsAvgAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    doctorId: number | null
    patientId: number | null
    triageId: number | null
    patientAssessmentId: number | null
    patientTriageId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type ConsultationsSumAggregateOutputType = {
    id: number | null
    appointmentId: number | null
    doctorId: number | null
    patientId: number | null
    triageId: number | null
    patientAssessmentId: number | null
    patientTriageId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type ConsultationsMinAggregateOutputType = {
    id: number | null
    status: string | null
    appointmentId: number | null
    doctorId: number | null
    patientId: number | null
    triageId: number | null
    patientAssessmentId: number | null
    patientTriageId: number | null
    createdById: number | null
    updatedById: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ConsultationsMaxAggregateOutputType = {
    id: number | null
    status: string | null
    appointmentId: number | null
    doctorId: number | null
    patientId: number | null
    triageId: number | null
    patientAssessmentId: number | null
    patientTriageId: number | null
    createdById: number | null
    updatedById: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ConsultationsCountAggregateOutputType = {
    id: number
    status: number
    appointmentId: number
    doctorId: number
    patientId: number
    triageId: number
    patientAssessmentId: number
    patientTriageId: number
    createdById: number
    updatedById: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ConsultationsAvgAggregateInputType = {
    id?: true
    appointmentId?: true
    doctorId?: true
    patientId?: true
    triageId?: true
    patientAssessmentId?: true
    patientTriageId?: true
    createdById?: true
    updatedById?: true
  }

  export type ConsultationsSumAggregateInputType = {
    id?: true
    appointmentId?: true
    doctorId?: true
    patientId?: true
    triageId?: true
    patientAssessmentId?: true
    patientTriageId?: true
    createdById?: true
    updatedById?: true
  }

  export type ConsultationsMinAggregateInputType = {
    id?: true
    status?: true
    appointmentId?: true
    doctorId?: true
    patientId?: true
    triageId?: true
    patientAssessmentId?: true
    patientTriageId?: true
    createdById?: true
    updatedById?: true
    created_at?: true
    updated_at?: true
  }

  export type ConsultationsMaxAggregateInputType = {
    id?: true
    status?: true
    appointmentId?: true
    doctorId?: true
    patientId?: true
    triageId?: true
    patientAssessmentId?: true
    patientTriageId?: true
    createdById?: true
    updatedById?: true
    created_at?: true
    updated_at?: true
  }

  export type ConsultationsCountAggregateInputType = {
    id?: true
    status?: true
    appointmentId?: true
    doctorId?: true
    patientId?: true
    triageId?: true
    patientAssessmentId?: true
    patientTriageId?: true
    createdById?: true
    updatedById?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ConsultationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultations to aggregate.
     */
    where?: ConsultationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsultationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consultations
    **/
    _count?: true | ConsultationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsultationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsultationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsultationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsultationsMaxAggregateInputType
  }

  export type GetConsultationsAggregateType<T extends ConsultationsAggregateArgs> = {
        [P in keyof T & keyof AggregateConsultations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsultations[P]>
      : GetScalarType<T[P], AggregateConsultations[P]>
  }




  export type ConsultationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultationsWhereInput
    orderBy?: ConsultationsOrderByWithAggregationInput | ConsultationsOrderByWithAggregationInput[]
    by: ConsultationsScalarFieldEnum[] | ConsultationsScalarFieldEnum
    having?: ConsultationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsultationsCountAggregateInputType | true
    _avg?: ConsultationsAvgAggregateInputType
    _sum?: ConsultationsSumAggregateInputType
    _min?: ConsultationsMinAggregateInputType
    _max?: ConsultationsMaxAggregateInputType
  }

  export type ConsultationsGroupByOutputType = {
    id: number
    status: string
    appointmentId: number | null
    doctorId: number
    patientId: number | null
    triageId: number | null
    patientAssessmentId: number | null
    patientTriageId: number | null
    createdById: number
    updatedById: number
    created_at: Date
    updated_at: Date
    _count: ConsultationsCountAggregateOutputType | null
    _avg: ConsultationsAvgAggregateOutputType | null
    _sum: ConsultationsSumAggregateOutputType | null
    _min: ConsultationsMinAggregateOutputType | null
    _max: ConsultationsMaxAggregateOutputType | null
  }

  type GetConsultationsGroupByPayload<T extends ConsultationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsultationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsultationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsultationsGroupByOutputType[P]>
            : GetScalarType<T[P], ConsultationsGroupByOutputType[P]>
        }
      >
    >


  export type ConsultationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    appointmentId?: boolean
    doctorId?: boolean
    patientId?: boolean
    triageId?: boolean
    patientAssessmentId?: boolean
    patientTriageId?: boolean
    createdById?: boolean
    updatedById?: boolean
    created_at?: boolean
    updated_at?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | EmployeeDefaultArgs<ExtArgs>
    patient?: boolean | Consultations$patientArgs<ExtArgs>
    patientAssessment?: boolean | Consultations$patientAssessmentArgs<ExtArgs>
    patientTriage?: boolean | Consultations$patientTriageArgs<ExtArgs>
    billings?: boolean | Consultations$billingsArgs<ExtArgs>
    _count?: boolean | ConsultationsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consultations"]>

  export type ConsultationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    appointmentId?: boolean
    doctorId?: boolean
    patientId?: boolean
    triageId?: boolean
    patientAssessmentId?: boolean
    patientTriageId?: boolean
    createdById?: boolean
    updatedById?: boolean
    created_at?: boolean
    updated_at?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | EmployeeDefaultArgs<ExtArgs>
    patient?: boolean | Consultations$patientArgs<ExtArgs>
    patientAssessment?: boolean | Consultations$patientAssessmentArgs<ExtArgs>
    patientTriage?: boolean | Consultations$patientTriageArgs<ExtArgs>
  }, ExtArgs["result"]["consultations"]>

  export type ConsultationsSelectScalar = {
    id?: boolean
    status?: boolean
    appointmentId?: boolean
    doctorId?: boolean
    patientId?: boolean
    triageId?: boolean
    patientAssessmentId?: boolean
    patientTriageId?: boolean
    createdById?: boolean
    updatedById?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ConsultationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | EmployeeDefaultArgs<ExtArgs>
    patient?: boolean | Consultations$patientArgs<ExtArgs>
    patientAssessment?: boolean | Consultations$patientAssessmentArgs<ExtArgs>
    patientTriage?: boolean | Consultations$patientTriageArgs<ExtArgs>
    billings?: boolean | Consultations$billingsArgs<ExtArgs>
    _count?: boolean | ConsultationsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConsultationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    doctor?: boolean | EmployeeDefaultArgs<ExtArgs>
    patient?: boolean | Consultations$patientArgs<ExtArgs>
    patientAssessment?: boolean | Consultations$patientAssessmentArgs<ExtArgs>
    patientTriage?: boolean | Consultations$patientTriageArgs<ExtArgs>
  }

  export type $ConsultationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consultations"
    objects: {
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
      doctor: Prisma.$EmployeePayload<ExtArgs>
      patient: Prisma.$PatientsPayload<ExtArgs> | null
      patientAssessment: Prisma.$PatientAssessmentPayload<ExtArgs> | null
      patientTriage: Prisma.$PatientTriagePayload<ExtArgs> | null
      billings: Prisma.$BillingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: string
      appointmentId: number | null
      doctorId: number
      patientId: number | null
      triageId: number | null
      patientAssessmentId: number | null
      patientTriageId: number | null
      createdById: number
      updatedById: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["consultations"]>
    composites: {}
  }

  type ConsultationsGetPayload<S extends boolean | null | undefined | ConsultationsDefaultArgs> = $Result.GetResult<Prisma.$ConsultationsPayload, S>

  type ConsultationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConsultationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsultationsCountAggregateInputType | true
    }

  export interface ConsultationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consultations'], meta: { name: 'Consultations' } }
    /**
     * Find zero or one Consultations that matches the filter.
     * @param {ConsultationsFindUniqueArgs} args - Arguments to find a Consultations
     * @example
     * // Get one Consultations
     * const consultations = await prisma.consultations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsultationsFindUniqueArgs>(args: SelectSubset<T, ConsultationsFindUniqueArgs<ExtArgs>>): Prisma__ConsultationsClient<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Consultations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ConsultationsFindUniqueOrThrowArgs} args - Arguments to find a Consultations
     * @example
     * // Get one Consultations
     * const consultations = await prisma.consultations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsultationsFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsultationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsultationsClient<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Consultations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationsFindFirstArgs} args - Arguments to find a Consultations
     * @example
     * // Get one Consultations
     * const consultations = await prisma.consultations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsultationsFindFirstArgs>(args?: SelectSubset<T, ConsultationsFindFirstArgs<ExtArgs>>): Prisma__ConsultationsClient<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Consultations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationsFindFirstOrThrowArgs} args - Arguments to find a Consultations
     * @example
     * // Get one Consultations
     * const consultations = await prisma.consultations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsultationsFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsultationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsultationsClient<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Consultations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consultations
     * const consultations = await prisma.consultations.findMany()
     * 
     * // Get first 10 Consultations
     * const consultations = await prisma.consultations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consultationsWithIdOnly = await prisma.consultations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsultationsFindManyArgs>(args?: SelectSubset<T, ConsultationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Consultations.
     * @param {ConsultationsCreateArgs} args - Arguments to create a Consultations.
     * @example
     * // Create one Consultations
     * const Consultations = await prisma.consultations.create({
     *   data: {
     *     // ... data to create a Consultations
     *   }
     * })
     * 
     */
    create<T extends ConsultationsCreateArgs>(args: SelectSubset<T, ConsultationsCreateArgs<ExtArgs>>): Prisma__ConsultationsClient<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Consultations.
     * @param {ConsultationsCreateManyArgs} args - Arguments to create many Consultations.
     * @example
     * // Create many Consultations
     * const consultations = await prisma.consultations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsultationsCreateManyArgs>(args?: SelectSubset<T, ConsultationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consultations and returns the data saved in the database.
     * @param {ConsultationsCreateManyAndReturnArgs} args - Arguments to create many Consultations.
     * @example
     * // Create many Consultations
     * const consultations = await prisma.consultations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consultations and only return the `id`
     * const consultationsWithIdOnly = await prisma.consultations.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsultationsCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsultationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Consultations.
     * @param {ConsultationsDeleteArgs} args - Arguments to delete one Consultations.
     * @example
     * // Delete one Consultations
     * const Consultations = await prisma.consultations.delete({
     *   where: {
     *     // ... filter to delete one Consultations
     *   }
     * })
     * 
     */
    delete<T extends ConsultationsDeleteArgs>(args: SelectSubset<T, ConsultationsDeleteArgs<ExtArgs>>): Prisma__ConsultationsClient<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Consultations.
     * @param {ConsultationsUpdateArgs} args - Arguments to update one Consultations.
     * @example
     * // Update one Consultations
     * const consultations = await prisma.consultations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsultationsUpdateArgs>(args: SelectSubset<T, ConsultationsUpdateArgs<ExtArgs>>): Prisma__ConsultationsClient<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Consultations.
     * @param {ConsultationsDeleteManyArgs} args - Arguments to filter Consultations to delete.
     * @example
     * // Delete a few Consultations
     * const { count } = await prisma.consultations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsultationsDeleteManyArgs>(args?: SelectSubset<T, ConsultationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consultations
     * const consultations = await prisma.consultations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsultationsUpdateManyArgs>(args: SelectSubset<T, ConsultationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Consultations.
     * @param {ConsultationsUpsertArgs} args - Arguments to update or create a Consultations.
     * @example
     * // Update or create a Consultations
     * const consultations = await prisma.consultations.upsert({
     *   create: {
     *     // ... data to create a Consultations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consultations we want to update
     *   }
     * })
     */
    upsert<T extends ConsultationsUpsertArgs>(args: SelectSubset<T, ConsultationsUpsertArgs<ExtArgs>>): Prisma__ConsultationsClient<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Consultations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationsCountArgs} args - Arguments to filter Consultations to count.
     * @example
     * // Count the number of Consultations
     * const count = await prisma.consultations.count({
     *   where: {
     *     // ... the filter for the Consultations we want to count
     *   }
     * })
    **/
    count<T extends ConsultationsCountArgs>(
      args?: Subset<T, ConsultationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consultations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultationsAggregateArgs>(args: Subset<T, ConsultationsAggregateArgs>): Prisma.PrismaPromise<GetConsultationsAggregateType<T>>

    /**
     * Group by Consultations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsultationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsultationsGroupByArgs['orderBy'] }
        : { orderBy?: ConsultationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsultationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsultationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consultations model
   */
  readonly fields: ConsultationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consultations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsultationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    doctor<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patient<T extends Consultations$patientArgs<ExtArgs> = {}>(args?: Subset<T, Consultations$patientArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patientAssessment<T extends Consultations$patientAssessmentArgs<ExtArgs> = {}>(args?: Subset<T, Consultations$patientAssessmentArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patientTriage<T extends Consultations$patientTriageArgs<ExtArgs> = {}>(args?: Subset<T, Consultations$patientTriageArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    billings<T extends Consultations$billingsArgs<ExtArgs> = {}>(args?: Subset<T, Consultations$billingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consultations model
   */ 
  interface ConsultationsFieldRefs {
    readonly id: FieldRef<"Consultations", 'Int'>
    readonly status: FieldRef<"Consultations", 'String'>
    readonly appointmentId: FieldRef<"Consultations", 'Int'>
    readonly doctorId: FieldRef<"Consultations", 'Int'>
    readonly patientId: FieldRef<"Consultations", 'Int'>
    readonly triageId: FieldRef<"Consultations", 'Int'>
    readonly patientAssessmentId: FieldRef<"Consultations", 'Int'>
    readonly patientTriageId: FieldRef<"Consultations", 'Int'>
    readonly createdById: FieldRef<"Consultations", 'Int'>
    readonly updatedById: FieldRef<"Consultations", 'Int'>
    readonly created_at: FieldRef<"Consultations", 'DateTime'>
    readonly updated_at: FieldRef<"Consultations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Consultations findUnique
   */
  export type ConsultationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    /**
     * Filter, which Consultations to fetch.
     */
    where: ConsultationsWhereUniqueInput
  }

  /**
   * Consultations findUniqueOrThrow
   */
  export type ConsultationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    /**
     * Filter, which Consultations to fetch.
     */
    where: ConsultationsWhereUniqueInput
  }

  /**
   * Consultations findFirst
   */
  export type ConsultationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    /**
     * Filter, which Consultations to fetch.
     */
    where?: ConsultationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultations.
     */
    cursor?: ConsultationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultations.
     */
    distinct?: ConsultationsScalarFieldEnum | ConsultationsScalarFieldEnum[]
  }

  /**
   * Consultations findFirstOrThrow
   */
  export type ConsultationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    /**
     * Filter, which Consultations to fetch.
     */
    where?: ConsultationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultations.
     */
    cursor?: ConsultationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultations.
     */
    distinct?: ConsultationsScalarFieldEnum | ConsultationsScalarFieldEnum[]
  }

  /**
   * Consultations findMany
   */
  export type ConsultationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    /**
     * Filter, which Consultations to fetch.
     */
    where?: ConsultationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultations to fetch.
     */
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consultations.
     */
    cursor?: ConsultationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultations.
     */
    skip?: number
    distinct?: ConsultationsScalarFieldEnum | ConsultationsScalarFieldEnum[]
  }

  /**
   * Consultations create
   */
  export type ConsultationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    /**
     * The data needed to create a Consultations.
     */
    data: XOR<ConsultationsCreateInput, ConsultationsUncheckedCreateInput>
  }

  /**
   * Consultations createMany
   */
  export type ConsultationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consultations.
     */
    data: ConsultationsCreateManyInput | ConsultationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consultations createManyAndReturn
   */
  export type ConsultationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Consultations.
     */
    data: ConsultationsCreateManyInput | ConsultationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Consultations update
   */
  export type ConsultationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    /**
     * The data needed to update a Consultations.
     */
    data: XOR<ConsultationsUpdateInput, ConsultationsUncheckedUpdateInput>
    /**
     * Choose, which Consultations to update.
     */
    where: ConsultationsWhereUniqueInput
  }

  /**
   * Consultations updateMany
   */
  export type ConsultationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consultations.
     */
    data: XOR<ConsultationsUpdateManyMutationInput, ConsultationsUncheckedUpdateManyInput>
    /**
     * Filter which Consultations to update
     */
    where?: ConsultationsWhereInput
  }

  /**
   * Consultations upsert
   */
  export type ConsultationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    /**
     * The filter to search for the Consultations to update in case it exists.
     */
    where: ConsultationsWhereUniqueInput
    /**
     * In case the Consultations found by the `where` argument doesn't exist, create a new Consultations with this data.
     */
    create: XOR<ConsultationsCreateInput, ConsultationsUncheckedCreateInput>
    /**
     * In case the Consultations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsultationsUpdateInput, ConsultationsUncheckedUpdateInput>
  }

  /**
   * Consultations delete
   */
  export type ConsultationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    /**
     * Filter which Consultations to delete.
     */
    where: ConsultationsWhereUniqueInput
  }

  /**
   * Consultations deleteMany
   */
  export type ConsultationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultations to delete
     */
    where?: ConsultationsWhereInput
  }

  /**
   * Consultations.patient
   */
  export type Consultations$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    where?: PatientsWhereInput
  }

  /**
   * Consultations.patientAssessment
   */
  export type Consultations$patientAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    where?: PatientAssessmentWhereInput
  }

  /**
   * Consultations.patientTriage
   */
  export type Consultations$patientTriageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    where?: PatientTriageWhereInput
  }

  /**
   * Consultations.billings
   */
  export type Consultations$billingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    where?: BillingsWhereInput
    orderBy?: BillingsOrderByWithRelationInput | BillingsOrderByWithRelationInput[]
    cursor?: BillingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingsScalarFieldEnum | BillingsScalarFieldEnum[]
  }

  /**
   * Consultations without action
   */
  export type ConsultationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
  }


  /**
   * Model Appointments
   */

  export type AggregateAppointments = {
    _count: AppointmentsCountAggregateOutputType | null
    _avg: AppointmentsAvgAggregateOutputType | null
    _sum: AppointmentsSumAggregateOutputType | null
    _min: AppointmentsMinAggregateOutputType | null
    _max: AppointmentsMaxAggregateOutputType | null
  }

  export type AppointmentsAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type AppointmentsSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type AppointmentsMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    date: Date | null
    notes: string | null
    email: string | null
    endTime: string | null
    firstName: string | null
    lastName: string | null
    countryCode: string | null
    phoneNumber: string | null
    startTime: string | null
    created_at: Date | null
    updated_at: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type AppointmentsMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    date: Date | null
    notes: string | null
    email: string | null
    endTime: string | null
    firstName: string | null
    lastName: string | null
    countryCode: string | null
    phoneNumber: string | null
    startTime: string | null
    created_at: Date | null
    updated_at: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type AppointmentsCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    date: number
    notes: number
    email: number
    endTime: number
    firstName: number
    lastName: number
    countryCode: number
    phoneNumber: number
    startTime: number
    created_at: number
    updated_at: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type AppointmentsAvgAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    createdById?: true
    updatedById?: true
  }

  export type AppointmentsSumAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    createdById?: true
    updatedById?: true
  }

  export type AppointmentsMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    date?: true
    notes?: true
    email?: true
    endTime?: true
    firstName?: true
    lastName?: true
    countryCode?: true
    phoneNumber?: true
    startTime?: true
    created_at?: true
    updated_at?: true
    createdById?: true
    updatedById?: true
  }

  export type AppointmentsMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    date?: true
    notes?: true
    email?: true
    endTime?: true
    firstName?: true
    lastName?: true
    countryCode?: true
    phoneNumber?: true
    startTime?: true
    created_at?: true
    updated_at?: true
    createdById?: true
    updatedById?: true
  }

  export type AppointmentsCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    date?: true
    notes?: true
    email?: true
    endTime?: true
    firstName?: true
    lastName?: true
    countryCode?: true
    phoneNumber?: true
    startTime?: true
    created_at?: true
    updated_at?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type AppointmentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to aggregate.
     */
    where?: AppointmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentsOrderByWithRelationInput | AppointmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentsMaxAggregateInputType
  }

  export type GetAppointmentsAggregateType<T extends AppointmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointments[P]>
      : GetScalarType<T[P], AggregateAppointments[P]>
  }




  export type AppointmentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentsWhereInput
    orderBy?: AppointmentsOrderByWithAggregationInput | AppointmentsOrderByWithAggregationInput[]
    by: AppointmentsScalarFieldEnum[] | AppointmentsScalarFieldEnum
    having?: AppointmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentsCountAggregateInputType | true
    _avg?: AppointmentsAvgAggregateInputType
    _sum?: AppointmentsSumAggregateInputType
    _min?: AppointmentsMinAggregateInputType
    _max?: AppointmentsMaxAggregateInputType
  }

  export type AppointmentsGroupByOutputType = {
    id: number
    patientId: number
    doctorId: number
    date: Date
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at: Date
    updated_at: Date
    createdById: number
    updatedById: number
    _count: AppointmentsCountAggregateOutputType | null
    _avg: AppointmentsAvgAggregateOutputType | null
    _sum: AppointmentsSumAggregateOutputType | null
    _min: AppointmentsMinAggregateOutputType | null
    _max: AppointmentsMaxAggregateOutputType | null
  }

  type GetAppointmentsGroupByPayload<T extends AppointmentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentsGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentsGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    date?: boolean
    notes?: boolean
    email?: boolean
    endTime?: boolean
    firstName?: boolean
    lastName?: boolean
    countryCode?: boolean
    phoneNumber?: boolean
    startTime?: boolean
    created_at?: boolean
    updated_at?: boolean
    createdById?: boolean
    updatedById?: boolean
    doctor?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointments"]>

  export type AppointmentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    date?: boolean
    notes?: boolean
    email?: boolean
    endTime?: boolean
    firstName?: boolean
    lastName?: boolean
    countryCode?: boolean
    phoneNumber?: boolean
    startTime?: boolean
    created_at?: boolean
    updated_at?: boolean
    createdById?: boolean
    updatedById?: boolean
    doctor?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointments"]>

  export type AppointmentsSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    date?: boolean
    notes?: boolean
    email?: boolean
    endTime?: boolean
    firstName?: boolean
    lastName?: boolean
    countryCode?: boolean
    phoneNumber?: boolean
    startTime?: boolean
    created_at?: boolean
    updated_at?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type AppointmentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type AppointmentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $AppointmentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointments"
    objects: {
      doctor: Prisma.$EmployeePayload<ExtArgs>
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientId: number
      doctorId: number
      date: Date
      notes: string
      email: string
      endTime: string
      firstName: string
      lastName: string
      countryCode: string
      phoneNumber: string
      startTime: string
      created_at: Date
      updated_at: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["appointments"]>
    composites: {}
  }

  type AppointmentsGetPayload<S extends boolean | null | undefined | AppointmentsDefaultArgs> = $Result.GetResult<Prisma.$AppointmentsPayload, S>

  type AppointmentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AppointmentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AppointmentsCountAggregateInputType | true
    }

  export interface AppointmentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointments'], meta: { name: 'Appointments' } }
    /**
     * Find zero or one Appointments that matches the filter.
     * @param {AppointmentsFindUniqueArgs} args - Arguments to find a Appointments
     * @example
     * // Get one Appointments
     * const appointments = await prisma.appointments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentsFindUniqueArgs>(args: SelectSubset<T, AppointmentsFindUniqueArgs<ExtArgs>>): Prisma__AppointmentsClient<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Appointments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AppointmentsFindUniqueOrThrowArgs} args - Arguments to find a Appointments
     * @example
     * // Get one Appointments
     * const appointments = await prisma.appointments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentsFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentsClient<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsFindFirstArgs} args - Arguments to find a Appointments
     * @example
     * // Get one Appointments
     * const appointments = await prisma.appointments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentsFindFirstArgs>(args?: SelectSubset<T, AppointmentsFindFirstArgs<ExtArgs>>): Prisma__AppointmentsClient<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Appointments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsFindFirstOrThrowArgs} args - Arguments to find a Appointments
     * @example
     * // Get one Appointments
     * const appointments = await prisma.appointments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentsFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentsClient<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointments.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentsWithIdOnly = await prisma.appointments.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentsFindManyArgs>(args?: SelectSubset<T, AppointmentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Appointments.
     * @param {AppointmentsCreateArgs} args - Arguments to create a Appointments.
     * @example
     * // Create one Appointments
     * const Appointments = await prisma.appointments.create({
     *   data: {
     *     // ... data to create a Appointments
     *   }
     * })
     * 
     */
    create<T extends AppointmentsCreateArgs>(args: SelectSubset<T, AppointmentsCreateArgs<ExtArgs>>): Prisma__AppointmentsClient<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Appointments.
     * @param {AppointmentsCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointments = await prisma.appointments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentsCreateManyArgs>(args?: SelectSubset<T, AppointmentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentsCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointments = await prisma.appointments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentsWithIdOnly = await prisma.appointments.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentsCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Appointments.
     * @param {AppointmentsDeleteArgs} args - Arguments to delete one Appointments.
     * @example
     * // Delete one Appointments
     * const Appointments = await prisma.appointments.delete({
     *   where: {
     *     // ... filter to delete one Appointments
     *   }
     * })
     * 
     */
    delete<T extends AppointmentsDeleteArgs>(args: SelectSubset<T, AppointmentsDeleteArgs<ExtArgs>>): Prisma__AppointmentsClient<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Appointments.
     * @param {AppointmentsUpdateArgs} args - Arguments to update one Appointments.
     * @example
     * // Update one Appointments
     * const appointments = await prisma.appointments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentsUpdateArgs>(args: SelectSubset<T, AppointmentsUpdateArgs<ExtArgs>>): Prisma__AppointmentsClient<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentsDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentsDeleteManyArgs>(args?: SelectSubset<T, AppointmentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointments = await prisma.appointments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentsUpdateManyArgs>(args: SelectSubset<T, AppointmentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointments.
     * @param {AppointmentsUpsertArgs} args - Arguments to update or create a Appointments.
     * @example
     * // Update or create a Appointments
     * const appointments = await prisma.appointments.upsert({
     *   create: {
     *     // ... data to create a Appointments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointments we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentsUpsertArgs>(args: SelectSubset<T, AppointmentsUpsertArgs<ExtArgs>>): Prisma__AppointmentsClient<$Result.GetResult<Prisma.$AppointmentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointments.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentsCountArgs>(
      args?: Subset<T, AppointmentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentsAggregateArgs>(args: Subset<T, AppointmentsAggregateArgs>): Prisma.PrismaPromise<GetAppointmentsAggregateType<T>>

    /**
     * Group by Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentsGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointments model
   */
  readonly fields: AppointmentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointments model
   */ 
  interface AppointmentsFieldRefs {
    readonly id: FieldRef<"Appointments", 'Int'>
    readonly patientId: FieldRef<"Appointments", 'Int'>
    readonly doctorId: FieldRef<"Appointments", 'Int'>
    readonly date: FieldRef<"Appointments", 'DateTime'>
    readonly notes: FieldRef<"Appointments", 'String'>
    readonly email: FieldRef<"Appointments", 'String'>
    readonly endTime: FieldRef<"Appointments", 'String'>
    readonly firstName: FieldRef<"Appointments", 'String'>
    readonly lastName: FieldRef<"Appointments", 'String'>
    readonly countryCode: FieldRef<"Appointments", 'String'>
    readonly phoneNumber: FieldRef<"Appointments", 'String'>
    readonly startTime: FieldRef<"Appointments", 'String'>
    readonly created_at: FieldRef<"Appointments", 'DateTime'>
    readonly updated_at: FieldRef<"Appointments", 'DateTime'>
    readonly createdById: FieldRef<"Appointments", 'Int'>
    readonly updatedById: FieldRef<"Appointments", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Appointments findUnique
   */
  export type AppointmentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where: AppointmentsWhereUniqueInput
  }

  /**
   * Appointments findUniqueOrThrow
   */
  export type AppointmentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where: AppointmentsWhereUniqueInput
  }

  /**
   * Appointments findFirst
   */
  export type AppointmentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentsOrderByWithRelationInput | AppointmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentsScalarFieldEnum | AppointmentsScalarFieldEnum[]
  }

  /**
   * Appointments findFirstOrThrow
   */
  export type AppointmentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentsOrderByWithRelationInput | AppointmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentsScalarFieldEnum | AppointmentsScalarFieldEnum[]
  }

  /**
   * Appointments findMany
   */
  export type AppointmentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentsOrderByWithRelationInput | AppointmentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentsScalarFieldEnum | AppointmentsScalarFieldEnum[]
  }

  /**
   * Appointments create
   */
  export type AppointmentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointments.
     */
    data: XOR<AppointmentsCreateInput, AppointmentsUncheckedCreateInput>
  }

  /**
   * Appointments createMany
   */
  export type AppointmentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentsCreateManyInput | AppointmentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointments createManyAndReturn
   */
  export type AppointmentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentsCreateManyInput | AppointmentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointments update
   */
  export type AppointmentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointments.
     */
    data: XOR<AppointmentsUpdateInput, AppointmentsUncheckedUpdateInput>
    /**
     * Choose, which Appointments to update.
     */
    where: AppointmentsWhereUniqueInput
  }

  /**
   * Appointments updateMany
   */
  export type AppointmentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentsUpdateManyMutationInput, AppointmentsUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentsWhereInput
  }

  /**
   * Appointments upsert
   */
  export type AppointmentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointments to update in case it exists.
     */
    where: AppointmentsWhereUniqueInput
    /**
     * In case the Appointments found by the `where` argument doesn't exist, create a new Appointments with this data.
     */
    create: XOR<AppointmentsCreateInput, AppointmentsUncheckedCreateInput>
    /**
     * In case the Appointments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentsUpdateInput, AppointmentsUncheckedUpdateInput>
  }

  /**
   * Appointments delete
   */
  export type AppointmentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
    /**
     * Filter which Appointments to delete.
     */
    where: AppointmentsWhereUniqueInput
  }

  /**
   * Appointments deleteMany
   */
  export type AppointmentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentsWhereInput
  }

  /**
   * Appointments without action
   */
  export type AppointmentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointments
     */
    select?: AppointmentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentsInclude<ExtArgs> | null
  }


  /**
   * Model Doctors
   */

  export type AggregateDoctors = {
    _count: DoctorsCountAggregateOutputType | null
    _avg: DoctorsAvgAggregateOutputType | null
    _sum: DoctorsSumAggregateOutputType | null
    _min: DoctorsMinAggregateOutputType | null
    _max: DoctorsMaxAggregateOutputType | null
  }

  export type DoctorsAvgAggregateOutputType = {
    id: number | null
  }

  export type DoctorsSumAggregateOutputType = {
    id: number | null
  }

  export type DoctorsMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    created_at: Date | null
    updated_at: Date | null
    password: string | null
  }

  export type DoctorsMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    created_at: Date | null
    updated_at: Date | null
    password: string | null
  }

  export type DoctorsCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phoneNumber: number
    created_at: number
    updated_at: number
    password: number
    _all: number
  }


  export type DoctorsAvgAggregateInputType = {
    id?: true
  }

  export type DoctorsSumAggregateInputType = {
    id?: true
  }

  export type DoctorsMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    created_at?: true
    updated_at?: true
    password?: true
  }

  export type DoctorsMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    created_at?: true
    updated_at?: true
    password?: true
  }

  export type DoctorsCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    created_at?: true
    updated_at?: true
    password?: true
    _all?: true
  }

  export type DoctorsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to aggregate.
     */
    where?: DoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorsOrderByWithRelationInput | DoctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorsMaxAggregateInputType
  }

  export type GetDoctorsAggregateType<T extends DoctorsAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctors[P]>
      : GetScalarType<T[P], AggregateDoctors[P]>
  }




  export type DoctorsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorsWhereInput
    orderBy?: DoctorsOrderByWithAggregationInput | DoctorsOrderByWithAggregationInput[]
    by: DoctorsScalarFieldEnum[] | DoctorsScalarFieldEnum
    having?: DoctorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorsCountAggregateInputType | true
    _avg?: DoctorsAvgAggregateInputType
    _sum?: DoctorsSumAggregateInputType
    _min?: DoctorsMinAggregateInputType
    _max?: DoctorsMaxAggregateInputType
  }

  export type DoctorsGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    created_at: Date
    updated_at: Date
    password: string
    _count: DoctorsCountAggregateOutputType | null
    _avg: DoctorsAvgAggregateOutputType | null
    _sum: DoctorsSumAggregateOutputType | null
    _min: DoctorsMinAggregateOutputType | null
    _max: DoctorsMaxAggregateOutputType | null
  }

  type GetDoctorsGroupByPayload<T extends DoctorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorsGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorsGroupByOutputType[P]>
        }
      >
    >


  export type DoctorsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    created_at?: boolean
    updated_at?: boolean
    password?: boolean
    avaialability?: boolean | Doctors$avaialabilityArgs<ExtArgs>
    _count?: boolean | DoctorsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctors"]>

  export type DoctorsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    created_at?: boolean
    updated_at?: boolean
    password?: boolean
  }, ExtArgs["result"]["doctors"]>

  export type DoctorsSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    created_at?: boolean
    updated_at?: boolean
    password?: boolean
  }

  export type DoctorsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avaialability?: boolean | Doctors$avaialabilityArgs<ExtArgs>
    _count?: boolean | DoctorsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DoctorsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DoctorsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doctors"
    objects: {
      avaialability: Prisma.$AvailabilityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      email: string
      phoneNumber: string
      created_at: Date
      updated_at: Date
      password: string
    }, ExtArgs["result"]["doctors"]>
    composites: {}
  }

  type DoctorsGetPayload<S extends boolean | null | undefined | DoctorsDefaultArgs> = $Result.GetResult<Prisma.$DoctorsPayload, S>

  type DoctorsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoctorsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorsCountAggregateInputType | true
    }

  export interface DoctorsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctors'], meta: { name: 'Doctors' } }
    /**
     * Find zero or one Doctors that matches the filter.
     * @param {DoctorsFindUniqueArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorsFindUniqueArgs>(args: SelectSubset<T, DoctorsFindUniqueArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Doctors that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DoctorsFindUniqueOrThrowArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorsFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsFindFirstArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorsFindFirstArgs>(args?: SelectSubset<T, DoctorsFindFirstArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Doctors that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsFindFirstOrThrowArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorsFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorsFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctors.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorsWithIdOnly = await prisma.doctors.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorsFindManyArgs>(args?: SelectSubset<T, DoctorsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Doctors.
     * @param {DoctorsCreateArgs} args - Arguments to create a Doctors.
     * @example
     * // Create one Doctors
     * const Doctors = await prisma.doctors.create({
     *   data: {
     *     // ... data to create a Doctors
     *   }
     * })
     * 
     */
    create<T extends DoctorsCreateArgs>(args: SelectSubset<T, DoctorsCreateArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Doctors.
     * @param {DoctorsCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctors = await prisma.doctors.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorsCreateManyArgs>(args?: SelectSubset<T, DoctorsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctors and returns the data saved in the database.
     * @param {DoctorsCreateManyAndReturnArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctors = await prisma.doctors.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctors and only return the `id`
     * const doctorsWithIdOnly = await prisma.doctors.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorsCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Doctors.
     * @param {DoctorsDeleteArgs} args - Arguments to delete one Doctors.
     * @example
     * // Delete one Doctors
     * const Doctors = await prisma.doctors.delete({
     *   where: {
     *     // ... filter to delete one Doctors
     *   }
     * })
     * 
     */
    delete<T extends DoctorsDeleteArgs>(args: SelectSubset<T, DoctorsDeleteArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Doctors.
     * @param {DoctorsUpdateArgs} args - Arguments to update one Doctors.
     * @example
     * // Update one Doctors
     * const doctors = await prisma.doctors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorsUpdateArgs>(args: SelectSubset<T, DoctorsUpdateArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorsDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorsDeleteManyArgs>(args?: SelectSubset<T, DoctorsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctors = await prisma.doctors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorsUpdateManyArgs>(args: SelectSubset<T, DoctorsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctors.
     * @param {DoctorsUpsertArgs} args - Arguments to update or create a Doctors.
     * @example
     * // Update or create a Doctors
     * const doctors = await prisma.doctors.upsert({
     *   create: {
     *     // ... data to create a Doctors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctors we want to update
     *   }
     * })
     */
    upsert<T extends DoctorsUpsertArgs>(args: SelectSubset<T, DoctorsUpsertArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctors.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorsCountArgs>(
      args?: Subset<T, DoctorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorsAggregateArgs>(args: Subset<T, DoctorsAggregateArgs>): Prisma.PrismaPromise<GetDoctorsAggregateType<T>>

    /**
     * Group by Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorsGroupByArgs['orderBy'] }
        : { orderBy?: DoctorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doctors model
   */
  readonly fields: DoctorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    avaialability<T extends Doctors$avaialabilityArgs<ExtArgs> = {}>(args?: Subset<T, Doctors$avaialabilityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Doctors model
   */ 
  interface DoctorsFieldRefs {
    readonly id: FieldRef<"Doctors", 'Int'>
    readonly firstName: FieldRef<"Doctors", 'String'>
    readonly lastName: FieldRef<"Doctors", 'String'>
    readonly email: FieldRef<"Doctors", 'String'>
    readonly phoneNumber: FieldRef<"Doctors", 'String'>
    readonly created_at: FieldRef<"Doctors", 'DateTime'>
    readonly updated_at: FieldRef<"Doctors", 'DateTime'>
    readonly password: FieldRef<"Doctors", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Doctors findUnique
   */
  export type DoctorsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where: DoctorsWhereUniqueInput
  }

  /**
   * Doctors findUniqueOrThrow
   */
  export type DoctorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where: DoctorsWhereUniqueInput
  }

  /**
   * Doctors findFirst
   */
  export type DoctorsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorsOrderByWithRelationInput | DoctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorsScalarFieldEnum | DoctorsScalarFieldEnum[]
  }

  /**
   * Doctors findFirstOrThrow
   */
  export type DoctorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorsOrderByWithRelationInput | DoctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorsScalarFieldEnum | DoctorsScalarFieldEnum[]
  }

  /**
   * Doctors findMany
   */
  export type DoctorsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorsOrderByWithRelationInput | DoctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: DoctorsScalarFieldEnum | DoctorsScalarFieldEnum[]
  }

  /**
   * Doctors create
   */
  export type DoctorsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctors.
     */
    data: XOR<DoctorsCreateInput, DoctorsUncheckedCreateInput>
  }

  /**
   * Doctors createMany
   */
  export type DoctorsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: DoctorsCreateManyInput | DoctorsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Doctors createManyAndReturn
   */
  export type DoctorsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Doctors.
     */
    data: DoctorsCreateManyInput | DoctorsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Doctors update
   */
  export type DoctorsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctors.
     */
    data: XOR<DoctorsUpdateInput, DoctorsUncheckedUpdateInput>
    /**
     * Choose, which Doctors to update.
     */
    where: DoctorsWhereUniqueInput
  }

  /**
   * Doctors updateMany
   */
  export type DoctorsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorsUpdateManyMutationInput, DoctorsUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorsWhereInput
  }

  /**
   * Doctors upsert
   */
  export type DoctorsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctors to update in case it exists.
     */
    where: DoctorsWhereUniqueInput
    /**
     * In case the Doctors found by the `where` argument doesn't exist, create a new Doctors with this data.
     */
    create: XOR<DoctorsCreateInput, DoctorsUncheckedCreateInput>
    /**
     * In case the Doctors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorsUpdateInput, DoctorsUncheckedUpdateInput>
  }

  /**
   * Doctors delete
   */
  export type DoctorsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
    /**
     * Filter which Doctors to delete.
     */
    where: DoctorsWhereUniqueInput
  }

  /**
   * Doctors deleteMany
   */
  export type DoctorsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorsWhereInput
  }

  /**
   * Doctors.avaialability
   */
  export type Doctors$avaialabilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    where?: AvailabilityWhereInput
    orderBy?: AvailabilityOrderByWithRelationInput | AvailabilityOrderByWithRelationInput[]
    cursor?: AvailabilityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AvailabilityScalarFieldEnum | AvailabilityScalarFieldEnum[]
  }

  /**
   * Doctors without action
   */
  export type DoctorsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctors
     */
    select?: DoctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorsInclude<ExtArgs> | null
  }


  /**
   * Model Availability
   */

  export type AggregateAvailability = {
    _count: AvailabilityCountAggregateOutputType | null
    _avg: AvailabilityAvgAggregateOutputType | null
    _sum: AvailabilitySumAggregateOutputType | null
    _min: AvailabilityMinAggregateOutputType | null
    _max: AvailabilityMaxAggregateOutputType | null
  }

  export type AvailabilityAvgAggregateOutputType = {
    id: number | null
    doctorId: number | null
  }

  export type AvailabilitySumAggregateOutputType = {
    id: number | null
    doctorId: number | null
  }

  export type AvailabilityMinAggregateOutputType = {
    id: number | null
    doctorId: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AvailabilityMaxAggregateOutputType = {
    id: number | null
    doctorId: number | null
    date: Date | null
    startTime: string | null
    endTime: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AvailabilityCountAggregateOutputType = {
    id: number
    doctorId: number
    date: number
    startTime: number
    endTime: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AvailabilityAvgAggregateInputType = {
    id?: true
    doctorId?: true
  }

  export type AvailabilitySumAggregateInputType = {
    id?: true
    doctorId?: true
  }

  export type AvailabilityMinAggregateInputType = {
    id?: true
    doctorId?: true
    date?: true
    startTime?: true
    endTime?: true
    created_at?: true
    updated_at?: true
  }

  export type AvailabilityMaxAggregateInputType = {
    id?: true
    doctorId?: true
    date?: true
    startTime?: true
    endTime?: true
    created_at?: true
    updated_at?: true
  }

  export type AvailabilityCountAggregateInputType = {
    id?: true
    doctorId?: true
    date?: true
    startTime?: true
    endTime?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AvailabilityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Availability to aggregate.
     */
    where?: AvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Availabilities to fetch.
     */
    orderBy?: AvailabilityOrderByWithRelationInput | AvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Availabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Availabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Availabilities
    **/
    _count?: true | AvailabilityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvailabilityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvailabilitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvailabilityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvailabilityMaxAggregateInputType
  }

  export type GetAvailabilityAggregateType<T extends AvailabilityAggregateArgs> = {
        [P in keyof T & keyof AggregateAvailability]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvailability[P]>
      : GetScalarType<T[P], AggregateAvailability[P]>
  }




  export type AvailabilityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvailabilityWhereInput
    orderBy?: AvailabilityOrderByWithAggregationInput | AvailabilityOrderByWithAggregationInput[]
    by: AvailabilityScalarFieldEnum[] | AvailabilityScalarFieldEnum
    having?: AvailabilityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvailabilityCountAggregateInputType | true
    _avg?: AvailabilityAvgAggregateInputType
    _sum?: AvailabilitySumAggregateInputType
    _min?: AvailabilityMinAggregateInputType
    _max?: AvailabilityMaxAggregateInputType
  }

  export type AvailabilityGroupByOutputType = {
    id: number
    doctorId: number
    date: Date
    startTime: string
    endTime: string
    created_at: Date
    updated_at: Date
    _count: AvailabilityCountAggregateOutputType | null
    _avg: AvailabilityAvgAggregateOutputType | null
    _sum: AvailabilitySumAggregateOutputType | null
    _min: AvailabilityMinAggregateOutputType | null
    _max: AvailabilityMaxAggregateOutputType | null
  }

  type GetAvailabilityGroupByPayload<T extends AvailabilityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AvailabilityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvailabilityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvailabilityGroupByOutputType[P]>
            : GetScalarType<T[P], AvailabilityGroupByOutputType[P]>
        }
      >
    >


  export type AvailabilitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    created_at?: boolean
    updated_at?: boolean
    doctor?: boolean | DoctorsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["availability"]>

  export type AvailabilitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    created_at?: boolean
    updated_at?: boolean
    doctor?: boolean | DoctorsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["availability"]>

  export type AvailabilitySelectScalar = {
    id?: boolean
    doctorId?: boolean
    date?: boolean
    startTime?: boolean
    endTime?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type AvailabilityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorsDefaultArgs<ExtArgs>
  }
  export type AvailabilityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorsDefaultArgs<ExtArgs>
  }

  export type $AvailabilityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Availability"
    objects: {
      doctor: Prisma.$DoctorsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      doctorId: number
      date: Date
      startTime: string
      endTime: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["availability"]>
    composites: {}
  }

  type AvailabilityGetPayload<S extends boolean | null | undefined | AvailabilityDefaultArgs> = $Result.GetResult<Prisma.$AvailabilityPayload, S>

  type AvailabilityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AvailabilityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AvailabilityCountAggregateInputType | true
    }

  export interface AvailabilityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Availability'], meta: { name: 'Availability' } }
    /**
     * Find zero or one Availability that matches the filter.
     * @param {AvailabilityFindUniqueArgs} args - Arguments to find a Availability
     * @example
     * // Get one Availability
     * const availability = await prisma.availability.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AvailabilityFindUniqueArgs>(args: SelectSubset<T, AvailabilityFindUniqueArgs<ExtArgs>>): Prisma__AvailabilityClient<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Availability that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AvailabilityFindUniqueOrThrowArgs} args - Arguments to find a Availability
     * @example
     * // Get one Availability
     * const availability = await prisma.availability.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AvailabilityFindUniqueOrThrowArgs>(args: SelectSubset<T, AvailabilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AvailabilityClient<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Availability that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityFindFirstArgs} args - Arguments to find a Availability
     * @example
     * // Get one Availability
     * const availability = await prisma.availability.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AvailabilityFindFirstArgs>(args?: SelectSubset<T, AvailabilityFindFirstArgs<ExtArgs>>): Prisma__AvailabilityClient<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Availability that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityFindFirstOrThrowArgs} args - Arguments to find a Availability
     * @example
     * // Get one Availability
     * const availability = await prisma.availability.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AvailabilityFindFirstOrThrowArgs>(args?: SelectSubset<T, AvailabilityFindFirstOrThrowArgs<ExtArgs>>): Prisma__AvailabilityClient<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Availabilities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Availabilities
     * const availabilities = await prisma.availability.findMany()
     * 
     * // Get first 10 Availabilities
     * const availabilities = await prisma.availability.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const availabilityWithIdOnly = await prisma.availability.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AvailabilityFindManyArgs>(args?: SelectSubset<T, AvailabilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Availability.
     * @param {AvailabilityCreateArgs} args - Arguments to create a Availability.
     * @example
     * // Create one Availability
     * const Availability = await prisma.availability.create({
     *   data: {
     *     // ... data to create a Availability
     *   }
     * })
     * 
     */
    create<T extends AvailabilityCreateArgs>(args: SelectSubset<T, AvailabilityCreateArgs<ExtArgs>>): Prisma__AvailabilityClient<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Availabilities.
     * @param {AvailabilityCreateManyArgs} args - Arguments to create many Availabilities.
     * @example
     * // Create many Availabilities
     * const availability = await prisma.availability.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AvailabilityCreateManyArgs>(args?: SelectSubset<T, AvailabilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Availabilities and returns the data saved in the database.
     * @param {AvailabilityCreateManyAndReturnArgs} args - Arguments to create many Availabilities.
     * @example
     * // Create many Availabilities
     * const availability = await prisma.availability.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Availabilities and only return the `id`
     * const availabilityWithIdOnly = await prisma.availability.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AvailabilityCreateManyAndReturnArgs>(args?: SelectSubset<T, AvailabilityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Availability.
     * @param {AvailabilityDeleteArgs} args - Arguments to delete one Availability.
     * @example
     * // Delete one Availability
     * const Availability = await prisma.availability.delete({
     *   where: {
     *     // ... filter to delete one Availability
     *   }
     * })
     * 
     */
    delete<T extends AvailabilityDeleteArgs>(args: SelectSubset<T, AvailabilityDeleteArgs<ExtArgs>>): Prisma__AvailabilityClient<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Availability.
     * @param {AvailabilityUpdateArgs} args - Arguments to update one Availability.
     * @example
     * // Update one Availability
     * const availability = await prisma.availability.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AvailabilityUpdateArgs>(args: SelectSubset<T, AvailabilityUpdateArgs<ExtArgs>>): Prisma__AvailabilityClient<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Availabilities.
     * @param {AvailabilityDeleteManyArgs} args - Arguments to filter Availabilities to delete.
     * @example
     * // Delete a few Availabilities
     * const { count } = await prisma.availability.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AvailabilityDeleteManyArgs>(args?: SelectSubset<T, AvailabilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Availabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Availabilities
     * const availability = await prisma.availability.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AvailabilityUpdateManyArgs>(args: SelectSubset<T, AvailabilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Availability.
     * @param {AvailabilityUpsertArgs} args - Arguments to update or create a Availability.
     * @example
     * // Update or create a Availability
     * const availability = await prisma.availability.upsert({
     *   create: {
     *     // ... data to create a Availability
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Availability we want to update
     *   }
     * })
     */
    upsert<T extends AvailabilityUpsertArgs>(args: SelectSubset<T, AvailabilityUpsertArgs<ExtArgs>>): Prisma__AvailabilityClient<$Result.GetResult<Prisma.$AvailabilityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Availabilities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityCountArgs} args - Arguments to filter Availabilities to count.
     * @example
     * // Count the number of Availabilities
     * const count = await prisma.availability.count({
     *   where: {
     *     // ... the filter for the Availabilities we want to count
     *   }
     * })
    **/
    count<T extends AvailabilityCountArgs>(
      args?: Subset<T, AvailabilityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvailabilityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Availability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvailabilityAggregateArgs>(args: Subset<T, AvailabilityAggregateArgs>): Prisma.PrismaPromise<GetAvailabilityAggregateType<T>>

    /**
     * Group by Availability.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvailabilityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvailabilityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvailabilityGroupByArgs['orderBy'] }
        : { orderBy?: AvailabilityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvailabilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvailabilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Availability model
   */
  readonly fields: AvailabilityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Availability.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AvailabilityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorsDefaultArgs<ExtArgs>>): Prisma__DoctorsClient<$Result.GetResult<Prisma.$DoctorsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Availability model
   */ 
  interface AvailabilityFieldRefs {
    readonly id: FieldRef<"Availability", 'Int'>
    readonly doctorId: FieldRef<"Availability", 'Int'>
    readonly date: FieldRef<"Availability", 'DateTime'>
    readonly startTime: FieldRef<"Availability", 'String'>
    readonly endTime: FieldRef<"Availability", 'String'>
    readonly created_at: FieldRef<"Availability", 'DateTime'>
    readonly updated_at: FieldRef<"Availability", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Availability findUnique
   */
  export type AvailabilityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which Availability to fetch.
     */
    where: AvailabilityWhereUniqueInput
  }

  /**
   * Availability findUniqueOrThrow
   */
  export type AvailabilityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which Availability to fetch.
     */
    where: AvailabilityWhereUniqueInput
  }

  /**
   * Availability findFirst
   */
  export type AvailabilityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which Availability to fetch.
     */
    where?: AvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Availabilities to fetch.
     */
    orderBy?: AvailabilityOrderByWithRelationInput | AvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Availabilities.
     */
    cursor?: AvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Availabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Availabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Availabilities.
     */
    distinct?: AvailabilityScalarFieldEnum | AvailabilityScalarFieldEnum[]
  }

  /**
   * Availability findFirstOrThrow
   */
  export type AvailabilityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which Availability to fetch.
     */
    where?: AvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Availabilities to fetch.
     */
    orderBy?: AvailabilityOrderByWithRelationInput | AvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Availabilities.
     */
    cursor?: AvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Availabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Availabilities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Availabilities.
     */
    distinct?: AvailabilityScalarFieldEnum | AvailabilityScalarFieldEnum[]
  }

  /**
   * Availability findMany
   */
  export type AvailabilityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    /**
     * Filter, which Availabilities to fetch.
     */
    where?: AvailabilityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Availabilities to fetch.
     */
    orderBy?: AvailabilityOrderByWithRelationInput | AvailabilityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Availabilities.
     */
    cursor?: AvailabilityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Availabilities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Availabilities.
     */
    skip?: number
    distinct?: AvailabilityScalarFieldEnum | AvailabilityScalarFieldEnum[]
  }

  /**
   * Availability create
   */
  export type AvailabilityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    /**
     * The data needed to create a Availability.
     */
    data: XOR<AvailabilityCreateInput, AvailabilityUncheckedCreateInput>
  }

  /**
   * Availability createMany
   */
  export type AvailabilityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Availabilities.
     */
    data: AvailabilityCreateManyInput | AvailabilityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Availability createManyAndReturn
   */
  export type AvailabilityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Availabilities.
     */
    data: AvailabilityCreateManyInput | AvailabilityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Availability update
   */
  export type AvailabilityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    /**
     * The data needed to update a Availability.
     */
    data: XOR<AvailabilityUpdateInput, AvailabilityUncheckedUpdateInput>
    /**
     * Choose, which Availability to update.
     */
    where: AvailabilityWhereUniqueInput
  }

  /**
   * Availability updateMany
   */
  export type AvailabilityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Availabilities.
     */
    data: XOR<AvailabilityUpdateManyMutationInput, AvailabilityUncheckedUpdateManyInput>
    /**
     * Filter which Availabilities to update
     */
    where?: AvailabilityWhereInput
  }

  /**
   * Availability upsert
   */
  export type AvailabilityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    /**
     * The filter to search for the Availability to update in case it exists.
     */
    where: AvailabilityWhereUniqueInput
    /**
     * In case the Availability found by the `where` argument doesn't exist, create a new Availability with this data.
     */
    create: XOR<AvailabilityCreateInput, AvailabilityUncheckedCreateInput>
    /**
     * In case the Availability was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvailabilityUpdateInput, AvailabilityUncheckedUpdateInput>
  }

  /**
   * Availability delete
   */
  export type AvailabilityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
    /**
     * Filter which Availability to delete.
     */
    where: AvailabilityWhereUniqueInput
  }

  /**
   * Availability deleteMany
   */
  export type AvailabilityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Availabilities to delete
     */
    where?: AvailabilityWhereInput
  }

  /**
   * Availability without action
   */
  export type AvailabilityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Availability
     */
    select?: AvailabilitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AvailabilityInclude<ExtArgs> | null
  }


  /**
   * Model Allergy
   */

  export type AggregateAllergy = {
    _count: AllergyCountAggregateOutputType | null
    _avg: AllergyAvgAggregateOutputType | null
    _sum: AllergySumAggregateOutputType | null
    _min: AllergyMinAggregateOutputType | null
    _max: AllergyMaxAggregateOutputType | null
  }

  export type AllergyAvgAggregateOutputType = {
    id: number | null
  }

  export type AllergySumAggregateOutputType = {
    id: number | null
  }

  export type AllergyMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AllergyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type AllergyCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type AllergyAvgAggregateInputType = {
    id?: true
  }

  export type AllergySumAggregateInputType = {
    id?: true
  }

  export type AllergyMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type AllergyMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
  }

  export type AllergyCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type AllergyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allergy to aggregate.
     */
    where?: AllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     */
    orderBy?: AllergyOrderByWithRelationInput | AllergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Allergies
    **/
    _count?: true | AllergyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllergyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllergySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllergyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllergyMaxAggregateInputType
  }

  export type GetAllergyAggregateType<T extends AllergyAggregateArgs> = {
        [P in keyof T & keyof AggregateAllergy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllergy[P]>
      : GetScalarType<T[P], AggregateAllergy[P]>
  }




  export type AllergyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllergyWhereInput
    orderBy?: AllergyOrderByWithAggregationInput | AllergyOrderByWithAggregationInput[]
    by: AllergyScalarFieldEnum[] | AllergyScalarFieldEnum
    having?: AllergyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllergyCountAggregateInputType | true
    _avg?: AllergyAvgAggregateInputType
    _sum?: AllergySumAggregateInputType
    _min?: AllergyMinAggregateInputType
    _max?: AllergyMaxAggregateInputType
  }

  export type AllergyGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    updated_at: Date
    _count: AllergyCountAggregateOutputType | null
    _avg: AllergyAvgAggregateOutputType | null
    _sum: AllergySumAggregateOutputType | null
    _min: AllergyMinAggregateOutputType | null
    _max: AllergyMaxAggregateOutputType | null
  }

  type GetAllergyGroupByPayload<T extends AllergyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllergyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllergyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllergyGroupByOutputType[P]>
            : GetScalarType<T[P], AllergyGroupByOutputType[P]>
        }
      >
    >


  export type AllergySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    TriageAllergy?: boolean | Allergy$TriageAllergyArgs<ExtArgs>
    _count?: boolean | AllergyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allergy"]>

  export type AllergySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["allergy"]>

  export type AllergySelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type AllergyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TriageAllergy?: boolean | Allergy$TriageAllergyArgs<ExtArgs>
    _count?: boolean | AllergyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AllergyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AllergyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Allergy"
    objects: {
      TriageAllergy: Prisma.$TriageAllergyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["allergy"]>
    composites: {}
  }

  type AllergyGetPayload<S extends boolean | null | undefined | AllergyDefaultArgs> = $Result.GetResult<Prisma.$AllergyPayload, S>

  type AllergyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AllergyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AllergyCountAggregateInputType | true
    }

  export interface AllergyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Allergy'], meta: { name: 'Allergy' } }
    /**
     * Find zero or one Allergy that matches the filter.
     * @param {AllergyFindUniqueArgs} args - Arguments to find a Allergy
     * @example
     * // Get one Allergy
     * const allergy = await prisma.allergy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AllergyFindUniqueArgs>(args: SelectSubset<T, AllergyFindUniqueArgs<ExtArgs>>): Prisma__AllergyClient<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Allergy that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AllergyFindUniqueOrThrowArgs} args - Arguments to find a Allergy
     * @example
     * // Get one Allergy
     * const allergy = await prisma.allergy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AllergyFindUniqueOrThrowArgs>(args: SelectSubset<T, AllergyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllergyClient<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Allergy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyFindFirstArgs} args - Arguments to find a Allergy
     * @example
     * // Get one Allergy
     * const allergy = await prisma.allergy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AllergyFindFirstArgs>(args?: SelectSubset<T, AllergyFindFirstArgs<ExtArgs>>): Prisma__AllergyClient<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Allergy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyFindFirstOrThrowArgs} args - Arguments to find a Allergy
     * @example
     * // Get one Allergy
     * const allergy = await prisma.allergy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AllergyFindFirstOrThrowArgs>(args?: SelectSubset<T, AllergyFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllergyClient<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allergies
     * const allergies = await prisma.allergy.findMany()
     * 
     * // Get first 10 Allergies
     * const allergies = await prisma.allergy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allergyWithIdOnly = await prisma.allergy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AllergyFindManyArgs>(args?: SelectSubset<T, AllergyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Allergy.
     * @param {AllergyCreateArgs} args - Arguments to create a Allergy.
     * @example
     * // Create one Allergy
     * const Allergy = await prisma.allergy.create({
     *   data: {
     *     // ... data to create a Allergy
     *   }
     * })
     * 
     */
    create<T extends AllergyCreateArgs>(args: SelectSubset<T, AllergyCreateArgs<ExtArgs>>): Prisma__AllergyClient<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Allergies.
     * @param {AllergyCreateManyArgs} args - Arguments to create many Allergies.
     * @example
     * // Create many Allergies
     * const allergy = await prisma.allergy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AllergyCreateManyArgs>(args?: SelectSubset<T, AllergyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Allergies and returns the data saved in the database.
     * @param {AllergyCreateManyAndReturnArgs} args - Arguments to create many Allergies.
     * @example
     * // Create many Allergies
     * const allergy = await prisma.allergy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Allergies and only return the `id`
     * const allergyWithIdOnly = await prisma.allergy.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AllergyCreateManyAndReturnArgs>(args?: SelectSubset<T, AllergyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Allergy.
     * @param {AllergyDeleteArgs} args - Arguments to delete one Allergy.
     * @example
     * // Delete one Allergy
     * const Allergy = await prisma.allergy.delete({
     *   where: {
     *     // ... filter to delete one Allergy
     *   }
     * })
     * 
     */
    delete<T extends AllergyDeleteArgs>(args: SelectSubset<T, AllergyDeleteArgs<ExtArgs>>): Prisma__AllergyClient<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Allergy.
     * @param {AllergyUpdateArgs} args - Arguments to update one Allergy.
     * @example
     * // Update one Allergy
     * const allergy = await prisma.allergy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AllergyUpdateArgs>(args: SelectSubset<T, AllergyUpdateArgs<ExtArgs>>): Prisma__AllergyClient<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Allergies.
     * @param {AllergyDeleteManyArgs} args - Arguments to filter Allergies to delete.
     * @example
     * // Delete a few Allergies
     * const { count } = await prisma.allergy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AllergyDeleteManyArgs>(args?: SelectSubset<T, AllergyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allergies
     * const allergy = await prisma.allergy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AllergyUpdateManyArgs>(args: SelectSubset<T, AllergyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Allergy.
     * @param {AllergyUpsertArgs} args - Arguments to update or create a Allergy.
     * @example
     * // Update or create a Allergy
     * const allergy = await prisma.allergy.upsert({
     *   create: {
     *     // ... data to create a Allergy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allergy we want to update
     *   }
     * })
     */
    upsert<T extends AllergyUpsertArgs>(args: SelectSubset<T, AllergyUpsertArgs<ExtArgs>>): Prisma__AllergyClient<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyCountArgs} args - Arguments to filter Allergies to count.
     * @example
     * // Count the number of Allergies
     * const count = await prisma.allergy.count({
     *   where: {
     *     // ... the filter for the Allergies we want to count
     *   }
     * })
    **/
    count<T extends AllergyCountArgs>(
      args?: Subset<T, AllergyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllergyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllergyAggregateArgs>(args: Subset<T, AllergyAggregateArgs>): Prisma.PrismaPromise<GetAllergyAggregateType<T>>

    /**
     * Group by Allergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllergyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllergyGroupByArgs['orderBy'] }
        : { orderBy?: AllergyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllergyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllergyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Allergy model
   */
  readonly fields: AllergyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Allergy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllergyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    TriageAllergy<T extends Allergy$TriageAllergyArgs<ExtArgs> = {}>(args?: Subset<T, Allergy$TriageAllergyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Allergy model
   */ 
  interface AllergyFieldRefs {
    readonly id: FieldRef<"Allergy", 'Int'>
    readonly name: FieldRef<"Allergy", 'String'>
    readonly created_at: FieldRef<"Allergy", 'DateTime'>
    readonly updated_at: FieldRef<"Allergy", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Allergy findUnique
   */
  export type AllergyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    /**
     * Filter, which Allergy to fetch.
     */
    where: AllergyWhereUniqueInput
  }

  /**
   * Allergy findUniqueOrThrow
   */
  export type AllergyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    /**
     * Filter, which Allergy to fetch.
     */
    where: AllergyWhereUniqueInput
  }

  /**
   * Allergy findFirst
   */
  export type AllergyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    /**
     * Filter, which Allergy to fetch.
     */
    where?: AllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     */
    orderBy?: AllergyOrderByWithRelationInput | AllergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allergies.
     */
    cursor?: AllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allergies.
     */
    distinct?: AllergyScalarFieldEnum | AllergyScalarFieldEnum[]
  }

  /**
   * Allergy findFirstOrThrow
   */
  export type AllergyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    /**
     * Filter, which Allergy to fetch.
     */
    where?: AllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     */
    orderBy?: AllergyOrderByWithRelationInput | AllergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Allergies.
     */
    cursor?: AllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Allergies.
     */
    distinct?: AllergyScalarFieldEnum | AllergyScalarFieldEnum[]
  }

  /**
   * Allergy findMany
   */
  export type AllergyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    /**
     * Filter, which Allergies to fetch.
     */
    where?: AllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Allergies to fetch.
     */
    orderBy?: AllergyOrderByWithRelationInput | AllergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Allergies.
     */
    cursor?: AllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Allergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Allergies.
     */
    skip?: number
    distinct?: AllergyScalarFieldEnum | AllergyScalarFieldEnum[]
  }

  /**
   * Allergy create
   */
  export type AllergyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    /**
     * The data needed to create a Allergy.
     */
    data: XOR<AllergyCreateInput, AllergyUncheckedCreateInput>
  }

  /**
   * Allergy createMany
   */
  export type AllergyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Allergies.
     */
    data: AllergyCreateManyInput | AllergyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Allergy createManyAndReturn
   */
  export type AllergyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Allergies.
     */
    data: AllergyCreateManyInput | AllergyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Allergy update
   */
  export type AllergyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    /**
     * The data needed to update a Allergy.
     */
    data: XOR<AllergyUpdateInput, AllergyUncheckedUpdateInput>
    /**
     * Choose, which Allergy to update.
     */
    where: AllergyWhereUniqueInput
  }

  /**
   * Allergy updateMany
   */
  export type AllergyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Allergies.
     */
    data: XOR<AllergyUpdateManyMutationInput, AllergyUncheckedUpdateManyInput>
    /**
     * Filter which Allergies to update
     */
    where?: AllergyWhereInput
  }

  /**
   * Allergy upsert
   */
  export type AllergyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    /**
     * The filter to search for the Allergy to update in case it exists.
     */
    where: AllergyWhereUniqueInput
    /**
     * In case the Allergy found by the `where` argument doesn't exist, create a new Allergy with this data.
     */
    create: XOR<AllergyCreateInput, AllergyUncheckedCreateInput>
    /**
     * In case the Allergy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllergyUpdateInput, AllergyUncheckedUpdateInput>
  }

  /**
   * Allergy delete
   */
  export type AllergyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    /**
     * Filter which Allergy to delete.
     */
    where: AllergyWhereUniqueInput
  }

  /**
   * Allergy deleteMany
   */
  export type AllergyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Allergies to delete
     */
    where?: AllergyWhereInput
  }

  /**
   * Allergy.TriageAllergy
   */
  export type Allergy$TriageAllergyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    where?: TriageAllergyWhereInput
    orderBy?: TriageAllergyOrderByWithRelationInput | TriageAllergyOrderByWithRelationInput[]
    cursor?: TriageAllergyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TriageAllergyScalarFieldEnum | TriageAllergyScalarFieldEnum[]
  }

  /**
   * Allergy without action
   */
  export type AllergyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
  }


  /**
   * Model TriageAllergy
   */

  export type AggregateTriageAllergy = {
    _count: TriageAllergyCountAggregateOutputType | null
    _avg: TriageAllergyAvgAggregateOutputType | null
    _sum: TriageAllergySumAggregateOutputType | null
    _min: TriageAllergyMinAggregateOutputType | null
    _max: TriageAllergyMaxAggregateOutputType | null
  }

  export type TriageAllergyAvgAggregateOutputType = {
    id: number | null
    patientTriageId: number | null
    allergyId: number | null
  }

  export type TriageAllergySumAggregateOutputType = {
    id: number | null
    patientTriageId: number | null
    allergyId: number | null
  }

  export type TriageAllergyMinAggregateOutputType = {
    id: number | null
    patientTriageId: number | null
    allergyId: number | null
  }

  export type TriageAllergyMaxAggregateOutputType = {
    id: number | null
    patientTriageId: number | null
    allergyId: number | null
  }

  export type TriageAllergyCountAggregateOutputType = {
    id: number
    patientTriageId: number
    allergyId: number
    _all: number
  }


  export type TriageAllergyAvgAggregateInputType = {
    id?: true
    patientTriageId?: true
    allergyId?: true
  }

  export type TriageAllergySumAggregateInputType = {
    id?: true
    patientTriageId?: true
    allergyId?: true
  }

  export type TriageAllergyMinAggregateInputType = {
    id?: true
    patientTriageId?: true
    allergyId?: true
  }

  export type TriageAllergyMaxAggregateInputType = {
    id?: true
    patientTriageId?: true
    allergyId?: true
  }

  export type TriageAllergyCountAggregateInputType = {
    id?: true
    patientTriageId?: true
    allergyId?: true
    _all?: true
  }

  export type TriageAllergyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TriageAllergy to aggregate.
     */
    where?: TriageAllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriageAllergies to fetch.
     */
    orderBy?: TriageAllergyOrderByWithRelationInput | TriageAllergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriageAllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriageAllergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriageAllergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriageAllergies
    **/
    _count?: true | TriageAllergyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriageAllergyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriageAllergySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriageAllergyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriageAllergyMaxAggregateInputType
  }

  export type GetTriageAllergyAggregateType<T extends TriageAllergyAggregateArgs> = {
        [P in keyof T & keyof AggregateTriageAllergy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriageAllergy[P]>
      : GetScalarType<T[P], AggregateTriageAllergy[P]>
  }




  export type TriageAllergyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriageAllergyWhereInput
    orderBy?: TriageAllergyOrderByWithAggregationInput | TriageAllergyOrderByWithAggregationInput[]
    by: TriageAllergyScalarFieldEnum[] | TriageAllergyScalarFieldEnum
    having?: TriageAllergyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriageAllergyCountAggregateInputType | true
    _avg?: TriageAllergyAvgAggregateInputType
    _sum?: TriageAllergySumAggregateInputType
    _min?: TriageAllergyMinAggregateInputType
    _max?: TriageAllergyMaxAggregateInputType
  }

  export type TriageAllergyGroupByOutputType = {
    id: number
    patientTriageId: number | null
    allergyId: number | null
    _count: TriageAllergyCountAggregateOutputType | null
    _avg: TriageAllergyAvgAggregateOutputType | null
    _sum: TriageAllergySumAggregateOutputType | null
    _min: TriageAllergyMinAggregateOutputType | null
    _max: TriageAllergyMaxAggregateOutputType | null
  }

  type GetTriageAllergyGroupByPayload<T extends TriageAllergyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TriageAllergyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriageAllergyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriageAllergyGroupByOutputType[P]>
            : GetScalarType<T[P], TriageAllergyGroupByOutputType[P]>
        }
      >
    >


  export type TriageAllergySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientTriageId?: boolean
    allergyId?: boolean
    patientTriage?: boolean | TriageAllergy$patientTriageArgs<ExtArgs>
    allergy?: boolean | TriageAllergy$allergyArgs<ExtArgs>
  }, ExtArgs["result"]["triageAllergy"]>

  export type TriageAllergySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientTriageId?: boolean
    allergyId?: boolean
    patientTriage?: boolean | TriageAllergy$patientTriageArgs<ExtArgs>
    allergy?: boolean | TriageAllergy$allergyArgs<ExtArgs>
  }, ExtArgs["result"]["triageAllergy"]>

  export type TriageAllergySelectScalar = {
    id?: boolean
    patientTriageId?: boolean
    allergyId?: boolean
  }

  export type TriageAllergyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTriage?: boolean | TriageAllergy$patientTriageArgs<ExtArgs>
    allergy?: boolean | TriageAllergy$allergyArgs<ExtArgs>
  }
  export type TriageAllergyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTriage?: boolean | TriageAllergy$patientTriageArgs<ExtArgs>
    allergy?: boolean | TriageAllergy$allergyArgs<ExtArgs>
  }

  export type $TriageAllergyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TriageAllergy"
    objects: {
      patientTriage: Prisma.$PatientTriagePayload<ExtArgs> | null
      allergy: Prisma.$AllergyPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientTriageId: number | null
      allergyId: number | null
    }, ExtArgs["result"]["triageAllergy"]>
    composites: {}
  }

  type TriageAllergyGetPayload<S extends boolean | null | undefined | TriageAllergyDefaultArgs> = $Result.GetResult<Prisma.$TriageAllergyPayload, S>

  type TriageAllergyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TriageAllergyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TriageAllergyCountAggregateInputType | true
    }

  export interface TriageAllergyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TriageAllergy'], meta: { name: 'TriageAllergy' } }
    /**
     * Find zero or one TriageAllergy that matches the filter.
     * @param {TriageAllergyFindUniqueArgs} args - Arguments to find a TriageAllergy
     * @example
     * // Get one TriageAllergy
     * const triageAllergy = await prisma.triageAllergy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TriageAllergyFindUniqueArgs>(args: SelectSubset<T, TriageAllergyFindUniqueArgs<ExtArgs>>): Prisma__TriageAllergyClient<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TriageAllergy that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TriageAllergyFindUniqueOrThrowArgs} args - Arguments to find a TriageAllergy
     * @example
     * // Get one TriageAllergy
     * const triageAllergy = await prisma.triageAllergy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TriageAllergyFindUniqueOrThrowArgs>(args: SelectSubset<T, TriageAllergyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TriageAllergyClient<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TriageAllergy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageAllergyFindFirstArgs} args - Arguments to find a TriageAllergy
     * @example
     * // Get one TriageAllergy
     * const triageAllergy = await prisma.triageAllergy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TriageAllergyFindFirstArgs>(args?: SelectSubset<T, TriageAllergyFindFirstArgs<ExtArgs>>): Prisma__TriageAllergyClient<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TriageAllergy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageAllergyFindFirstOrThrowArgs} args - Arguments to find a TriageAllergy
     * @example
     * // Get one TriageAllergy
     * const triageAllergy = await prisma.triageAllergy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TriageAllergyFindFirstOrThrowArgs>(args?: SelectSubset<T, TriageAllergyFindFirstOrThrowArgs<ExtArgs>>): Prisma__TriageAllergyClient<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TriageAllergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageAllergyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriageAllergies
     * const triageAllergies = await prisma.triageAllergy.findMany()
     * 
     * // Get first 10 TriageAllergies
     * const triageAllergies = await prisma.triageAllergy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triageAllergyWithIdOnly = await prisma.triageAllergy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TriageAllergyFindManyArgs>(args?: SelectSubset<T, TriageAllergyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TriageAllergy.
     * @param {TriageAllergyCreateArgs} args - Arguments to create a TriageAllergy.
     * @example
     * // Create one TriageAllergy
     * const TriageAllergy = await prisma.triageAllergy.create({
     *   data: {
     *     // ... data to create a TriageAllergy
     *   }
     * })
     * 
     */
    create<T extends TriageAllergyCreateArgs>(args: SelectSubset<T, TriageAllergyCreateArgs<ExtArgs>>): Prisma__TriageAllergyClient<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TriageAllergies.
     * @param {TriageAllergyCreateManyArgs} args - Arguments to create many TriageAllergies.
     * @example
     * // Create many TriageAllergies
     * const triageAllergy = await prisma.triageAllergy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TriageAllergyCreateManyArgs>(args?: SelectSubset<T, TriageAllergyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TriageAllergies and returns the data saved in the database.
     * @param {TriageAllergyCreateManyAndReturnArgs} args - Arguments to create many TriageAllergies.
     * @example
     * // Create many TriageAllergies
     * const triageAllergy = await prisma.triageAllergy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TriageAllergies and only return the `id`
     * const triageAllergyWithIdOnly = await prisma.triageAllergy.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TriageAllergyCreateManyAndReturnArgs>(args?: SelectSubset<T, TriageAllergyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TriageAllergy.
     * @param {TriageAllergyDeleteArgs} args - Arguments to delete one TriageAllergy.
     * @example
     * // Delete one TriageAllergy
     * const TriageAllergy = await prisma.triageAllergy.delete({
     *   where: {
     *     // ... filter to delete one TriageAllergy
     *   }
     * })
     * 
     */
    delete<T extends TriageAllergyDeleteArgs>(args: SelectSubset<T, TriageAllergyDeleteArgs<ExtArgs>>): Prisma__TriageAllergyClient<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TriageAllergy.
     * @param {TriageAllergyUpdateArgs} args - Arguments to update one TriageAllergy.
     * @example
     * // Update one TriageAllergy
     * const triageAllergy = await prisma.triageAllergy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TriageAllergyUpdateArgs>(args: SelectSubset<T, TriageAllergyUpdateArgs<ExtArgs>>): Prisma__TriageAllergyClient<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TriageAllergies.
     * @param {TriageAllergyDeleteManyArgs} args - Arguments to filter TriageAllergies to delete.
     * @example
     * // Delete a few TriageAllergies
     * const { count } = await prisma.triageAllergy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TriageAllergyDeleteManyArgs>(args?: SelectSubset<T, TriageAllergyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriageAllergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageAllergyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriageAllergies
     * const triageAllergy = await prisma.triageAllergy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TriageAllergyUpdateManyArgs>(args: SelectSubset<T, TriageAllergyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriageAllergy.
     * @param {TriageAllergyUpsertArgs} args - Arguments to update or create a TriageAllergy.
     * @example
     * // Update or create a TriageAllergy
     * const triageAllergy = await prisma.triageAllergy.upsert({
     *   create: {
     *     // ... data to create a TriageAllergy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriageAllergy we want to update
     *   }
     * })
     */
    upsert<T extends TriageAllergyUpsertArgs>(args: SelectSubset<T, TriageAllergyUpsertArgs<ExtArgs>>): Prisma__TriageAllergyClient<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TriageAllergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageAllergyCountArgs} args - Arguments to filter TriageAllergies to count.
     * @example
     * // Count the number of TriageAllergies
     * const count = await prisma.triageAllergy.count({
     *   where: {
     *     // ... the filter for the TriageAllergies we want to count
     *   }
     * })
    **/
    count<T extends TriageAllergyCountArgs>(
      args?: Subset<T, TriageAllergyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriageAllergyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriageAllergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageAllergyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriageAllergyAggregateArgs>(args: Subset<T, TriageAllergyAggregateArgs>): Prisma.PrismaPromise<GetTriageAllergyAggregateType<T>>

    /**
     * Group by TriageAllergy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageAllergyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriageAllergyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriageAllergyGroupByArgs['orderBy'] }
        : { orderBy?: TriageAllergyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriageAllergyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriageAllergyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TriageAllergy model
   */
  readonly fields: TriageAllergyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TriageAllergy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TriageAllergyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientTriage<T extends TriageAllergy$patientTriageArgs<ExtArgs> = {}>(args?: Subset<T, TriageAllergy$patientTriageArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    allergy<T extends TriageAllergy$allergyArgs<ExtArgs> = {}>(args?: Subset<T, TriageAllergy$allergyArgs<ExtArgs>>): Prisma__AllergyClient<$Result.GetResult<Prisma.$AllergyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TriageAllergy model
   */ 
  interface TriageAllergyFieldRefs {
    readonly id: FieldRef<"TriageAllergy", 'Int'>
    readonly patientTriageId: FieldRef<"TriageAllergy", 'Int'>
    readonly allergyId: FieldRef<"TriageAllergy", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TriageAllergy findUnique
   */
  export type TriageAllergyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    /**
     * Filter, which TriageAllergy to fetch.
     */
    where: TriageAllergyWhereUniqueInput
  }

  /**
   * TriageAllergy findUniqueOrThrow
   */
  export type TriageAllergyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    /**
     * Filter, which TriageAllergy to fetch.
     */
    where: TriageAllergyWhereUniqueInput
  }

  /**
   * TriageAllergy findFirst
   */
  export type TriageAllergyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    /**
     * Filter, which TriageAllergy to fetch.
     */
    where?: TriageAllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriageAllergies to fetch.
     */
    orderBy?: TriageAllergyOrderByWithRelationInput | TriageAllergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriageAllergies.
     */
    cursor?: TriageAllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriageAllergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriageAllergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriageAllergies.
     */
    distinct?: TriageAllergyScalarFieldEnum | TriageAllergyScalarFieldEnum[]
  }

  /**
   * TriageAllergy findFirstOrThrow
   */
  export type TriageAllergyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    /**
     * Filter, which TriageAllergy to fetch.
     */
    where?: TriageAllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriageAllergies to fetch.
     */
    orderBy?: TriageAllergyOrderByWithRelationInput | TriageAllergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriageAllergies.
     */
    cursor?: TriageAllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriageAllergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriageAllergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriageAllergies.
     */
    distinct?: TriageAllergyScalarFieldEnum | TriageAllergyScalarFieldEnum[]
  }

  /**
   * TriageAllergy findMany
   */
  export type TriageAllergyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    /**
     * Filter, which TriageAllergies to fetch.
     */
    where?: TriageAllergyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriageAllergies to fetch.
     */
    orderBy?: TriageAllergyOrderByWithRelationInput | TriageAllergyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriageAllergies.
     */
    cursor?: TriageAllergyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriageAllergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriageAllergies.
     */
    skip?: number
    distinct?: TriageAllergyScalarFieldEnum | TriageAllergyScalarFieldEnum[]
  }

  /**
   * TriageAllergy create
   */
  export type TriageAllergyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    /**
     * The data needed to create a TriageAllergy.
     */
    data?: XOR<TriageAllergyCreateInput, TriageAllergyUncheckedCreateInput>
  }

  /**
   * TriageAllergy createMany
   */
  export type TriageAllergyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TriageAllergies.
     */
    data: TriageAllergyCreateManyInput | TriageAllergyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TriageAllergy createManyAndReturn
   */
  export type TriageAllergyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TriageAllergies.
     */
    data: TriageAllergyCreateManyInput | TriageAllergyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TriageAllergy update
   */
  export type TriageAllergyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    /**
     * The data needed to update a TriageAllergy.
     */
    data: XOR<TriageAllergyUpdateInput, TriageAllergyUncheckedUpdateInput>
    /**
     * Choose, which TriageAllergy to update.
     */
    where: TriageAllergyWhereUniqueInput
  }

  /**
   * TriageAllergy updateMany
   */
  export type TriageAllergyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TriageAllergies.
     */
    data: XOR<TriageAllergyUpdateManyMutationInput, TriageAllergyUncheckedUpdateManyInput>
    /**
     * Filter which TriageAllergies to update
     */
    where?: TriageAllergyWhereInput
  }

  /**
   * TriageAllergy upsert
   */
  export type TriageAllergyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    /**
     * The filter to search for the TriageAllergy to update in case it exists.
     */
    where: TriageAllergyWhereUniqueInput
    /**
     * In case the TriageAllergy found by the `where` argument doesn't exist, create a new TriageAllergy with this data.
     */
    create: XOR<TriageAllergyCreateInput, TriageAllergyUncheckedCreateInput>
    /**
     * In case the TriageAllergy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriageAllergyUpdateInput, TriageAllergyUncheckedUpdateInput>
  }

  /**
   * TriageAllergy delete
   */
  export type TriageAllergyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    /**
     * Filter which TriageAllergy to delete.
     */
    where: TriageAllergyWhereUniqueInput
  }

  /**
   * TriageAllergy deleteMany
   */
  export type TriageAllergyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TriageAllergies to delete
     */
    where?: TriageAllergyWhereInput
  }

  /**
   * TriageAllergy.patientTriage
   */
  export type TriageAllergy$patientTriageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    where?: PatientTriageWhereInput
  }

  /**
   * TriageAllergy.allergy
   */
  export type TriageAllergy$allergyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Allergy
     */
    select?: AllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllergyInclude<ExtArgs> | null
    where?: AllergyWhereInput
  }

  /**
   * TriageAllergy without action
   */
  export type TriageAllergyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
  }


  /**
   * Model Problem
   */

  export type AggregateProblem = {
    _count: ProblemCountAggregateOutputType | null
    _avg: ProblemAvgAggregateOutputType | null
    _sum: ProblemSumAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  export type ProblemAvgAggregateOutputType = {
    id: number | null
  }

  export type ProblemSumAggregateOutputType = {
    id: number | null
  }

  export type ProblemMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ProblemMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ProblemCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ProblemAvgAggregateInputType = {
    id?: true
  }

  export type ProblemSumAggregateInputType = {
    id?: true
  }

  export type ProblemMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProblemMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProblemCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ProblemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problem to aggregate.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Problems
    **/
    _count?: true | ProblemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProblemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProblemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemMaxAggregateInputType
  }

  export type GetProblemAggregateType<T extends ProblemAggregateArgs> = {
        [P in keyof T & keyof AggregateProblem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblem[P]>
      : GetScalarType<T[P], AggregateProblem[P]>
  }




  export type ProblemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemWhereInput
    orderBy?: ProblemOrderByWithAggregationInput | ProblemOrderByWithAggregationInput[]
    by: ProblemScalarFieldEnum[] | ProblemScalarFieldEnum
    having?: ProblemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemCountAggregateInputType | true
    _avg?: ProblemAvgAggregateInputType
    _sum?: ProblemSumAggregateInputType
    _min?: ProblemMinAggregateInputType
    _max?: ProblemMaxAggregateInputType
  }

  export type ProblemGroupByOutputType = {
    id: number
    name: string
    _count: ProblemCountAggregateOutputType | null
    _avg: ProblemAvgAggregateOutputType | null
    _sum: ProblemSumAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  type GetProblemGroupByPayload<T extends ProblemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemGroupByOutputType[P]>
        }
      >
    >


  export type ProblemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    TriageProblem?: boolean | Problem$TriageProblemArgs<ExtArgs>
    _count?: boolean | ProblemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problem"]>

  export type ProblemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["problem"]>

  export type ProblemSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ProblemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TriageProblem?: boolean | Problem$TriageProblemArgs<ExtArgs>
    _count?: boolean | ProblemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProblemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProblemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Problem"
    objects: {
      TriageProblem: Prisma.$TriageProblemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["problem"]>
    composites: {}
  }

  type ProblemGetPayload<S extends boolean | null | undefined | ProblemDefaultArgs> = $Result.GetResult<Prisma.$ProblemPayload, S>

  type ProblemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProblemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProblemCountAggregateInputType | true
    }

  export interface ProblemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Problem'], meta: { name: 'Problem' } }
    /**
     * Find zero or one Problem that matches the filter.
     * @param {ProblemFindUniqueArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemFindUniqueArgs>(args: SelectSubset<T, ProblemFindUniqueArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Problem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProblemFindUniqueOrThrowArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Problem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindFirstArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemFindFirstArgs>(args?: SelectSubset<T, ProblemFindFirstArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Problem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindFirstOrThrowArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Problems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Problems
     * const problems = await prisma.problem.findMany()
     * 
     * // Get first 10 Problems
     * const problems = await prisma.problem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemWithIdOnly = await prisma.problem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemFindManyArgs>(args?: SelectSubset<T, ProblemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Problem.
     * @param {ProblemCreateArgs} args - Arguments to create a Problem.
     * @example
     * // Create one Problem
     * const Problem = await prisma.problem.create({
     *   data: {
     *     // ... data to create a Problem
     *   }
     * })
     * 
     */
    create<T extends ProblemCreateArgs>(args: SelectSubset<T, ProblemCreateArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Problems.
     * @param {ProblemCreateManyArgs} args - Arguments to create many Problems.
     * @example
     * // Create many Problems
     * const problem = await prisma.problem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemCreateManyArgs>(args?: SelectSubset<T, ProblemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Problems and returns the data saved in the database.
     * @param {ProblemCreateManyAndReturnArgs} args - Arguments to create many Problems.
     * @example
     * // Create many Problems
     * const problem = await prisma.problem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Problems and only return the `id`
     * const problemWithIdOnly = await prisma.problem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Problem.
     * @param {ProblemDeleteArgs} args - Arguments to delete one Problem.
     * @example
     * // Delete one Problem
     * const Problem = await prisma.problem.delete({
     *   where: {
     *     // ... filter to delete one Problem
     *   }
     * })
     * 
     */
    delete<T extends ProblemDeleteArgs>(args: SelectSubset<T, ProblemDeleteArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Problem.
     * @param {ProblemUpdateArgs} args - Arguments to update one Problem.
     * @example
     * // Update one Problem
     * const problem = await prisma.problem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemUpdateArgs>(args: SelectSubset<T, ProblemUpdateArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Problems.
     * @param {ProblemDeleteManyArgs} args - Arguments to filter Problems to delete.
     * @example
     * // Delete a few Problems
     * const { count } = await prisma.problem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemDeleteManyArgs>(args?: SelectSubset<T, ProblemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Problems
     * const problem = await prisma.problem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemUpdateManyArgs>(args: SelectSubset<T, ProblemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Problem.
     * @param {ProblemUpsertArgs} args - Arguments to update or create a Problem.
     * @example
     * // Update or create a Problem
     * const problem = await prisma.problem.upsert({
     *   create: {
     *     // ... data to create a Problem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Problem we want to update
     *   }
     * })
     */
    upsert<T extends ProblemUpsertArgs>(args: SelectSubset<T, ProblemUpsertArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCountArgs} args - Arguments to filter Problems to count.
     * @example
     * // Count the number of Problems
     * const count = await prisma.problem.count({
     *   where: {
     *     // ... the filter for the Problems we want to count
     *   }
     * })
    **/
    count<T extends ProblemCountArgs>(
      args?: Subset<T, ProblemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemAggregateArgs>(args: Subset<T, ProblemAggregateArgs>): Prisma.PrismaPromise<GetProblemAggregateType<T>>

    /**
     * Group by Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemGroupByArgs['orderBy'] }
        : { orderBy?: ProblemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Problem model
   */
  readonly fields: ProblemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Problem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    TriageProblem<T extends Problem$TriageProblemArgs<ExtArgs> = {}>(args?: Subset<T, Problem$TriageProblemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Problem model
   */ 
  interface ProblemFieldRefs {
    readonly id: FieldRef<"Problem", 'Int'>
    readonly name: FieldRef<"Problem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Problem findUnique
   */
  export type ProblemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem findUniqueOrThrow
   */
  export type ProblemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem findFirst
   */
  export type ProblemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem findFirstOrThrow
   */
  export type ProblemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem findMany
   */
  export type ProblemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problems to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem create
   */
  export type ProblemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The data needed to create a Problem.
     */
    data: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
  }

  /**
   * Problem createMany
   */
  export type ProblemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Problems.
     */
    data: ProblemCreateManyInput | ProblemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Problem createManyAndReturn
   */
  export type ProblemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Problems.
     */
    data: ProblemCreateManyInput | ProblemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Problem update
   */
  export type ProblemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The data needed to update a Problem.
     */
    data: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
    /**
     * Choose, which Problem to update.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem updateMany
   */
  export type ProblemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Problems.
     */
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyInput>
    /**
     * Filter which Problems to update
     */
    where?: ProblemWhereInput
  }

  /**
   * Problem upsert
   */
  export type ProblemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The filter to search for the Problem to update in case it exists.
     */
    where: ProblemWhereUniqueInput
    /**
     * In case the Problem found by the `where` argument doesn't exist, create a new Problem with this data.
     */
    create: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
    /**
     * In case the Problem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
  }

  /**
   * Problem delete
   */
  export type ProblemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter which Problem to delete.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem deleteMany
   */
  export type ProblemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problems to delete
     */
    where?: ProblemWhereInput
  }

  /**
   * Problem.TriageProblem
   */
  export type Problem$TriageProblemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    where?: TriageProblemWhereInput
    orderBy?: TriageProblemOrderByWithRelationInput | TriageProblemOrderByWithRelationInput[]
    cursor?: TriageProblemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TriageProblemScalarFieldEnum | TriageProblemScalarFieldEnum[]
  }

  /**
   * Problem without action
   */
  export type ProblemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
  }


  /**
   * Model TriageProblem
   */

  export type AggregateTriageProblem = {
    _count: TriageProblemCountAggregateOutputType | null
    _avg: TriageProblemAvgAggregateOutputType | null
    _sum: TriageProblemSumAggregateOutputType | null
    _min: TriageProblemMinAggregateOutputType | null
    _max: TriageProblemMaxAggregateOutputType | null
  }

  export type TriageProblemAvgAggregateOutputType = {
    id: number | null
    patientTriageId: number | null
    problemId: number | null
  }

  export type TriageProblemSumAggregateOutputType = {
    id: number | null
    patientTriageId: number | null
    problemId: number | null
  }

  export type TriageProblemMinAggregateOutputType = {
    id: number | null
    patientTriageId: number | null
    problemId: number | null
  }

  export type TriageProblemMaxAggregateOutputType = {
    id: number | null
    patientTriageId: number | null
    problemId: number | null
  }

  export type TriageProblemCountAggregateOutputType = {
    id: number
    patientTriageId: number
    problemId: number
    _all: number
  }


  export type TriageProblemAvgAggregateInputType = {
    id?: true
    patientTriageId?: true
    problemId?: true
  }

  export type TriageProblemSumAggregateInputType = {
    id?: true
    patientTriageId?: true
    problemId?: true
  }

  export type TriageProblemMinAggregateInputType = {
    id?: true
    patientTriageId?: true
    problemId?: true
  }

  export type TriageProblemMaxAggregateInputType = {
    id?: true
    patientTriageId?: true
    problemId?: true
  }

  export type TriageProblemCountAggregateInputType = {
    id?: true
    patientTriageId?: true
    problemId?: true
    _all?: true
  }

  export type TriageProblemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TriageProblem to aggregate.
     */
    where?: TriageProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriageProblems to fetch.
     */
    orderBy?: TriageProblemOrderByWithRelationInput | TriageProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriageProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriageProblems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriageProblems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriageProblems
    **/
    _count?: true | TriageProblemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriageProblemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriageProblemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriageProblemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriageProblemMaxAggregateInputType
  }

  export type GetTriageProblemAggregateType<T extends TriageProblemAggregateArgs> = {
        [P in keyof T & keyof AggregateTriageProblem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriageProblem[P]>
      : GetScalarType<T[P], AggregateTriageProblem[P]>
  }




  export type TriageProblemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TriageProblemWhereInput
    orderBy?: TriageProblemOrderByWithAggregationInput | TriageProblemOrderByWithAggregationInput[]
    by: TriageProblemScalarFieldEnum[] | TriageProblemScalarFieldEnum
    having?: TriageProblemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriageProblemCountAggregateInputType | true
    _avg?: TriageProblemAvgAggregateInputType
    _sum?: TriageProblemSumAggregateInputType
    _min?: TriageProblemMinAggregateInputType
    _max?: TriageProblemMaxAggregateInputType
  }

  export type TriageProblemGroupByOutputType = {
    id: number
    patientTriageId: number | null
    problemId: number | null
    _count: TriageProblemCountAggregateOutputType | null
    _avg: TriageProblemAvgAggregateOutputType | null
    _sum: TriageProblemSumAggregateOutputType | null
    _min: TriageProblemMinAggregateOutputType | null
    _max: TriageProblemMaxAggregateOutputType | null
  }

  type GetTriageProblemGroupByPayload<T extends TriageProblemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TriageProblemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriageProblemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriageProblemGroupByOutputType[P]>
            : GetScalarType<T[P], TriageProblemGroupByOutputType[P]>
        }
      >
    >


  export type TriageProblemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientTriageId?: boolean
    problemId?: boolean
    patientTriage?: boolean | TriageProblem$patientTriageArgs<ExtArgs>
    problem?: boolean | TriageProblem$problemArgs<ExtArgs>
  }, ExtArgs["result"]["triageProblem"]>

  export type TriageProblemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientTriageId?: boolean
    problemId?: boolean
    patientTriage?: boolean | TriageProblem$patientTriageArgs<ExtArgs>
    problem?: boolean | TriageProblem$problemArgs<ExtArgs>
  }, ExtArgs["result"]["triageProblem"]>

  export type TriageProblemSelectScalar = {
    id?: boolean
    patientTriageId?: boolean
    problemId?: boolean
  }

  export type TriageProblemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTriage?: boolean | TriageProblem$patientTriageArgs<ExtArgs>
    problem?: boolean | TriageProblem$problemArgs<ExtArgs>
  }
  export type TriageProblemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTriage?: boolean | TriageProblem$patientTriageArgs<ExtArgs>
    problem?: boolean | TriageProblem$problemArgs<ExtArgs>
  }

  export type $TriageProblemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TriageProblem"
    objects: {
      patientTriage: Prisma.$PatientTriagePayload<ExtArgs> | null
      problem: Prisma.$ProblemPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientTriageId: number | null
      problemId: number | null
    }, ExtArgs["result"]["triageProblem"]>
    composites: {}
  }

  type TriageProblemGetPayload<S extends boolean | null | undefined | TriageProblemDefaultArgs> = $Result.GetResult<Prisma.$TriageProblemPayload, S>

  type TriageProblemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TriageProblemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TriageProblemCountAggregateInputType | true
    }

  export interface TriageProblemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TriageProblem'], meta: { name: 'TriageProblem' } }
    /**
     * Find zero or one TriageProblem that matches the filter.
     * @param {TriageProblemFindUniqueArgs} args - Arguments to find a TriageProblem
     * @example
     * // Get one TriageProblem
     * const triageProblem = await prisma.triageProblem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TriageProblemFindUniqueArgs>(args: SelectSubset<T, TriageProblemFindUniqueArgs<ExtArgs>>): Prisma__TriageProblemClient<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TriageProblem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TriageProblemFindUniqueOrThrowArgs} args - Arguments to find a TriageProblem
     * @example
     * // Get one TriageProblem
     * const triageProblem = await prisma.triageProblem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TriageProblemFindUniqueOrThrowArgs>(args: SelectSubset<T, TriageProblemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TriageProblemClient<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TriageProblem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageProblemFindFirstArgs} args - Arguments to find a TriageProblem
     * @example
     * // Get one TriageProblem
     * const triageProblem = await prisma.triageProblem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TriageProblemFindFirstArgs>(args?: SelectSubset<T, TriageProblemFindFirstArgs<ExtArgs>>): Prisma__TriageProblemClient<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TriageProblem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageProblemFindFirstOrThrowArgs} args - Arguments to find a TriageProblem
     * @example
     * // Get one TriageProblem
     * const triageProblem = await prisma.triageProblem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TriageProblemFindFirstOrThrowArgs>(args?: SelectSubset<T, TriageProblemFindFirstOrThrowArgs<ExtArgs>>): Prisma__TriageProblemClient<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TriageProblems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageProblemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriageProblems
     * const triageProblems = await prisma.triageProblem.findMany()
     * 
     * // Get first 10 TriageProblems
     * const triageProblems = await prisma.triageProblem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triageProblemWithIdOnly = await prisma.triageProblem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TriageProblemFindManyArgs>(args?: SelectSubset<T, TriageProblemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TriageProblem.
     * @param {TriageProblemCreateArgs} args - Arguments to create a TriageProblem.
     * @example
     * // Create one TriageProblem
     * const TriageProblem = await prisma.triageProblem.create({
     *   data: {
     *     // ... data to create a TriageProblem
     *   }
     * })
     * 
     */
    create<T extends TriageProblemCreateArgs>(args: SelectSubset<T, TriageProblemCreateArgs<ExtArgs>>): Prisma__TriageProblemClient<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TriageProblems.
     * @param {TriageProblemCreateManyArgs} args - Arguments to create many TriageProblems.
     * @example
     * // Create many TriageProblems
     * const triageProblem = await prisma.triageProblem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TriageProblemCreateManyArgs>(args?: SelectSubset<T, TriageProblemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TriageProblems and returns the data saved in the database.
     * @param {TriageProblemCreateManyAndReturnArgs} args - Arguments to create many TriageProblems.
     * @example
     * // Create many TriageProblems
     * const triageProblem = await prisma.triageProblem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TriageProblems and only return the `id`
     * const triageProblemWithIdOnly = await prisma.triageProblem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TriageProblemCreateManyAndReturnArgs>(args?: SelectSubset<T, TriageProblemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TriageProblem.
     * @param {TriageProblemDeleteArgs} args - Arguments to delete one TriageProblem.
     * @example
     * // Delete one TriageProblem
     * const TriageProblem = await prisma.triageProblem.delete({
     *   where: {
     *     // ... filter to delete one TriageProblem
     *   }
     * })
     * 
     */
    delete<T extends TriageProblemDeleteArgs>(args: SelectSubset<T, TriageProblemDeleteArgs<ExtArgs>>): Prisma__TriageProblemClient<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TriageProblem.
     * @param {TriageProblemUpdateArgs} args - Arguments to update one TriageProblem.
     * @example
     * // Update one TriageProblem
     * const triageProblem = await prisma.triageProblem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TriageProblemUpdateArgs>(args: SelectSubset<T, TriageProblemUpdateArgs<ExtArgs>>): Prisma__TriageProblemClient<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TriageProblems.
     * @param {TriageProblemDeleteManyArgs} args - Arguments to filter TriageProblems to delete.
     * @example
     * // Delete a few TriageProblems
     * const { count } = await prisma.triageProblem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TriageProblemDeleteManyArgs>(args?: SelectSubset<T, TriageProblemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriageProblems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageProblemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriageProblems
     * const triageProblem = await prisma.triageProblem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TriageProblemUpdateManyArgs>(args: SelectSubset<T, TriageProblemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriageProblem.
     * @param {TriageProblemUpsertArgs} args - Arguments to update or create a TriageProblem.
     * @example
     * // Update or create a TriageProblem
     * const triageProblem = await prisma.triageProblem.upsert({
     *   create: {
     *     // ... data to create a TriageProblem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriageProblem we want to update
     *   }
     * })
     */
    upsert<T extends TriageProblemUpsertArgs>(args: SelectSubset<T, TriageProblemUpsertArgs<ExtArgs>>): Prisma__TriageProblemClient<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TriageProblems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageProblemCountArgs} args - Arguments to filter TriageProblems to count.
     * @example
     * // Count the number of TriageProblems
     * const count = await prisma.triageProblem.count({
     *   where: {
     *     // ... the filter for the TriageProblems we want to count
     *   }
     * })
    **/
    count<T extends TriageProblemCountArgs>(
      args?: Subset<T, TriageProblemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriageProblemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriageProblem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageProblemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriageProblemAggregateArgs>(args: Subset<T, TriageProblemAggregateArgs>): Prisma.PrismaPromise<GetTriageProblemAggregateType<T>>

    /**
     * Group by TriageProblem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriageProblemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriageProblemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriageProblemGroupByArgs['orderBy'] }
        : { orderBy?: TriageProblemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriageProblemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriageProblemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TriageProblem model
   */
  readonly fields: TriageProblemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TriageProblem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TriageProblemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientTriage<T extends TriageProblem$patientTriageArgs<ExtArgs> = {}>(args?: Subset<T, TriageProblem$patientTriageArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    problem<T extends TriageProblem$problemArgs<ExtArgs> = {}>(args?: Subset<T, TriageProblem$problemArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TriageProblem model
   */ 
  interface TriageProblemFieldRefs {
    readonly id: FieldRef<"TriageProblem", 'Int'>
    readonly patientTriageId: FieldRef<"TriageProblem", 'Int'>
    readonly problemId: FieldRef<"TriageProblem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TriageProblem findUnique
   */
  export type TriageProblemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    /**
     * Filter, which TriageProblem to fetch.
     */
    where: TriageProblemWhereUniqueInput
  }

  /**
   * TriageProblem findUniqueOrThrow
   */
  export type TriageProblemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    /**
     * Filter, which TriageProblem to fetch.
     */
    where: TriageProblemWhereUniqueInput
  }

  /**
   * TriageProblem findFirst
   */
  export type TriageProblemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    /**
     * Filter, which TriageProblem to fetch.
     */
    where?: TriageProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriageProblems to fetch.
     */
    orderBy?: TriageProblemOrderByWithRelationInput | TriageProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriageProblems.
     */
    cursor?: TriageProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriageProblems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriageProblems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriageProblems.
     */
    distinct?: TriageProblemScalarFieldEnum | TriageProblemScalarFieldEnum[]
  }

  /**
   * TriageProblem findFirstOrThrow
   */
  export type TriageProblemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    /**
     * Filter, which TriageProblem to fetch.
     */
    where?: TriageProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriageProblems to fetch.
     */
    orderBy?: TriageProblemOrderByWithRelationInput | TriageProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriageProblems.
     */
    cursor?: TriageProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriageProblems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriageProblems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriageProblems.
     */
    distinct?: TriageProblemScalarFieldEnum | TriageProblemScalarFieldEnum[]
  }

  /**
   * TriageProblem findMany
   */
  export type TriageProblemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    /**
     * Filter, which TriageProblems to fetch.
     */
    where?: TriageProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriageProblems to fetch.
     */
    orderBy?: TriageProblemOrderByWithRelationInput | TriageProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriageProblems.
     */
    cursor?: TriageProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriageProblems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriageProblems.
     */
    skip?: number
    distinct?: TriageProblemScalarFieldEnum | TriageProblemScalarFieldEnum[]
  }

  /**
   * TriageProblem create
   */
  export type TriageProblemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    /**
     * The data needed to create a TriageProblem.
     */
    data?: XOR<TriageProblemCreateInput, TriageProblemUncheckedCreateInput>
  }

  /**
   * TriageProblem createMany
   */
  export type TriageProblemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TriageProblems.
     */
    data: TriageProblemCreateManyInput | TriageProblemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TriageProblem createManyAndReturn
   */
  export type TriageProblemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TriageProblems.
     */
    data: TriageProblemCreateManyInput | TriageProblemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TriageProblem update
   */
  export type TriageProblemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    /**
     * The data needed to update a TriageProblem.
     */
    data: XOR<TriageProblemUpdateInput, TriageProblemUncheckedUpdateInput>
    /**
     * Choose, which TriageProblem to update.
     */
    where: TriageProblemWhereUniqueInput
  }

  /**
   * TriageProblem updateMany
   */
  export type TriageProblemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TriageProblems.
     */
    data: XOR<TriageProblemUpdateManyMutationInput, TriageProblemUncheckedUpdateManyInput>
    /**
     * Filter which TriageProblems to update
     */
    where?: TriageProblemWhereInput
  }

  /**
   * TriageProblem upsert
   */
  export type TriageProblemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    /**
     * The filter to search for the TriageProblem to update in case it exists.
     */
    where: TriageProblemWhereUniqueInput
    /**
     * In case the TriageProblem found by the `where` argument doesn't exist, create a new TriageProblem with this data.
     */
    create: XOR<TriageProblemCreateInput, TriageProblemUncheckedCreateInput>
    /**
     * In case the TriageProblem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriageProblemUpdateInput, TriageProblemUncheckedUpdateInput>
  }

  /**
   * TriageProblem delete
   */
  export type TriageProblemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    /**
     * Filter which TriageProblem to delete.
     */
    where: TriageProblemWhereUniqueInput
  }

  /**
   * TriageProblem deleteMany
   */
  export type TriageProblemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TriageProblems to delete
     */
    where?: TriageProblemWhereInput
  }

  /**
   * TriageProblem.patientTriage
   */
  export type TriageProblem$patientTriageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    where?: PatientTriageWhereInput
  }

  /**
   * TriageProblem.problem
   */
  export type TriageProblem$problemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    where?: ProblemWhereInput
  }

  /**
   * TriageProblem without action
   */
  export type TriageProblemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
  }


  /**
   * Model PatientTriage
   */

  export type AggregatePatientTriage = {
    _count: PatientTriageCountAggregateOutputType | null
    _avg: PatientTriageAvgAggregateOutputType | null
    _sum: PatientTriageSumAggregateOutputType | null
    _min: PatientTriageMinAggregateOutputType | null
    _max: PatientTriageMaxAggregateOutputType | null
  }

  export type PatientTriageAvgAggregateOutputType = {
    id: number | null
    painScale: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientTriageSumAggregateOutputType = {
    id: number | null
    painScale: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientTriageMinAggregateOutputType = {
    id: number | null
    status: string | null
    priority: string | null
    immunizationUpToDate: string | null
    immunizationRemarks: string | null
    allergenHistory: string | null
    systolic: string | null
    diastolic: string | null
    temperature: string | null
    height: string | null
    weight: string | null
    spO2: string | null
    bmi: string | null
    pulse: string | null
    pastMedicalHistory: string | null
    familyHistory: string | null
    socialHistory: string | null
    surgicalHistory: string | null
    creams: string | null
    nurseAssessment: string | null
    medications: string | null
    otherNotes: string | null
    created_at: Date | null
    updated_at: Date | null
    painScale: number | null
    currentHistory: string | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientTriageMaxAggregateOutputType = {
    id: number | null
    status: string | null
    priority: string | null
    immunizationUpToDate: string | null
    immunizationRemarks: string | null
    allergenHistory: string | null
    systolic: string | null
    diastolic: string | null
    temperature: string | null
    height: string | null
    weight: string | null
    spO2: string | null
    bmi: string | null
    pulse: string | null
    pastMedicalHistory: string | null
    familyHistory: string | null
    socialHistory: string | null
    surgicalHistory: string | null
    creams: string | null
    nurseAssessment: string | null
    medications: string | null
    otherNotes: string | null
    created_at: Date | null
    updated_at: Date | null
    painScale: number | null
    currentHistory: string | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientTriageCountAggregateOutputType = {
    id: number
    status: number
    priority: number
    immunizationUpToDate: number
    immunizationRemarks: number
    allergenHistory: number
    systolic: number
    diastolic: number
    temperature: number
    height: number
    weight: number
    spO2: number
    bmi: number
    pulse: number
    pastMedicalHistory: number
    familyHistory: number
    socialHistory: number
    surgicalHistory: number
    creams: number
    nurseAssessment: number
    medications: number
    otherNotes: number
    created_at: number
    updated_at: number
    painScale: number
    currentHistory: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PatientTriageAvgAggregateInputType = {
    id?: true
    painScale?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientTriageSumAggregateInputType = {
    id?: true
    painScale?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientTriageMinAggregateInputType = {
    id?: true
    status?: true
    priority?: true
    immunizationUpToDate?: true
    immunizationRemarks?: true
    allergenHistory?: true
    systolic?: true
    diastolic?: true
    temperature?: true
    height?: true
    weight?: true
    spO2?: true
    bmi?: true
    pulse?: true
    pastMedicalHistory?: true
    familyHistory?: true
    socialHistory?: true
    surgicalHistory?: true
    creams?: true
    nurseAssessment?: true
    medications?: true
    otherNotes?: true
    created_at?: true
    updated_at?: true
    painScale?: true
    currentHistory?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientTriageMaxAggregateInputType = {
    id?: true
    status?: true
    priority?: true
    immunizationUpToDate?: true
    immunizationRemarks?: true
    allergenHistory?: true
    systolic?: true
    diastolic?: true
    temperature?: true
    height?: true
    weight?: true
    spO2?: true
    bmi?: true
    pulse?: true
    pastMedicalHistory?: true
    familyHistory?: true
    socialHistory?: true
    surgicalHistory?: true
    creams?: true
    nurseAssessment?: true
    medications?: true
    otherNotes?: true
    created_at?: true
    updated_at?: true
    painScale?: true
    currentHistory?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientTriageCountAggregateInputType = {
    id?: true
    status?: true
    priority?: true
    immunizationUpToDate?: true
    immunizationRemarks?: true
    allergenHistory?: true
    systolic?: true
    diastolic?: true
    temperature?: true
    height?: true
    weight?: true
    spO2?: true
    bmi?: true
    pulse?: true
    pastMedicalHistory?: true
    familyHistory?: true
    socialHistory?: true
    surgicalHistory?: true
    creams?: true
    nurseAssessment?: true
    medications?: true
    otherNotes?: true
    created_at?: true
    updated_at?: true
    painScale?: true
    currentHistory?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PatientTriageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientTriage to aggregate.
     */
    where?: PatientTriageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTriages to fetch.
     */
    orderBy?: PatientTriageOrderByWithRelationInput | PatientTriageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientTriageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTriages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTriages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientTriages
    **/
    _count?: true | PatientTriageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientTriageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientTriageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientTriageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientTriageMaxAggregateInputType
  }

  export type GetPatientTriageAggregateType<T extends PatientTriageAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientTriage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientTriage[P]>
      : GetScalarType<T[P], AggregatePatientTriage[P]>
  }




  export type PatientTriageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTriageWhereInput
    orderBy?: PatientTriageOrderByWithAggregationInput | PatientTriageOrderByWithAggregationInput[]
    by: PatientTriageScalarFieldEnum[] | PatientTriageScalarFieldEnum
    having?: PatientTriageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientTriageCountAggregateInputType | true
    _avg?: PatientTriageAvgAggregateInputType
    _sum?: PatientTriageSumAggregateInputType
    _min?: PatientTriageMinAggregateInputType
    _max?: PatientTriageMaxAggregateInputType
  }

  export type PatientTriageGroupByOutputType = {
    id: number
    status: string | null
    priority: string | null
    immunizationUpToDate: string | null
    immunizationRemarks: string | null
    allergenHistory: string | null
    systolic: string | null
    diastolic: string | null
    temperature: string | null
    height: string | null
    weight: string | null
    spO2: string | null
    bmi: string | null
    pulse: string | null
    pastMedicalHistory: string | null
    familyHistory: string | null
    socialHistory: string | null
    surgicalHistory: string | null
    creams: string | null
    nurseAssessment: string | null
    medications: string | null
    otherNotes: string | null
    created_at: Date
    updated_at: Date
    painScale: number | null
    currentHistory: string | null
    createdById: number
    updatedById: number
    _count: PatientTriageCountAggregateOutputType | null
    _avg: PatientTriageAvgAggregateOutputType | null
    _sum: PatientTriageSumAggregateOutputType | null
    _min: PatientTriageMinAggregateOutputType | null
    _max: PatientTriageMaxAggregateOutputType | null
  }

  type GetPatientTriageGroupByPayload<T extends PatientTriageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientTriageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientTriageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientTriageGroupByOutputType[P]>
            : GetScalarType<T[P], PatientTriageGroupByOutputType[P]>
        }
      >
    >


  export type PatientTriageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    priority?: boolean
    immunizationUpToDate?: boolean
    immunizationRemarks?: boolean
    allergenHistory?: boolean
    systolic?: boolean
    diastolic?: boolean
    temperature?: boolean
    height?: boolean
    weight?: boolean
    spO2?: boolean
    bmi?: boolean
    pulse?: boolean
    pastMedicalHistory?: boolean
    familyHistory?: boolean
    socialHistory?: boolean
    surgicalHistory?: boolean
    creams?: boolean
    nurseAssessment?: boolean
    medications?: boolean
    otherNotes?: boolean
    created_at?: boolean
    updated_at?: boolean
    painScale?: boolean
    currentHistory?: boolean
    createdById?: boolean
    updatedById?: boolean
    problems?: boolean | PatientTriage$problemsArgs<ExtArgs>
    allergies?: boolean | PatientTriage$allergiesArgs<ExtArgs>
    consultations?: boolean | PatientTriage$consultationsArgs<ExtArgs>
    notes?: boolean | PatientTriage$notesArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | PatientTriageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientTriage"]>

  export type PatientTriageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    priority?: boolean
    immunizationUpToDate?: boolean
    immunizationRemarks?: boolean
    allergenHistory?: boolean
    systolic?: boolean
    diastolic?: boolean
    temperature?: boolean
    height?: boolean
    weight?: boolean
    spO2?: boolean
    bmi?: boolean
    pulse?: boolean
    pastMedicalHistory?: boolean
    familyHistory?: boolean
    socialHistory?: boolean
    surgicalHistory?: boolean
    creams?: boolean
    nurseAssessment?: boolean
    medications?: boolean
    otherNotes?: boolean
    created_at?: boolean
    updated_at?: boolean
    painScale?: boolean
    currentHistory?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientTriage"]>

  export type PatientTriageSelectScalar = {
    id?: boolean
    status?: boolean
    priority?: boolean
    immunizationUpToDate?: boolean
    immunizationRemarks?: boolean
    allergenHistory?: boolean
    systolic?: boolean
    diastolic?: boolean
    temperature?: boolean
    height?: boolean
    weight?: boolean
    spO2?: boolean
    bmi?: boolean
    pulse?: boolean
    pastMedicalHistory?: boolean
    familyHistory?: boolean
    socialHistory?: boolean
    surgicalHistory?: boolean
    creams?: boolean
    nurseAssessment?: boolean
    medications?: boolean
    otherNotes?: boolean
    created_at?: boolean
    updated_at?: boolean
    painScale?: boolean
    currentHistory?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PatientTriageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problems?: boolean | PatientTriage$problemsArgs<ExtArgs>
    allergies?: boolean | PatientTriage$allergiesArgs<ExtArgs>
    consultations?: boolean | PatientTriage$consultationsArgs<ExtArgs>
    notes?: boolean | PatientTriage$notesArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | PatientTriageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientTriageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PatientTriagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientTriage"
    objects: {
      problems: Prisma.$TriageProblemPayload<ExtArgs>[]
      allergies: Prisma.$TriageAllergyPayload<ExtArgs>[]
      consultations: Prisma.$ConsultationsPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: string | null
      priority: string | null
      immunizationUpToDate: string | null
      immunizationRemarks: string | null
      allergenHistory: string | null
      systolic: string | null
      diastolic: string | null
      temperature: string | null
      height: string | null
      weight: string | null
      spO2: string | null
      bmi: string | null
      pulse: string | null
      pastMedicalHistory: string | null
      familyHistory: string | null
      socialHistory: string | null
      surgicalHistory: string | null
      creams: string | null
      nurseAssessment: string | null
      medications: string | null
      otherNotes: string | null
      created_at: Date
      updated_at: Date
      painScale: number | null
      currentHistory: string | null
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["patientTriage"]>
    composites: {}
  }

  type PatientTriageGetPayload<S extends boolean | null | undefined | PatientTriageDefaultArgs> = $Result.GetResult<Prisma.$PatientTriagePayload, S>

  type PatientTriageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientTriageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientTriageCountAggregateInputType | true
    }

  export interface PatientTriageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientTriage'], meta: { name: 'PatientTriage' } }
    /**
     * Find zero or one PatientTriage that matches the filter.
     * @param {PatientTriageFindUniqueArgs} args - Arguments to find a PatientTriage
     * @example
     * // Get one PatientTriage
     * const patientTriage = await prisma.patientTriage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientTriageFindUniqueArgs>(args: SelectSubset<T, PatientTriageFindUniqueArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatientTriage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientTriageFindUniqueOrThrowArgs} args - Arguments to find a PatientTriage
     * @example
     * // Get one PatientTriage
     * const patientTriage = await prisma.patientTriage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientTriageFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientTriageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatientTriage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTriageFindFirstArgs} args - Arguments to find a PatientTriage
     * @example
     * // Get one PatientTriage
     * const patientTriage = await prisma.patientTriage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientTriageFindFirstArgs>(args?: SelectSubset<T, PatientTriageFindFirstArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatientTriage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTriageFindFirstOrThrowArgs} args - Arguments to find a PatientTriage
     * @example
     * // Get one PatientTriage
     * const patientTriage = await prisma.patientTriage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientTriageFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientTriageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatientTriages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTriageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientTriages
     * const patientTriages = await prisma.patientTriage.findMany()
     * 
     * // Get first 10 PatientTriages
     * const patientTriages = await prisma.patientTriage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientTriageWithIdOnly = await prisma.patientTriage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientTriageFindManyArgs>(args?: SelectSubset<T, PatientTriageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatientTriage.
     * @param {PatientTriageCreateArgs} args - Arguments to create a PatientTriage.
     * @example
     * // Create one PatientTriage
     * const PatientTriage = await prisma.patientTriage.create({
     *   data: {
     *     // ... data to create a PatientTriage
     *   }
     * })
     * 
     */
    create<T extends PatientTriageCreateArgs>(args: SelectSubset<T, PatientTriageCreateArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatientTriages.
     * @param {PatientTriageCreateManyArgs} args - Arguments to create many PatientTriages.
     * @example
     * // Create many PatientTriages
     * const patientTriage = await prisma.patientTriage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientTriageCreateManyArgs>(args?: SelectSubset<T, PatientTriageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientTriages and returns the data saved in the database.
     * @param {PatientTriageCreateManyAndReturnArgs} args - Arguments to create many PatientTriages.
     * @example
     * // Create many PatientTriages
     * const patientTriage = await prisma.patientTriage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientTriages and only return the `id`
     * const patientTriageWithIdOnly = await prisma.patientTriage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientTriageCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientTriageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatientTriage.
     * @param {PatientTriageDeleteArgs} args - Arguments to delete one PatientTriage.
     * @example
     * // Delete one PatientTriage
     * const PatientTriage = await prisma.patientTriage.delete({
     *   where: {
     *     // ... filter to delete one PatientTriage
     *   }
     * })
     * 
     */
    delete<T extends PatientTriageDeleteArgs>(args: SelectSubset<T, PatientTriageDeleteArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatientTriage.
     * @param {PatientTriageUpdateArgs} args - Arguments to update one PatientTriage.
     * @example
     * // Update one PatientTriage
     * const patientTriage = await prisma.patientTriage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientTriageUpdateArgs>(args: SelectSubset<T, PatientTriageUpdateArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatientTriages.
     * @param {PatientTriageDeleteManyArgs} args - Arguments to filter PatientTriages to delete.
     * @example
     * // Delete a few PatientTriages
     * const { count } = await prisma.patientTriage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientTriageDeleteManyArgs>(args?: SelectSubset<T, PatientTriageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientTriages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTriageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientTriages
     * const patientTriage = await prisma.patientTriage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientTriageUpdateManyArgs>(args: SelectSubset<T, PatientTriageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientTriage.
     * @param {PatientTriageUpsertArgs} args - Arguments to update or create a PatientTriage.
     * @example
     * // Update or create a PatientTriage
     * const patientTriage = await prisma.patientTriage.upsert({
     *   create: {
     *     // ... data to create a PatientTriage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientTriage we want to update
     *   }
     * })
     */
    upsert<T extends PatientTriageUpsertArgs>(args: SelectSubset<T, PatientTriageUpsertArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatientTriages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTriageCountArgs} args - Arguments to filter PatientTriages to count.
     * @example
     * // Count the number of PatientTriages
     * const count = await prisma.patientTriage.count({
     *   where: {
     *     // ... the filter for the PatientTriages we want to count
     *   }
     * })
    **/
    count<T extends PatientTriageCountArgs>(
      args?: Subset<T, PatientTriageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientTriageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientTriage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTriageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientTriageAggregateArgs>(args: Subset<T, PatientTriageAggregateArgs>): Prisma.PrismaPromise<GetPatientTriageAggregateType<T>>

    /**
     * Group by PatientTriage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTriageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientTriageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientTriageGroupByArgs['orderBy'] }
        : { orderBy?: PatientTriageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientTriageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientTriageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientTriage model
   */
  readonly fields: PatientTriageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientTriage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientTriageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problems<T extends PatientTriage$problemsArgs<ExtArgs> = {}>(args?: Subset<T, PatientTriage$problemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriageProblemPayload<ExtArgs>, T, "findMany"> | Null>
    allergies<T extends PatientTriage$allergiesArgs<ExtArgs> = {}>(args?: Subset<T, PatientTriage$allergiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TriageAllergyPayload<ExtArgs>, T, "findMany"> | Null>
    consultations<T extends PatientTriage$consultationsArgs<ExtArgs> = {}>(args?: Subset<T, PatientTriage$consultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findMany"> | Null>
    notes<T extends PatientTriage$notesArgs<ExtArgs> = {}>(args?: Subset<T, PatientTriage$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientTriage model
   */ 
  interface PatientTriageFieldRefs {
    readonly id: FieldRef<"PatientTriage", 'Int'>
    readonly status: FieldRef<"PatientTriage", 'String'>
    readonly priority: FieldRef<"PatientTriage", 'String'>
    readonly immunizationUpToDate: FieldRef<"PatientTriage", 'String'>
    readonly immunizationRemarks: FieldRef<"PatientTriage", 'String'>
    readonly allergenHistory: FieldRef<"PatientTriage", 'String'>
    readonly systolic: FieldRef<"PatientTriage", 'String'>
    readonly diastolic: FieldRef<"PatientTriage", 'String'>
    readonly temperature: FieldRef<"PatientTriage", 'String'>
    readonly height: FieldRef<"PatientTriage", 'String'>
    readonly weight: FieldRef<"PatientTriage", 'String'>
    readonly spO2: FieldRef<"PatientTriage", 'String'>
    readonly bmi: FieldRef<"PatientTriage", 'String'>
    readonly pulse: FieldRef<"PatientTriage", 'String'>
    readonly pastMedicalHistory: FieldRef<"PatientTriage", 'String'>
    readonly familyHistory: FieldRef<"PatientTriage", 'String'>
    readonly socialHistory: FieldRef<"PatientTriage", 'String'>
    readonly surgicalHistory: FieldRef<"PatientTriage", 'String'>
    readonly creams: FieldRef<"PatientTriage", 'String'>
    readonly nurseAssessment: FieldRef<"PatientTriage", 'String'>
    readonly medications: FieldRef<"PatientTriage", 'String'>
    readonly otherNotes: FieldRef<"PatientTriage", 'String'>
    readonly created_at: FieldRef<"PatientTriage", 'DateTime'>
    readonly updated_at: FieldRef<"PatientTriage", 'DateTime'>
    readonly painScale: FieldRef<"PatientTriage", 'Int'>
    readonly currentHistory: FieldRef<"PatientTriage", 'String'>
    readonly createdById: FieldRef<"PatientTriage", 'Int'>
    readonly updatedById: FieldRef<"PatientTriage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatientTriage findUnique
   */
  export type PatientTriageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    /**
     * Filter, which PatientTriage to fetch.
     */
    where: PatientTriageWhereUniqueInput
  }

  /**
   * PatientTriage findUniqueOrThrow
   */
  export type PatientTriageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    /**
     * Filter, which PatientTriage to fetch.
     */
    where: PatientTriageWhereUniqueInput
  }

  /**
   * PatientTriage findFirst
   */
  export type PatientTriageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    /**
     * Filter, which PatientTriage to fetch.
     */
    where?: PatientTriageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTriages to fetch.
     */
    orderBy?: PatientTriageOrderByWithRelationInput | PatientTriageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientTriages.
     */
    cursor?: PatientTriageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTriages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTriages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientTriages.
     */
    distinct?: PatientTriageScalarFieldEnum | PatientTriageScalarFieldEnum[]
  }

  /**
   * PatientTriage findFirstOrThrow
   */
  export type PatientTriageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    /**
     * Filter, which PatientTriage to fetch.
     */
    where?: PatientTriageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTriages to fetch.
     */
    orderBy?: PatientTriageOrderByWithRelationInput | PatientTriageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientTriages.
     */
    cursor?: PatientTriageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTriages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTriages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientTriages.
     */
    distinct?: PatientTriageScalarFieldEnum | PatientTriageScalarFieldEnum[]
  }

  /**
   * PatientTriage findMany
   */
  export type PatientTriageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    /**
     * Filter, which PatientTriages to fetch.
     */
    where?: PatientTriageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTriages to fetch.
     */
    orderBy?: PatientTriageOrderByWithRelationInput | PatientTriageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientTriages.
     */
    cursor?: PatientTriageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTriages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTriages.
     */
    skip?: number
    distinct?: PatientTriageScalarFieldEnum | PatientTriageScalarFieldEnum[]
  }

  /**
   * PatientTriage create
   */
  export type PatientTriageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientTriage.
     */
    data: XOR<PatientTriageCreateInput, PatientTriageUncheckedCreateInput>
  }

  /**
   * PatientTriage createMany
   */
  export type PatientTriageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientTriages.
     */
    data: PatientTriageCreateManyInput | PatientTriageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientTriage createManyAndReturn
   */
  export type PatientTriageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatientTriages.
     */
    data: PatientTriageCreateManyInput | PatientTriageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientTriage update
   */
  export type PatientTriageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientTriage.
     */
    data: XOR<PatientTriageUpdateInput, PatientTriageUncheckedUpdateInput>
    /**
     * Choose, which PatientTriage to update.
     */
    where: PatientTriageWhereUniqueInput
  }

  /**
   * PatientTriage updateMany
   */
  export type PatientTriageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientTriages.
     */
    data: XOR<PatientTriageUpdateManyMutationInput, PatientTriageUncheckedUpdateManyInput>
    /**
     * Filter which PatientTriages to update
     */
    where?: PatientTriageWhereInput
  }

  /**
   * PatientTriage upsert
   */
  export type PatientTriageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientTriage to update in case it exists.
     */
    where: PatientTriageWhereUniqueInput
    /**
     * In case the PatientTriage found by the `where` argument doesn't exist, create a new PatientTriage with this data.
     */
    create: XOR<PatientTriageCreateInput, PatientTriageUncheckedCreateInput>
    /**
     * In case the PatientTriage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientTriageUpdateInput, PatientTriageUncheckedUpdateInput>
  }

  /**
   * PatientTriage delete
   */
  export type PatientTriageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    /**
     * Filter which PatientTriage to delete.
     */
    where: PatientTriageWhereUniqueInput
  }

  /**
   * PatientTriage deleteMany
   */
  export type PatientTriageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientTriages to delete
     */
    where?: PatientTriageWhereInput
  }

  /**
   * PatientTriage.problems
   */
  export type PatientTriage$problemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageProblem
     */
    select?: TriageProblemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageProblemInclude<ExtArgs> | null
    where?: TriageProblemWhereInput
    orderBy?: TriageProblemOrderByWithRelationInput | TriageProblemOrderByWithRelationInput[]
    cursor?: TriageProblemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TriageProblemScalarFieldEnum | TriageProblemScalarFieldEnum[]
  }

  /**
   * PatientTriage.allergies
   */
  export type PatientTriage$allergiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TriageAllergy
     */
    select?: TriageAllergySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TriageAllergyInclude<ExtArgs> | null
    where?: TriageAllergyWhereInput
    orderBy?: TriageAllergyOrderByWithRelationInput | TriageAllergyOrderByWithRelationInput[]
    cursor?: TriageAllergyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TriageAllergyScalarFieldEnum | TriageAllergyScalarFieldEnum[]
  }

  /**
   * PatientTriage.consultations
   */
  export type PatientTriage$consultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    where?: ConsultationsWhereInput
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    cursor?: ConsultationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationsScalarFieldEnum | ConsultationsScalarFieldEnum[]
  }

  /**
   * PatientTriage.notes
   */
  export type PatientTriage$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * PatientTriage without action
   */
  export type PatientTriageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
  }


  /**
   * Model PatientAssessment
   */

  export type AggregatePatientAssessment = {
    _count: PatientAssessmentCountAggregateOutputType | null
    _avg: PatientAssessmentAvgAggregateOutputType | null
    _sum: PatientAssessmentSumAggregateOutputType | null
    _min: PatientAssessmentMinAggregateOutputType | null
    _max: PatientAssessmentMaxAggregateOutputType | null
  }

  export type PatientAssessmentAvgAggregateOutputType = {
    id: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientAssessmentSumAggregateOutputType = {
    id: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientAssessmentMinAggregateOutputType = {
    id: number | null
    visitType: string | null
    consultationType: string | null
    status: string | null
    createdAt: Date | null
    complaints: string | null
    facial_dermapen_prp: string | null
    instructions: string | null
    laser_q_note: string | null
    prescription: string | null
    provider_notes: string | null
    recommendations: string | null
    slimming_note: string | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientAssessmentMaxAggregateOutputType = {
    id: number | null
    visitType: string | null
    consultationType: string | null
    status: string | null
    createdAt: Date | null
    complaints: string | null
    facial_dermapen_prp: string | null
    instructions: string | null
    laser_q_note: string | null
    prescription: string | null
    provider_notes: string | null
    recommendations: string | null
    slimming_note: string | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientAssessmentCountAggregateOutputType = {
    id: number
    visitType: number
    consultationType: number
    status: number
    createdAt: number
    complaints: number
    facial_dermapen_prp: number
    instructions: number
    laser_q_note: number
    prescription: number
    provider_notes: number
    recommendations: number
    slimming_note: number
    images: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PatientAssessmentAvgAggregateInputType = {
    id?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientAssessmentSumAggregateInputType = {
    id?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientAssessmentMinAggregateInputType = {
    id?: true
    visitType?: true
    consultationType?: true
    status?: true
    createdAt?: true
    complaints?: true
    facial_dermapen_prp?: true
    instructions?: true
    laser_q_note?: true
    prescription?: true
    provider_notes?: true
    recommendations?: true
    slimming_note?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientAssessmentMaxAggregateInputType = {
    id?: true
    visitType?: true
    consultationType?: true
    status?: true
    createdAt?: true
    complaints?: true
    facial_dermapen_prp?: true
    instructions?: true
    laser_q_note?: true
    prescription?: true
    provider_notes?: true
    recommendations?: true
    slimming_note?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientAssessmentCountAggregateInputType = {
    id?: true
    visitType?: true
    consultationType?: true
    status?: true
    createdAt?: true
    complaints?: true
    facial_dermapen_prp?: true
    instructions?: true
    laser_q_note?: true
    prescription?: true
    provider_notes?: true
    recommendations?: true
    slimming_note?: true
    images?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PatientAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientAssessment to aggregate.
     */
    where?: PatientAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientAssessments to fetch.
     */
    orderBy?: PatientAssessmentOrderByWithRelationInput | PatientAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientAssessments
    **/
    _count?: true | PatientAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientAssessmentMaxAggregateInputType
  }

  export type GetPatientAssessmentAggregateType<T extends PatientAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientAssessment[P]>
      : GetScalarType<T[P], AggregatePatientAssessment[P]>
  }




  export type PatientAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientAssessmentWhereInput
    orderBy?: PatientAssessmentOrderByWithAggregationInput | PatientAssessmentOrderByWithAggregationInput[]
    by: PatientAssessmentScalarFieldEnum[] | PatientAssessmentScalarFieldEnum
    having?: PatientAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientAssessmentCountAggregateInputType | true
    _avg?: PatientAssessmentAvgAggregateInputType
    _sum?: PatientAssessmentSumAggregateInputType
    _min?: PatientAssessmentMinAggregateInputType
    _max?: PatientAssessmentMaxAggregateInputType
  }

  export type PatientAssessmentGroupByOutputType = {
    id: number
    visitType: string | null
    consultationType: string | null
    status: string | null
    createdAt: Date
    complaints: string | null
    facial_dermapen_prp: string | null
    instructions: string | null
    laser_q_note: string | null
    prescription: string | null
    provider_notes: string | null
    recommendations: string | null
    slimming_note: string | null
    images: string[]
    createdById: number
    updatedById: number
    _count: PatientAssessmentCountAggregateOutputType | null
    _avg: PatientAssessmentAvgAggregateOutputType | null
    _sum: PatientAssessmentSumAggregateOutputType | null
    _min: PatientAssessmentMinAggregateOutputType | null
    _max: PatientAssessmentMaxAggregateOutputType | null
  }

  type GetPatientAssessmentGroupByPayload<T extends PatientAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], PatientAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type PatientAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    visitType?: boolean
    consultationType?: boolean
    status?: boolean
    createdAt?: boolean
    complaints?: boolean
    facial_dermapen_prp?: boolean
    instructions?: boolean
    laser_q_note?: boolean
    prescription?: boolean
    provider_notes?: boolean
    recommendations?: boolean
    slimming_note?: boolean
    images?: boolean
    createdById?: boolean
    updatedById?: boolean
    consultations?: boolean | PatientAssessment$consultationsArgs<ExtArgs>
    patientMedications?: boolean | PatientAssessment$patientMedicationsArgs<ExtArgs>
    patientTreatments?: boolean | PatientAssessment$patientTreatmentsArgs<ExtArgs>
    patientPackages?: boolean | PatientAssessment$patientPackagesArgs<ExtArgs>
    patientItems?: boolean | PatientAssessment$patientItemsArgs<ExtArgs>
    notes?: boolean | PatientAssessment$notesArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | PatientAssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientAssessment"]>

  export type PatientAssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    visitType?: boolean
    consultationType?: boolean
    status?: boolean
    createdAt?: boolean
    complaints?: boolean
    facial_dermapen_prp?: boolean
    instructions?: boolean
    laser_q_note?: boolean
    prescription?: boolean
    provider_notes?: boolean
    recommendations?: boolean
    slimming_note?: boolean
    images?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientAssessment"]>

  export type PatientAssessmentSelectScalar = {
    id?: boolean
    visitType?: boolean
    consultationType?: boolean
    status?: boolean
    createdAt?: boolean
    complaints?: boolean
    facial_dermapen_prp?: boolean
    instructions?: boolean
    laser_q_note?: boolean
    prescription?: boolean
    provider_notes?: boolean
    recommendations?: boolean
    slimming_note?: boolean
    images?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PatientAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultations?: boolean | PatientAssessment$consultationsArgs<ExtArgs>
    patientMedications?: boolean | PatientAssessment$patientMedicationsArgs<ExtArgs>
    patientTreatments?: boolean | PatientAssessment$patientTreatmentsArgs<ExtArgs>
    patientPackages?: boolean | PatientAssessment$patientPackagesArgs<ExtArgs>
    patientItems?: boolean | PatientAssessment$patientItemsArgs<ExtArgs>
    notes?: boolean | PatientAssessment$notesArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | PatientAssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientAssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PatientAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientAssessment"
    objects: {
      consultations: Prisma.$ConsultationsPayload<ExtArgs>[]
      patientMedications: Prisma.$PatientMedicationPayload<ExtArgs>[]
      patientTreatments: Prisma.$PatientTreatmentPayload<ExtArgs>[]
      patientPackages: Prisma.$PatientPackagePayload<ExtArgs>[]
      patientItems: Prisma.$PatientItemPayload<ExtArgs>[]
      notes: Prisma.$NotePayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      visitType: string | null
      consultationType: string | null
      status: string | null
      createdAt: Date
      complaints: string | null
      facial_dermapen_prp: string | null
      instructions: string | null
      laser_q_note: string | null
      prescription: string | null
      provider_notes: string | null
      recommendations: string | null
      slimming_note: string | null
      images: string[]
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["patientAssessment"]>
    composites: {}
  }

  type PatientAssessmentGetPayload<S extends boolean | null | undefined | PatientAssessmentDefaultArgs> = $Result.GetResult<Prisma.$PatientAssessmentPayload, S>

  type PatientAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientAssessmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientAssessmentCountAggregateInputType | true
    }

  export interface PatientAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientAssessment'], meta: { name: 'PatientAssessment' } }
    /**
     * Find zero or one PatientAssessment that matches the filter.
     * @param {PatientAssessmentFindUniqueArgs} args - Arguments to find a PatientAssessment
     * @example
     * // Get one PatientAssessment
     * const patientAssessment = await prisma.patientAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientAssessmentFindUniqueArgs>(args: SelectSubset<T, PatientAssessmentFindUniqueArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatientAssessment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientAssessmentFindUniqueOrThrowArgs} args - Arguments to find a PatientAssessment
     * @example
     * // Get one PatientAssessment
     * const patientAssessment = await prisma.patientAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientAssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientAssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatientAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAssessmentFindFirstArgs} args - Arguments to find a PatientAssessment
     * @example
     * // Get one PatientAssessment
     * const patientAssessment = await prisma.patientAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientAssessmentFindFirstArgs>(args?: SelectSubset<T, PatientAssessmentFindFirstArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatientAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAssessmentFindFirstOrThrowArgs} args - Arguments to find a PatientAssessment
     * @example
     * // Get one PatientAssessment
     * const patientAssessment = await prisma.patientAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientAssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientAssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatientAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientAssessments
     * const patientAssessments = await prisma.patientAssessment.findMany()
     * 
     * // Get first 10 PatientAssessments
     * const patientAssessments = await prisma.patientAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientAssessmentWithIdOnly = await prisma.patientAssessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientAssessmentFindManyArgs>(args?: SelectSubset<T, PatientAssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatientAssessment.
     * @param {PatientAssessmentCreateArgs} args - Arguments to create a PatientAssessment.
     * @example
     * // Create one PatientAssessment
     * const PatientAssessment = await prisma.patientAssessment.create({
     *   data: {
     *     // ... data to create a PatientAssessment
     *   }
     * })
     * 
     */
    create<T extends PatientAssessmentCreateArgs>(args: SelectSubset<T, PatientAssessmentCreateArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatientAssessments.
     * @param {PatientAssessmentCreateManyArgs} args - Arguments to create many PatientAssessments.
     * @example
     * // Create many PatientAssessments
     * const patientAssessment = await prisma.patientAssessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientAssessmentCreateManyArgs>(args?: SelectSubset<T, PatientAssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientAssessments and returns the data saved in the database.
     * @param {PatientAssessmentCreateManyAndReturnArgs} args - Arguments to create many PatientAssessments.
     * @example
     * // Create many PatientAssessments
     * const patientAssessment = await prisma.patientAssessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientAssessments and only return the `id`
     * const patientAssessmentWithIdOnly = await prisma.patientAssessment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientAssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientAssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatientAssessment.
     * @param {PatientAssessmentDeleteArgs} args - Arguments to delete one PatientAssessment.
     * @example
     * // Delete one PatientAssessment
     * const PatientAssessment = await prisma.patientAssessment.delete({
     *   where: {
     *     // ... filter to delete one PatientAssessment
     *   }
     * })
     * 
     */
    delete<T extends PatientAssessmentDeleteArgs>(args: SelectSubset<T, PatientAssessmentDeleteArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatientAssessment.
     * @param {PatientAssessmentUpdateArgs} args - Arguments to update one PatientAssessment.
     * @example
     * // Update one PatientAssessment
     * const patientAssessment = await prisma.patientAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientAssessmentUpdateArgs>(args: SelectSubset<T, PatientAssessmentUpdateArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatientAssessments.
     * @param {PatientAssessmentDeleteManyArgs} args - Arguments to filter PatientAssessments to delete.
     * @example
     * // Delete a few PatientAssessments
     * const { count } = await prisma.patientAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientAssessmentDeleteManyArgs>(args?: SelectSubset<T, PatientAssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientAssessments
     * const patientAssessment = await prisma.patientAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientAssessmentUpdateManyArgs>(args: SelectSubset<T, PatientAssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientAssessment.
     * @param {PatientAssessmentUpsertArgs} args - Arguments to update or create a PatientAssessment.
     * @example
     * // Update or create a PatientAssessment
     * const patientAssessment = await prisma.patientAssessment.upsert({
     *   create: {
     *     // ... data to create a PatientAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientAssessment we want to update
     *   }
     * })
     */
    upsert<T extends PatientAssessmentUpsertArgs>(args: SelectSubset<T, PatientAssessmentUpsertArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatientAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAssessmentCountArgs} args - Arguments to filter PatientAssessments to count.
     * @example
     * // Count the number of PatientAssessments
     * const count = await prisma.patientAssessment.count({
     *   where: {
     *     // ... the filter for the PatientAssessments we want to count
     *   }
     * })
    **/
    count<T extends PatientAssessmentCountArgs>(
      args?: Subset<T, PatientAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAssessmentAggregateArgs>(args: Subset<T, PatientAssessmentAggregateArgs>): Prisma.PrismaPromise<GetPatientAssessmentAggregateType<T>>

    /**
     * Group by PatientAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: PatientAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientAssessment model
   */
  readonly fields: PatientAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultations<T extends PatientAssessment$consultationsArgs<ExtArgs> = {}>(args?: Subset<T, PatientAssessment$consultationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findMany"> | Null>
    patientMedications<T extends PatientAssessment$patientMedicationsArgs<ExtArgs> = {}>(args?: Subset<T, PatientAssessment$patientMedicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findMany"> | Null>
    patientTreatments<T extends PatientAssessment$patientTreatmentsArgs<ExtArgs> = {}>(args?: Subset<T, PatientAssessment$patientTreatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany"> | Null>
    patientPackages<T extends PatientAssessment$patientPackagesArgs<ExtArgs> = {}>(args?: Subset<T, PatientAssessment$patientPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findMany"> | Null>
    patientItems<T extends PatientAssessment$patientItemsArgs<ExtArgs> = {}>(args?: Subset<T, PatientAssessment$patientItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findMany"> | Null>
    notes<T extends PatientAssessment$notesArgs<ExtArgs> = {}>(args?: Subset<T, PatientAssessment$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientAssessment model
   */ 
  interface PatientAssessmentFieldRefs {
    readonly id: FieldRef<"PatientAssessment", 'Int'>
    readonly visitType: FieldRef<"PatientAssessment", 'String'>
    readonly consultationType: FieldRef<"PatientAssessment", 'String'>
    readonly status: FieldRef<"PatientAssessment", 'String'>
    readonly createdAt: FieldRef<"PatientAssessment", 'DateTime'>
    readonly complaints: FieldRef<"PatientAssessment", 'String'>
    readonly facial_dermapen_prp: FieldRef<"PatientAssessment", 'String'>
    readonly instructions: FieldRef<"PatientAssessment", 'String'>
    readonly laser_q_note: FieldRef<"PatientAssessment", 'String'>
    readonly prescription: FieldRef<"PatientAssessment", 'String'>
    readonly provider_notes: FieldRef<"PatientAssessment", 'String'>
    readonly recommendations: FieldRef<"PatientAssessment", 'String'>
    readonly slimming_note: FieldRef<"PatientAssessment", 'String'>
    readonly images: FieldRef<"PatientAssessment", 'String[]'>
    readonly createdById: FieldRef<"PatientAssessment", 'Int'>
    readonly updatedById: FieldRef<"PatientAssessment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatientAssessment findUnique
   */
  export type PatientAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAssessment to fetch.
     */
    where: PatientAssessmentWhereUniqueInput
  }

  /**
   * PatientAssessment findUniqueOrThrow
   */
  export type PatientAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAssessment to fetch.
     */
    where: PatientAssessmentWhereUniqueInput
  }

  /**
   * PatientAssessment findFirst
   */
  export type PatientAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAssessment to fetch.
     */
    where?: PatientAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientAssessments to fetch.
     */
    orderBy?: PatientAssessmentOrderByWithRelationInput | PatientAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientAssessments.
     */
    cursor?: PatientAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientAssessments.
     */
    distinct?: PatientAssessmentScalarFieldEnum | PatientAssessmentScalarFieldEnum[]
  }

  /**
   * PatientAssessment findFirstOrThrow
   */
  export type PatientAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAssessment to fetch.
     */
    where?: PatientAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientAssessments to fetch.
     */
    orderBy?: PatientAssessmentOrderByWithRelationInput | PatientAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientAssessments.
     */
    cursor?: PatientAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientAssessments.
     */
    distinct?: PatientAssessmentScalarFieldEnum | PatientAssessmentScalarFieldEnum[]
  }

  /**
   * PatientAssessment findMany
   */
  export type PatientAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientAssessments to fetch.
     */
    where?: PatientAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientAssessments to fetch.
     */
    orderBy?: PatientAssessmentOrderByWithRelationInput | PatientAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientAssessments.
     */
    cursor?: PatientAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientAssessments.
     */
    skip?: number
    distinct?: PatientAssessmentScalarFieldEnum | PatientAssessmentScalarFieldEnum[]
  }

  /**
   * PatientAssessment create
   */
  export type PatientAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientAssessment.
     */
    data: XOR<PatientAssessmentCreateInput, PatientAssessmentUncheckedCreateInput>
  }

  /**
   * PatientAssessment createMany
   */
  export type PatientAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientAssessments.
     */
    data: PatientAssessmentCreateManyInput | PatientAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientAssessment createManyAndReturn
   */
  export type PatientAssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatientAssessments.
     */
    data: PatientAssessmentCreateManyInput | PatientAssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientAssessment update
   */
  export type PatientAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientAssessment.
     */
    data: XOR<PatientAssessmentUpdateInput, PatientAssessmentUncheckedUpdateInput>
    /**
     * Choose, which PatientAssessment to update.
     */
    where: PatientAssessmentWhereUniqueInput
  }

  /**
   * PatientAssessment updateMany
   */
  export type PatientAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientAssessments.
     */
    data: XOR<PatientAssessmentUpdateManyMutationInput, PatientAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which PatientAssessments to update
     */
    where?: PatientAssessmentWhereInput
  }

  /**
   * PatientAssessment upsert
   */
  export type PatientAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientAssessment to update in case it exists.
     */
    where: PatientAssessmentWhereUniqueInput
    /**
     * In case the PatientAssessment found by the `where` argument doesn't exist, create a new PatientAssessment with this data.
     */
    create: XOR<PatientAssessmentCreateInput, PatientAssessmentUncheckedCreateInput>
    /**
     * In case the PatientAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientAssessmentUpdateInput, PatientAssessmentUncheckedUpdateInput>
  }

  /**
   * PatientAssessment delete
   */
  export type PatientAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    /**
     * Filter which PatientAssessment to delete.
     */
    where: PatientAssessmentWhereUniqueInput
  }

  /**
   * PatientAssessment deleteMany
   */
  export type PatientAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientAssessments to delete
     */
    where?: PatientAssessmentWhereInput
  }

  /**
   * PatientAssessment.consultations
   */
  export type PatientAssessment$consultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultations
     */
    select?: ConsultationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultationsInclude<ExtArgs> | null
    where?: ConsultationsWhereInput
    orderBy?: ConsultationsOrderByWithRelationInput | ConsultationsOrderByWithRelationInput[]
    cursor?: ConsultationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultationsScalarFieldEnum | ConsultationsScalarFieldEnum[]
  }

  /**
   * PatientAssessment.patientMedications
   */
  export type PatientAssessment$patientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    where?: PatientMedicationWhereInput
    orderBy?: PatientMedicationOrderByWithRelationInput | PatientMedicationOrderByWithRelationInput[]
    cursor?: PatientMedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientMedicationScalarFieldEnum | PatientMedicationScalarFieldEnum[]
  }

  /**
   * PatientAssessment.patientTreatments
   */
  export type PatientAssessment$patientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    cursor?: PatientTreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * PatientAssessment.patientPackages
   */
  export type PatientAssessment$patientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    where?: PatientPackageWhereInput
    orderBy?: PatientPackageOrderByWithRelationInput | PatientPackageOrderByWithRelationInput[]
    cursor?: PatientPackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientPackageScalarFieldEnum | PatientPackageScalarFieldEnum[]
  }

  /**
   * PatientAssessment.patientItems
   */
  export type PatientAssessment$patientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    where?: PatientItemWhereInput
    orderBy?: PatientItemOrderByWithRelationInput | PatientItemOrderByWithRelationInput[]
    cursor?: PatientItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientItemScalarFieldEnum | PatientItemScalarFieldEnum[]
  }

  /**
   * PatientAssessment.notes
   */
  export type PatientAssessment$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * PatientAssessment without action
   */
  export type PatientAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
  }


  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
    patientTriageId: number | null
    patientAssessmentId: number | null
  }

  export type NoteSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
    patientTriageId: number | null
    patientAssessmentId: number | null
  }

  export type NoteMinAggregateOutputType = {
    id: number | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    noteType: string | null
    patientTriageId: number | null
    patientAssessmentId: number | null
  }

  export type NoteMaxAggregateOutputType = {
    id: number | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    noteType: string | null
    patientTriageId: number | null
    patientAssessmentId: number | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    createdBy: number
    noteType: number
    patientTriageId: number
    patientAssessmentId: number
    _all: number
  }


  export type NoteAvgAggregateInputType = {
    id?: true
    createdBy?: true
    patientTriageId?: true
    patientAssessmentId?: true
  }

  export type NoteSumAggregateInputType = {
    id?: true
    createdBy?: true
    patientTriageId?: true
    patientAssessmentId?: true
  }

  export type NoteMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    noteType?: true
    patientTriageId?: true
    patientAssessmentId?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    noteType?: true
    patientTriageId?: true
    patientAssessmentId?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    noteType?: true
    patientTriageId?: true
    patientAssessmentId?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _avg?: NoteAvgAggregateInputType
    _sum?: NoteSumAggregateInputType
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: number
    content: string
    createdAt: Date
    updatedAt: Date
    createdBy: number
    noteType: string
    patientTriageId: number | null
    patientAssessmentId: number | null
    _count: NoteCountAggregateOutputType | null
    _avg: NoteAvgAggregateOutputType | null
    _sum: NoteSumAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    noteType?: boolean
    patientTriageId?: boolean
    patientAssessmentId?: boolean
    patientTriage?: boolean | Note$patientTriageArgs<ExtArgs>
    patientAssessment?: boolean | Note$patientAssessmentArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    noteType?: boolean
    patientTriageId?: boolean
    patientAssessmentId?: boolean
    patientTriage?: boolean | Note$patientTriageArgs<ExtArgs>
    patientAssessment?: boolean | Note$patientAssessmentArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    noteType?: boolean
    patientTriageId?: boolean
    patientAssessmentId?: boolean
  }

  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTriage?: boolean | Note$patientTriageArgs<ExtArgs>
    patientAssessment?: boolean | Note$patientAssessmentArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type NoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientTriage?: boolean | Note$patientTriageArgs<ExtArgs>
    patientAssessment?: boolean | Note$patientAssessmentArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      patientTriage: Prisma.$PatientTriagePayload<ExtArgs> | null
      patientAssessment: Prisma.$PatientAssessmentPayload<ExtArgs> | null
      employee: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      createdAt: Date
      updatedAt: Date
      createdBy: number
      noteType: string
      patientTriageId: number | null
      patientAssessmentId: number | null
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientTriage<T extends Note$patientTriageArgs<ExtArgs> = {}>(args?: Subset<T, Note$patientTriageArgs<ExtArgs>>): Prisma__PatientTriageClient<$Result.GetResult<Prisma.$PatientTriagePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patientAssessment<T extends Note$patientAssessmentArgs<ExtArgs> = {}>(args?: Subset<T, Note$patientAssessmentArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */ 
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'Int'>
    readonly content: FieldRef<"Note", 'String'>
    readonly createdAt: FieldRef<"Note", 'DateTime'>
    readonly updatedAt: FieldRef<"Note", 'DateTime'>
    readonly createdBy: FieldRef<"Note", 'Int'>
    readonly noteType: FieldRef<"Note", 'String'>
    readonly patientTriageId: FieldRef<"Note", 'Int'>
    readonly patientAssessmentId: FieldRef<"Note", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
  }

  /**
   * Note.patientTriage
   */
  export type Note$patientTriageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTriage
     */
    select?: PatientTriageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTriageInclude<ExtArgs> | null
    where?: PatientTriageWhereInput
  }

  /**
   * Note.patientAssessment
   */
  export type Note$patientAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    where?: PatientAssessmentWhereInput
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
  }


  /**
   * Model PatientTreatment
   */

  export type AggregatePatientTreatment = {
    _count: PatientTreatmentCountAggregateOutputType | null
    _avg: PatientTreatmentAvgAggregateOutputType | null
    _sum: PatientTreatmentSumAggregateOutputType | null
    _min: PatientTreatmentMinAggregateOutputType | null
    _max: PatientTreatmentMaxAggregateOutputType | null
  }

  export type PatientTreatmentAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    treatmentId: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientTreatmentSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    treatmentId: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientTreatmentMinAggregateOutputType = {
    id: number | null
    quantity: number | null
    notes: string | null
    treatmentId: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientTreatmentMaxAggregateOutputType = {
    id: number | null
    quantity: number | null
    notes: string | null
    treatmentId: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientTreatmentCountAggregateOutputType = {
    id: number
    quantity: number
    notes: number
    treatmentId: number
    patientAssessmentId: number
    billingId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PatientTreatmentAvgAggregateInputType = {
    id?: true
    quantity?: true
    treatmentId?: true
    patientAssessmentId?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientTreatmentSumAggregateInputType = {
    id?: true
    quantity?: true
    treatmentId?: true
    patientAssessmentId?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientTreatmentMinAggregateInputType = {
    id?: true
    quantity?: true
    notes?: true
    treatmentId?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientTreatmentMaxAggregateInputType = {
    id?: true
    quantity?: true
    notes?: true
    treatmentId?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientTreatmentCountAggregateInputType = {
    id?: true
    quantity?: true
    notes?: true
    treatmentId?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PatientTreatmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientTreatment to aggregate.
     */
    where?: PatientTreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTreatments to fetch.
     */
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientTreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTreatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTreatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientTreatments
    **/
    _count?: true | PatientTreatmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientTreatmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientTreatmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientTreatmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientTreatmentMaxAggregateInputType
  }

  export type GetPatientTreatmentAggregateType<T extends PatientTreatmentAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientTreatment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientTreatment[P]>
      : GetScalarType<T[P], AggregatePatientTreatment[P]>
  }




  export type PatientTreatmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithAggregationInput | PatientTreatmentOrderByWithAggregationInput[]
    by: PatientTreatmentScalarFieldEnum[] | PatientTreatmentScalarFieldEnum
    having?: PatientTreatmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientTreatmentCountAggregateInputType | true
    _avg?: PatientTreatmentAvgAggregateInputType
    _sum?: PatientTreatmentSumAggregateInputType
    _min?: PatientTreatmentMinAggregateInputType
    _max?: PatientTreatmentMaxAggregateInputType
  }

  export type PatientTreatmentGroupByOutputType = {
    id: number
    quantity: number
    notes: string | null
    treatmentId: number
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: PatientTreatmentCountAggregateOutputType | null
    _avg: PatientTreatmentAvgAggregateOutputType | null
    _sum: PatientTreatmentSumAggregateOutputType | null
    _min: PatientTreatmentMinAggregateOutputType | null
    _max: PatientTreatmentMaxAggregateOutputType | null
  }

  type GetPatientTreatmentGroupByPayload<T extends PatientTreatmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientTreatmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientTreatmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientTreatmentGroupByOutputType[P]>
            : GetScalarType<T[P], PatientTreatmentGroupByOutputType[P]>
        }
      >
    >


  export type PatientTreatmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    notes?: boolean
    treatmentId?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientTreatment$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientTreatment$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientTreatment"]>

  export type PatientTreatmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    notes?: boolean
    treatmentId?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientTreatment$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientTreatment$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientTreatment"]>

  export type PatientTreatmentSelectScalar = {
    id?: boolean
    quantity?: boolean
    notes?: boolean
    treatmentId?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PatientTreatmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientTreatment$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientTreatment$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type PatientTreatmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatment?: boolean | TreatmentDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientTreatment$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientTreatment$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PatientTreatmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientTreatment"
    objects: {
      treatment: Prisma.$TreatmentPayload<ExtArgs>
      patientAssessment: Prisma.$PatientAssessmentPayload<ExtArgs> | null
      billing: Prisma.$BillingsPayload<ExtArgs> | null
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      quantity: number
      notes: string | null
      treatmentId: number
      patientAssessmentId: number | null
      billingId: number | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["patientTreatment"]>
    composites: {}
  }

  type PatientTreatmentGetPayload<S extends boolean | null | undefined | PatientTreatmentDefaultArgs> = $Result.GetResult<Prisma.$PatientTreatmentPayload, S>

  type PatientTreatmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientTreatmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientTreatmentCountAggregateInputType | true
    }

  export interface PatientTreatmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientTreatment'], meta: { name: 'PatientTreatment' } }
    /**
     * Find zero or one PatientTreatment that matches the filter.
     * @param {PatientTreatmentFindUniqueArgs} args - Arguments to find a PatientTreatment
     * @example
     * // Get one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientTreatmentFindUniqueArgs>(args: SelectSubset<T, PatientTreatmentFindUniqueArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatientTreatment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientTreatmentFindUniqueOrThrowArgs} args - Arguments to find a PatientTreatment
     * @example
     * // Get one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientTreatmentFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientTreatmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatientTreatment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentFindFirstArgs} args - Arguments to find a PatientTreatment
     * @example
     * // Get one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientTreatmentFindFirstArgs>(args?: SelectSubset<T, PatientTreatmentFindFirstArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatientTreatment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentFindFirstOrThrowArgs} args - Arguments to find a PatientTreatment
     * @example
     * // Get one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientTreatmentFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientTreatmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatientTreatments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientTreatments
     * const patientTreatments = await prisma.patientTreatment.findMany()
     * 
     * // Get first 10 PatientTreatments
     * const patientTreatments = await prisma.patientTreatment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientTreatmentWithIdOnly = await prisma.patientTreatment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientTreatmentFindManyArgs>(args?: SelectSubset<T, PatientTreatmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatientTreatment.
     * @param {PatientTreatmentCreateArgs} args - Arguments to create a PatientTreatment.
     * @example
     * // Create one PatientTreatment
     * const PatientTreatment = await prisma.patientTreatment.create({
     *   data: {
     *     // ... data to create a PatientTreatment
     *   }
     * })
     * 
     */
    create<T extends PatientTreatmentCreateArgs>(args: SelectSubset<T, PatientTreatmentCreateArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatientTreatments.
     * @param {PatientTreatmentCreateManyArgs} args - Arguments to create many PatientTreatments.
     * @example
     * // Create many PatientTreatments
     * const patientTreatment = await prisma.patientTreatment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientTreatmentCreateManyArgs>(args?: SelectSubset<T, PatientTreatmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientTreatments and returns the data saved in the database.
     * @param {PatientTreatmentCreateManyAndReturnArgs} args - Arguments to create many PatientTreatments.
     * @example
     * // Create many PatientTreatments
     * const patientTreatment = await prisma.patientTreatment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientTreatments and only return the `id`
     * const patientTreatmentWithIdOnly = await prisma.patientTreatment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientTreatmentCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientTreatmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatientTreatment.
     * @param {PatientTreatmentDeleteArgs} args - Arguments to delete one PatientTreatment.
     * @example
     * // Delete one PatientTreatment
     * const PatientTreatment = await prisma.patientTreatment.delete({
     *   where: {
     *     // ... filter to delete one PatientTreatment
     *   }
     * })
     * 
     */
    delete<T extends PatientTreatmentDeleteArgs>(args: SelectSubset<T, PatientTreatmentDeleteArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatientTreatment.
     * @param {PatientTreatmentUpdateArgs} args - Arguments to update one PatientTreatment.
     * @example
     * // Update one PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientTreatmentUpdateArgs>(args: SelectSubset<T, PatientTreatmentUpdateArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatientTreatments.
     * @param {PatientTreatmentDeleteManyArgs} args - Arguments to filter PatientTreatments to delete.
     * @example
     * // Delete a few PatientTreatments
     * const { count } = await prisma.patientTreatment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientTreatmentDeleteManyArgs>(args?: SelectSubset<T, PatientTreatmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientTreatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientTreatments
     * const patientTreatment = await prisma.patientTreatment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientTreatmentUpdateManyArgs>(args: SelectSubset<T, PatientTreatmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientTreatment.
     * @param {PatientTreatmentUpsertArgs} args - Arguments to update or create a PatientTreatment.
     * @example
     * // Update or create a PatientTreatment
     * const patientTreatment = await prisma.patientTreatment.upsert({
     *   create: {
     *     // ... data to create a PatientTreatment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientTreatment we want to update
     *   }
     * })
     */
    upsert<T extends PatientTreatmentUpsertArgs>(args: SelectSubset<T, PatientTreatmentUpsertArgs<ExtArgs>>): Prisma__PatientTreatmentClient<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatientTreatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentCountArgs} args - Arguments to filter PatientTreatments to count.
     * @example
     * // Count the number of PatientTreatments
     * const count = await prisma.patientTreatment.count({
     *   where: {
     *     // ... the filter for the PatientTreatments we want to count
     *   }
     * })
    **/
    count<T extends PatientTreatmentCountArgs>(
      args?: Subset<T, PatientTreatmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientTreatmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientTreatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientTreatmentAggregateArgs>(args: Subset<T, PatientTreatmentAggregateArgs>): Prisma.PrismaPromise<GetPatientTreatmentAggregateType<T>>

    /**
     * Group by PatientTreatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientTreatmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientTreatmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientTreatmentGroupByArgs['orderBy'] }
        : { orderBy?: PatientTreatmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientTreatmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientTreatmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientTreatment model
   */
  readonly fields: PatientTreatmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientTreatment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientTreatmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    treatment<T extends TreatmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentDefaultArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patientAssessment<T extends PatientTreatment$patientAssessmentArgs<ExtArgs> = {}>(args?: Subset<T, PatientTreatment$patientAssessmentArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    billing<T extends PatientTreatment$billingArgs<ExtArgs> = {}>(args?: Subset<T, PatientTreatment$billingArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientTreatment model
   */ 
  interface PatientTreatmentFieldRefs {
    readonly id: FieldRef<"PatientTreatment", 'Int'>
    readonly quantity: FieldRef<"PatientTreatment", 'Int'>
    readonly notes: FieldRef<"PatientTreatment", 'String'>
    readonly treatmentId: FieldRef<"PatientTreatment", 'Int'>
    readonly patientAssessmentId: FieldRef<"PatientTreatment", 'Int'>
    readonly billingId: FieldRef<"PatientTreatment", 'Int'>
    readonly createdAt: FieldRef<"PatientTreatment", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientTreatment", 'DateTime'>
    readonly createdById: FieldRef<"PatientTreatment", 'Int'>
    readonly updatedById: FieldRef<"PatientTreatment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatientTreatment findUnique
   */
  export type PatientTreatmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatment to fetch.
     */
    where: PatientTreatmentWhereUniqueInput
  }

  /**
   * PatientTreatment findUniqueOrThrow
   */
  export type PatientTreatmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatment to fetch.
     */
    where: PatientTreatmentWhereUniqueInput
  }

  /**
   * PatientTreatment findFirst
   */
  export type PatientTreatmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatment to fetch.
     */
    where?: PatientTreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTreatments to fetch.
     */
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientTreatments.
     */
    cursor?: PatientTreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTreatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTreatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientTreatments.
     */
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * PatientTreatment findFirstOrThrow
   */
  export type PatientTreatmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatment to fetch.
     */
    where?: PatientTreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTreatments to fetch.
     */
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientTreatments.
     */
    cursor?: PatientTreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTreatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTreatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientTreatments.
     */
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * PatientTreatment findMany
   */
  export type PatientTreatmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter, which PatientTreatments to fetch.
     */
    where?: PatientTreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientTreatments to fetch.
     */
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientTreatments.
     */
    cursor?: PatientTreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientTreatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientTreatments.
     */
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * PatientTreatment create
   */
  export type PatientTreatmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientTreatment.
     */
    data: XOR<PatientTreatmentCreateInput, PatientTreatmentUncheckedCreateInput>
  }

  /**
   * PatientTreatment createMany
   */
  export type PatientTreatmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientTreatments.
     */
    data: PatientTreatmentCreateManyInput | PatientTreatmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientTreatment createManyAndReturn
   */
  export type PatientTreatmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatientTreatments.
     */
    data: PatientTreatmentCreateManyInput | PatientTreatmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientTreatment update
   */
  export type PatientTreatmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientTreatment.
     */
    data: XOR<PatientTreatmentUpdateInput, PatientTreatmentUncheckedUpdateInput>
    /**
     * Choose, which PatientTreatment to update.
     */
    where: PatientTreatmentWhereUniqueInput
  }

  /**
   * PatientTreatment updateMany
   */
  export type PatientTreatmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientTreatments.
     */
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyInput>
    /**
     * Filter which PatientTreatments to update
     */
    where?: PatientTreatmentWhereInput
  }

  /**
   * PatientTreatment upsert
   */
  export type PatientTreatmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientTreatment to update in case it exists.
     */
    where: PatientTreatmentWhereUniqueInput
    /**
     * In case the PatientTreatment found by the `where` argument doesn't exist, create a new PatientTreatment with this data.
     */
    create: XOR<PatientTreatmentCreateInput, PatientTreatmentUncheckedCreateInput>
    /**
     * In case the PatientTreatment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientTreatmentUpdateInput, PatientTreatmentUncheckedUpdateInput>
  }

  /**
   * PatientTreatment delete
   */
  export type PatientTreatmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    /**
     * Filter which PatientTreatment to delete.
     */
    where: PatientTreatmentWhereUniqueInput
  }

  /**
   * PatientTreatment deleteMany
   */
  export type PatientTreatmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientTreatments to delete
     */
    where?: PatientTreatmentWhereInput
  }

  /**
   * PatientTreatment.patientAssessment
   */
  export type PatientTreatment$patientAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    where?: PatientAssessmentWhereInput
  }

  /**
   * PatientTreatment.billing
   */
  export type PatientTreatment$billingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    where?: BillingsWhereInput
  }

  /**
   * PatientTreatment without action
   */
  export type PatientTreatmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
  }


  /**
   * Model PatientMedication
   */

  export type AggregatePatientMedication = {
    _count: PatientMedicationCountAggregateOutputType | null
    _avg: PatientMedicationAvgAggregateOutputType | null
    _sum: PatientMedicationSumAggregateOutputType | null
    _min: PatientMedicationMinAggregateOutputType | null
    _max: PatientMedicationMaxAggregateOutputType | null
  }

  export type PatientMedicationAvgAggregateOutputType = {
    id: number | null
    quantity: number | null
    medicineId: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientMedicationSumAggregateOutputType = {
    id: number | null
    quantity: number | null
    medicineId: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientMedicationMinAggregateOutputType = {
    id: number | null
    quantity: number | null
    notes: string | null
    medicineId: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientMedicationMaxAggregateOutputType = {
    id: number | null
    quantity: number | null
    notes: string | null
    medicineId: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientMedicationCountAggregateOutputType = {
    id: number
    quantity: number
    notes: number
    medicineId: number
    patientAssessmentId: number
    billingId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PatientMedicationAvgAggregateInputType = {
    id?: true
    quantity?: true
    medicineId?: true
    patientAssessmentId?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientMedicationSumAggregateInputType = {
    id?: true
    quantity?: true
    medicineId?: true
    patientAssessmentId?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientMedicationMinAggregateInputType = {
    id?: true
    quantity?: true
    notes?: true
    medicineId?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientMedicationMaxAggregateInputType = {
    id?: true
    quantity?: true
    notes?: true
    medicineId?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientMedicationCountAggregateInputType = {
    id?: true
    quantity?: true
    notes?: true
    medicineId?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PatientMedicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientMedication to aggregate.
     */
    where?: PatientMedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMedications to fetch.
     */
    orderBy?: PatientMedicationOrderByWithRelationInput | PatientMedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientMedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMedications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMedications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientMedications
    **/
    _count?: true | PatientMedicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientMedicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientMedicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMedicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMedicationMaxAggregateInputType
  }

  export type GetPatientMedicationAggregateType<T extends PatientMedicationAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientMedication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientMedication[P]>
      : GetScalarType<T[P], AggregatePatientMedication[P]>
  }




  export type PatientMedicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMedicationWhereInput
    orderBy?: PatientMedicationOrderByWithAggregationInput | PatientMedicationOrderByWithAggregationInput[]
    by: PatientMedicationScalarFieldEnum[] | PatientMedicationScalarFieldEnum
    having?: PatientMedicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientMedicationCountAggregateInputType | true
    _avg?: PatientMedicationAvgAggregateInputType
    _sum?: PatientMedicationSumAggregateInputType
    _min?: PatientMedicationMinAggregateInputType
    _max?: PatientMedicationMaxAggregateInputType
  }

  export type PatientMedicationGroupByOutputType = {
    id: number
    quantity: number
    notes: string | null
    medicineId: number
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: PatientMedicationCountAggregateOutputType | null
    _avg: PatientMedicationAvgAggregateOutputType | null
    _sum: PatientMedicationSumAggregateOutputType | null
    _min: PatientMedicationMinAggregateOutputType | null
    _max: PatientMedicationMaxAggregateOutputType | null
  }

  type GetPatientMedicationGroupByPayload<T extends PatientMedicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientMedicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientMedicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientMedicationGroupByOutputType[P]>
            : GetScalarType<T[P], PatientMedicationGroupByOutputType[P]>
        }
      >
    >


  export type PatientMedicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    notes?: boolean
    medicineId?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    medicine?: boolean | MedicineDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientMedication$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientMedication$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientMedication"]>

  export type PatientMedicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    notes?: boolean
    medicineId?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    medicine?: boolean | MedicineDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientMedication$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientMedication$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientMedication"]>

  export type PatientMedicationSelectScalar = {
    id?: boolean
    quantity?: boolean
    notes?: boolean
    medicineId?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PatientMedicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicine?: boolean | MedicineDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientMedication$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientMedication$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type PatientMedicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicine?: boolean | MedicineDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientMedication$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientMedication$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PatientMedicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientMedication"
    objects: {
      medicine: Prisma.$MedicinePayload<ExtArgs>
      patientAssessment: Prisma.$PatientAssessmentPayload<ExtArgs> | null
      billing: Prisma.$BillingsPayload<ExtArgs> | null
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      quantity: number
      notes: string | null
      medicineId: number
      patientAssessmentId: number | null
      billingId: number | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["patientMedication"]>
    composites: {}
  }

  type PatientMedicationGetPayload<S extends boolean | null | undefined | PatientMedicationDefaultArgs> = $Result.GetResult<Prisma.$PatientMedicationPayload, S>

  type PatientMedicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientMedicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientMedicationCountAggregateInputType | true
    }

  export interface PatientMedicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientMedication'], meta: { name: 'PatientMedication' } }
    /**
     * Find zero or one PatientMedication that matches the filter.
     * @param {PatientMedicationFindUniqueArgs} args - Arguments to find a PatientMedication
     * @example
     * // Get one PatientMedication
     * const patientMedication = await prisma.patientMedication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientMedicationFindUniqueArgs>(args: SelectSubset<T, PatientMedicationFindUniqueArgs<ExtArgs>>): Prisma__PatientMedicationClient<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatientMedication that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientMedicationFindUniqueOrThrowArgs} args - Arguments to find a PatientMedication
     * @example
     * // Get one PatientMedication
     * const patientMedication = await prisma.patientMedication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientMedicationFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientMedicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientMedicationClient<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatientMedication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMedicationFindFirstArgs} args - Arguments to find a PatientMedication
     * @example
     * // Get one PatientMedication
     * const patientMedication = await prisma.patientMedication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientMedicationFindFirstArgs>(args?: SelectSubset<T, PatientMedicationFindFirstArgs<ExtArgs>>): Prisma__PatientMedicationClient<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatientMedication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMedicationFindFirstOrThrowArgs} args - Arguments to find a PatientMedication
     * @example
     * // Get one PatientMedication
     * const patientMedication = await prisma.patientMedication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientMedicationFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientMedicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientMedicationClient<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatientMedications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMedicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientMedications
     * const patientMedications = await prisma.patientMedication.findMany()
     * 
     * // Get first 10 PatientMedications
     * const patientMedications = await prisma.patientMedication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientMedicationWithIdOnly = await prisma.patientMedication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientMedicationFindManyArgs>(args?: SelectSubset<T, PatientMedicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatientMedication.
     * @param {PatientMedicationCreateArgs} args - Arguments to create a PatientMedication.
     * @example
     * // Create one PatientMedication
     * const PatientMedication = await prisma.patientMedication.create({
     *   data: {
     *     // ... data to create a PatientMedication
     *   }
     * })
     * 
     */
    create<T extends PatientMedicationCreateArgs>(args: SelectSubset<T, PatientMedicationCreateArgs<ExtArgs>>): Prisma__PatientMedicationClient<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatientMedications.
     * @param {PatientMedicationCreateManyArgs} args - Arguments to create many PatientMedications.
     * @example
     * // Create many PatientMedications
     * const patientMedication = await prisma.patientMedication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientMedicationCreateManyArgs>(args?: SelectSubset<T, PatientMedicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientMedications and returns the data saved in the database.
     * @param {PatientMedicationCreateManyAndReturnArgs} args - Arguments to create many PatientMedications.
     * @example
     * // Create many PatientMedications
     * const patientMedication = await prisma.patientMedication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientMedications and only return the `id`
     * const patientMedicationWithIdOnly = await prisma.patientMedication.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientMedicationCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientMedicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatientMedication.
     * @param {PatientMedicationDeleteArgs} args - Arguments to delete one PatientMedication.
     * @example
     * // Delete one PatientMedication
     * const PatientMedication = await prisma.patientMedication.delete({
     *   where: {
     *     // ... filter to delete one PatientMedication
     *   }
     * })
     * 
     */
    delete<T extends PatientMedicationDeleteArgs>(args: SelectSubset<T, PatientMedicationDeleteArgs<ExtArgs>>): Prisma__PatientMedicationClient<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatientMedication.
     * @param {PatientMedicationUpdateArgs} args - Arguments to update one PatientMedication.
     * @example
     * // Update one PatientMedication
     * const patientMedication = await prisma.patientMedication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientMedicationUpdateArgs>(args: SelectSubset<T, PatientMedicationUpdateArgs<ExtArgs>>): Prisma__PatientMedicationClient<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatientMedications.
     * @param {PatientMedicationDeleteManyArgs} args - Arguments to filter PatientMedications to delete.
     * @example
     * // Delete a few PatientMedications
     * const { count } = await prisma.patientMedication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientMedicationDeleteManyArgs>(args?: SelectSubset<T, PatientMedicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientMedications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMedicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientMedications
     * const patientMedication = await prisma.patientMedication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientMedicationUpdateManyArgs>(args: SelectSubset<T, PatientMedicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientMedication.
     * @param {PatientMedicationUpsertArgs} args - Arguments to update or create a PatientMedication.
     * @example
     * // Update or create a PatientMedication
     * const patientMedication = await prisma.patientMedication.upsert({
     *   create: {
     *     // ... data to create a PatientMedication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientMedication we want to update
     *   }
     * })
     */
    upsert<T extends PatientMedicationUpsertArgs>(args: SelectSubset<T, PatientMedicationUpsertArgs<ExtArgs>>): Prisma__PatientMedicationClient<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatientMedications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMedicationCountArgs} args - Arguments to filter PatientMedications to count.
     * @example
     * // Count the number of PatientMedications
     * const count = await prisma.patientMedication.count({
     *   where: {
     *     // ... the filter for the PatientMedications we want to count
     *   }
     * })
    **/
    count<T extends PatientMedicationCountArgs>(
      args?: Subset<T, PatientMedicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientMedicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientMedication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMedicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientMedicationAggregateArgs>(args: Subset<T, PatientMedicationAggregateArgs>): Prisma.PrismaPromise<GetPatientMedicationAggregateType<T>>

    /**
     * Group by PatientMedication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMedicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientMedicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientMedicationGroupByArgs['orderBy'] }
        : { orderBy?: PatientMedicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientMedicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientMedicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientMedication model
   */
  readonly fields: PatientMedicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientMedication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientMedicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medicine<T extends MedicineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicineDefaultArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patientAssessment<T extends PatientMedication$patientAssessmentArgs<ExtArgs> = {}>(args?: Subset<T, PatientMedication$patientAssessmentArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    billing<T extends PatientMedication$billingArgs<ExtArgs> = {}>(args?: Subset<T, PatientMedication$billingArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientMedication model
   */ 
  interface PatientMedicationFieldRefs {
    readonly id: FieldRef<"PatientMedication", 'Int'>
    readonly quantity: FieldRef<"PatientMedication", 'Int'>
    readonly notes: FieldRef<"PatientMedication", 'String'>
    readonly medicineId: FieldRef<"PatientMedication", 'Int'>
    readonly patientAssessmentId: FieldRef<"PatientMedication", 'Int'>
    readonly billingId: FieldRef<"PatientMedication", 'Int'>
    readonly createdAt: FieldRef<"PatientMedication", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientMedication", 'DateTime'>
    readonly createdById: FieldRef<"PatientMedication", 'Int'>
    readonly updatedById: FieldRef<"PatientMedication", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatientMedication findUnique
   */
  export type PatientMedicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    /**
     * Filter, which PatientMedication to fetch.
     */
    where: PatientMedicationWhereUniqueInput
  }

  /**
   * PatientMedication findUniqueOrThrow
   */
  export type PatientMedicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    /**
     * Filter, which PatientMedication to fetch.
     */
    where: PatientMedicationWhereUniqueInput
  }

  /**
   * PatientMedication findFirst
   */
  export type PatientMedicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    /**
     * Filter, which PatientMedication to fetch.
     */
    where?: PatientMedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMedications to fetch.
     */
    orderBy?: PatientMedicationOrderByWithRelationInput | PatientMedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientMedications.
     */
    cursor?: PatientMedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMedications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMedications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientMedications.
     */
    distinct?: PatientMedicationScalarFieldEnum | PatientMedicationScalarFieldEnum[]
  }

  /**
   * PatientMedication findFirstOrThrow
   */
  export type PatientMedicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    /**
     * Filter, which PatientMedication to fetch.
     */
    where?: PatientMedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMedications to fetch.
     */
    orderBy?: PatientMedicationOrderByWithRelationInput | PatientMedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientMedications.
     */
    cursor?: PatientMedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMedications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMedications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientMedications.
     */
    distinct?: PatientMedicationScalarFieldEnum | PatientMedicationScalarFieldEnum[]
  }

  /**
   * PatientMedication findMany
   */
  export type PatientMedicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    /**
     * Filter, which PatientMedications to fetch.
     */
    where?: PatientMedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMedications to fetch.
     */
    orderBy?: PatientMedicationOrderByWithRelationInput | PatientMedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientMedications.
     */
    cursor?: PatientMedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMedications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMedications.
     */
    skip?: number
    distinct?: PatientMedicationScalarFieldEnum | PatientMedicationScalarFieldEnum[]
  }

  /**
   * PatientMedication create
   */
  export type PatientMedicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientMedication.
     */
    data: XOR<PatientMedicationCreateInput, PatientMedicationUncheckedCreateInput>
  }

  /**
   * PatientMedication createMany
   */
  export type PatientMedicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientMedications.
     */
    data: PatientMedicationCreateManyInput | PatientMedicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientMedication createManyAndReturn
   */
  export type PatientMedicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatientMedications.
     */
    data: PatientMedicationCreateManyInput | PatientMedicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientMedication update
   */
  export type PatientMedicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientMedication.
     */
    data: XOR<PatientMedicationUpdateInput, PatientMedicationUncheckedUpdateInput>
    /**
     * Choose, which PatientMedication to update.
     */
    where: PatientMedicationWhereUniqueInput
  }

  /**
   * PatientMedication updateMany
   */
  export type PatientMedicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientMedications.
     */
    data: XOR<PatientMedicationUpdateManyMutationInput, PatientMedicationUncheckedUpdateManyInput>
    /**
     * Filter which PatientMedications to update
     */
    where?: PatientMedicationWhereInput
  }

  /**
   * PatientMedication upsert
   */
  export type PatientMedicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientMedication to update in case it exists.
     */
    where: PatientMedicationWhereUniqueInput
    /**
     * In case the PatientMedication found by the `where` argument doesn't exist, create a new PatientMedication with this data.
     */
    create: XOR<PatientMedicationCreateInput, PatientMedicationUncheckedCreateInput>
    /**
     * In case the PatientMedication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientMedicationUpdateInput, PatientMedicationUncheckedUpdateInput>
  }

  /**
   * PatientMedication delete
   */
  export type PatientMedicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    /**
     * Filter which PatientMedication to delete.
     */
    where: PatientMedicationWhereUniqueInput
  }

  /**
   * PatientMedication deleteMany
   */
  export type PatientMedicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientMedications to delete
     */
    where?: PatientMedicationWhereInput
  }

  /**
   * PatientMedication.patientAssessment
   */
  export type PatientMedication$patientAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    where?: PatientAssessmentWhereInput
  }

  /**
   * PatientMedication.billing
   */
  export type PatientMedication$billingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    where?: BillingsWhereInput
  }

  /**
   * PatientMedication without action
   */
  export type PatientMedicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
  }


  /**
   * Model PatientPackage
   */

  export type AggregatePatientPackage = {
    _count: PatientPackageCountAggregateOutputType | null
    _avg: PatientPackageAvgAggregateOutputType | null
    _sum: PatientPackageSumAggregateOutputType | null
    _min: PatientPackageMinAggregateOutputType | null
    _max: PatientPackageMaxAggregateOutputType | null
  }

  export type PatientPackageAvgAggregateOutputType = {
    id: number | null
    packageId: number | null
    quantity: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientPackageSumAggregateOutputType = {
    id: number | null
    packageId: number | null
    quantity: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientPackageMinAggregateOutputType = {
    id: number | null
    packageId: number | null
    quantity: number | null
    notes: string | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientPackageMaxAggregateOutputType = {
    id: number | null
    packageId: number | null
    quantity: number | null
    notes: string | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientPackageCountAggregateOutputType = {
    id: number
    packageId: number
    quantity: number
    notes: number
    patientAssessmentId: number
    billingId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PatientPackageAvgAggregateInputType = {
    id?: true
    packageId?: true
    quantity?: true
    patientAssessmentId?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientPackageSumAggregateInputType = {
    id?: true
    packageId?: true
    quantity?: true
    patientAssessmentId?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientPackageMinAggregateInputType = {
    id?: true
    packageId?: true
    quantity?: true
    notes?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientPackageMaxAggregateInputType = {
    id?: true
    packageId?: true
    quantity?: true
    notes?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientPackageCountAggregateInputType = {
    id?: true
    packageId?: true
    quantity?: true
    notes?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PatientPackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientPackage to aggregate.
     */
    where?: PatientPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientPackages to fetch.
     */
    orderBy?: PatientPackageOrderByWithRelationInput | PatientPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientPackages
    **/
    _count?: true | PatientPackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientPackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientPackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientPackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientPackageMaxAggregateInputType
  }

  export type GetPatientPackageAggregateType<T extends PatientPackageAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientPackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientPackage[P]>
      : GetScalarType<T[P], AggregatePatientPackage[P]>
  }




  export type PatientPackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientPackageWhereInput
    orderBy?: PatientPackageOrderByWithAggregationInput | PatientPackageOrderByWithAggregationInput[]
    by: PatientPackageScalarFieldEnum[] | PatientPackageScalarFieldEnum
    having?: PatientPackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientPackageCountAggregateInputType | true
    _avg?: PatientPackageAvgAggregateInputType
    _sum?: PatientPackageSumAggregateInputType
    _min?: PatientPackageMinAggregateInputType
    _max?: PatientPackageMaxAggregateInputType
  }

  export type PatientPackageGroupByOutputType = {
    id: number
    packageId: number
    quantity: number
    notes: string | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: PatientPackageCountAggregateOutputType | null
    _avg: PatientPackageAvgAggregateOutputType | null
    _sum: PatientPackageSumAggregateOutputType | null
    _min: PatientPackageMinAggregateOutputType | null
    _max: PatientPackageMaxAggregateOutputType | null
  }

  type GetPatientPackageGroupByPayload<T extends PatientPackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientPackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientPackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientPackageGroupByOutputType[P]>
            : GetScalarType<T[P], PatientPackageGroupByOutputType[P]>
        }
      >
    >


  export type PatientPackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    quantity?: boolean
    notes?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientPackage$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientPackage$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientPackage"]>

  export type PatientPackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    quantity?: boolean
    notes?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientPackage$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientPackage$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientPackage"]>

  export type PatientPackageSelectScalar = {
    id?: boolean
    packageId?: boolean
    quantity?: boolean
    notes?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PatientPackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientPackage$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientPackage$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type PatientPackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientPackage$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientPackage$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PatientPackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientPackage"
    objects: {
      package: Prisma.$PackagePayload<ExtArgs>
      patientAssessment: Prisma.$PatientAssessmentPayload<ExtArgs> | null
      billing: Prisma.$BillingsPayload<ExtArgs> | null
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      packageId: number
      quantity: number
      notes: string | null
      patientAssessmentId: number | null
      billingId: number | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["patientPackage"]>
    composites: {}
  }

  type PatientPackageGetPayload<S extends boolean | null | undefined | PatientPackageDefaultArgs> = $Result.GetResult<Prisma.$PatientPackagePayload, S>

  type PatientPackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientPackageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientPackageCountAggregateInputType | true
    }

  export interface PatientPackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientPackage'], meta: { name: 'PatientPackage' } }
    /**
     * Find zero or one PatientPackage that matches the filter.
     * @param {PatientPackageFindUniqueArgs} args - Arguments to find a PatientPackage
     * @example
     * // Get one PatientPackage
     * const patientPackage = await prisma.patientPackage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientPackageFindUniqueArgs>(args: SelectSubset<T, PatientPackageFindUniqueArgs<ExtArgs>>): Prisma__PatientPackageClient<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatientPackage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientPackageFindUniqueOrThrowArgs} args - Arguments to find a PatientPackage
     * @example
     * // Get one PatientPackage
     * const patientPackage = await prisma.patientPackage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientPackageFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientPackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientPackageClient<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatientPackage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPackageFindFirstArgs} args - Arguments to find a PatientPackage
     * @example
     * // Get one PatientPackage
     * const patientPackage = await prisma.patientPackage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientPackageFindFirstArgs>(args?: SelectSubset<T, PatientPackageFindFirstArgs<ExtArgs>>): Prisma__PatientPackageClient<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatientPackage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPackageFindFirstOrThrowArgs} args - Arguments to find a PatientPackage
     * @example
     * // Get one PatientPackage
     * const patientPackage = await prisma.patientPackage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientPackageFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientPackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientPackageClient<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatientPackages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientPackages
     * const patientPackages = await prisma.patientPackage.findMany()
     * 
     * // Get first 10 PatientPackages
     * const patientPackages = await prisma.patientPackage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientPackageWithIdOnly = await prisma.patientPackage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientPackageFindManyArgs>(args?: SelectSubset<T, PatientPackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatientPackage.
     * @param {PatientPackageCreateArgs} args - Arguments to create a PatientPackage.
     * @example
     * // Create one PatientPackage
     * const PatientPackage = await prisma.patientPackage.create({
     *   data: {
     *     // ... data to create a PatientPackage
     *   }
     * })
     * 
     */
    create<T extends PatientPackageCreateArgs>(args: SelectSubset<T, PatientPackageCreateArgs<ExtArgs>>): Prisma__PatientPackageClient<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatientPackages.
     * @param {PatientPackageCreateManyArgs} args - Arguments to create many PatientPackages.
     * @example
     * // Create many PatientPackages
     * const patientPackage = await prisma.patientPackage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientPackageCreateManyArgs>(args?: SelectSubset<T, PatientPackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientPackages and returns the data saved in the database.
     * @param {PatientPackageCreateManyAndReturnArgs} args - Arguments to create many PatientPackages.
     * @example
     * // Create many PatientPackages
     * const patientPackage = await prisma.patientPackage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientPackages and only return the `id`
     * const patientPackageWithIdOnly = await prisma.patientPackage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientPackageCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientPackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatientPackage.
     * @param {PatientPackageDeleteArgs} args - Arguments to delete one PatientPackage.
     * @example
     * // Delete one PatientPackage
     * const PatientPackage = await prisma.patientPackage.delete({
     *   where: {
     *     // ... filter to delete one PatientPackage
     *   }
     * })
     * 
     */
    delete<T extends PatientPackageDeleteArgs>(args: SelectSubset<T, PatientPackageDeleteArgs<ExtArgs>>): Prisma__PatientPackageClient<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatientPackage.
     * @param {PatientPackageUpdateArgs} args - Arguments to update one PatientPackage.
     * @example
     * // Update one PatientPackage
     * const patientPackage = await prisma.patientPackage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientPackageUpdateArgs>(args: SelectSubset<T, PatientPackageUpdateArgs<ExtArgs>>): Prisma__PatientPackageClient<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatientPackages.
     * @param {PatientPackageDeleteManyArgs} args - Arguments to filter PatientPackages to delete.
     * @example
     * // Delete a few PatientPackages
     * const { count } = await prisma.patientPackage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientPackageDeleteManyArgs>(args?: SelectSubset<T, PatientPackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientPackages
     * const patientPackage = await prisma.patientPackage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientPackageUpdateManyArgs>(args: SelectSubset<T, PatientPackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientPackage.
     * @param {PatientPackageUpsertArgs} args - Arguments to update or create a PatientPackage.
     * @example
     * // Update or create a PatientPackage
     * const patientPackage = await prisma.patientPackage.upsert({
     *   create: {
     *     // ... data to create a PatientPackage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientPackage we want to update
     *   }
     * })
     */
    upsert<T extends PatientPackageUpsertArgs>(args: SelectSubset<T, PatientPackageUpsertArgs<ExtArgs>>): Prisma__PatientPackageClient<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatientPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPackageCountArgs} args - Arguments to filter PatientPackages to count.
     * @example
     * // Count the number of PatientPackages
     * const count = await prisma.patientPackage.count({
     *   where: {
     *     // ... the filter for the PatientPackages we want to count
     *   }
     * })
    **/
    count<T extends PatientPackageCountArgs>(
      args?: Subset<T, PatientPackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientPackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientPackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientPackageAggregateArgs>(args: Subset<T, PatientPackageAggregateArgs>): Prisma.PrismaPromise<GetPatientPackageAggregateType<T>>

    /**
     * Group by PatientPackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientPackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientPackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientPackageGroupByArgs['orderBy'] }
        : { orderBy?: PatientPackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientPackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientPackage model
   */
  readonly fields: PatientPackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientPackage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientPackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patientAssessment<T extends PatientPackage$patientAssessmentArgs<ExtArgs> = {}>(args?: Subset<T, PatientPackage$patientAssessmentArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    billing<T extends PatientPackage$billingArgs<ExtArgs> = {}>(args?: Subset<T, PatientPackage$billingArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientPackage model
   */ 
  interface PatientPackageFieldRefs {
    readonly id: FieldRef<"PatientPackage", 'Int'>
    readonly packageId: FieldRef<"PatientPackage", 'Int'>
    readonly quantity: FieldRef<"PatientPackage", 'Int'>
    readonly notes: FieldRef<"PatientPackage", 'String'>
    readonly patientAssessmentId: FieldRef<"PatientPackage", 'Int'>
    readonly billingId: FieldRef<"PatientPackage", 'Int'>
    readonly createdAt: FieldRef<"PatientPackage", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientPackage", 'DateTime'>
    readonly createdById: FieldRef<"PatientPackage", 'Int'>
    readonly updatedById: FieldRef<"PatientPackage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatientPackage findUnique
   */
  export type PatientPackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    /**
     * Filter, which PatientPackage to fetch.
     */
    where: PatientPackageWhereUniqueInput
  }

  /**
   * PatientPackage findUniqueOrThrow
   */
  export type PatientPackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    /**
     * Filter, which PatientPackage to fetch.
     */
    where: PatientPackageWhereUniqueInput
  }

  /**
   * PatientPackage findFirst
   */
  export type PatientPackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    /**
     * Filter, which PatientPackage to fetch.
     */
    where?: PatientPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientPackages to fetch.
     */
    orderBy?: PatientPackageOrderByWithRelationInput | PatientPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientPackages.
     */
    cursor?: PatientPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientPackages.
     */
    distinct?: PatientPackageScalarFieldEnum | PatientPackageScalarFieldEnum[]
  }

  /**
   * PatientPackage findFirstOrThrow
   */
  export type PatientPackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    /**
     * Filter, which PatientPackage to fetch.
     */
    where?: PatientPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientPackages to fetch.
     */
    orderBy?: PatientPackageOrderByWithRelationInput | PatientPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientPackages.
     */
    cursor?: PatientPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientPackages.
     */
    distinct?: PatientPackageScalarFieldEnum | PatientPackageScalarFieldEnum[]
  }

  /**
   * PatientPackage findMany
   */
  export type PatientPackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    /**
     * Filter, which PatientPackages to fetch.
     */
    where?: PatientPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientPackages to fetch.
     */
    orderBy?: PatientPackageOrderByWithRelationInput | PatientPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientPackages.
     */
    cursor?: PatientPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientPackages.
     */
    skip?: number
    distinct?: PatientPackageScalarFieldEnum | PatientPackageScalarFieldEnum[]
  }

  /**
   * PatientPackage create
   */
  export type PatientPackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientPackage.
     */
    data: XOR<PatientPackageCreateInput, PatientPackageUncheckedCreateInput>
  }

  /**
   * PatientPackage createMany
   */
  export type PatientPackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientPackages.
     */
    data: PatientPackageCreateManyInput | PatientPackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientPackage createManyAndReturn
   */
  export type PatientPackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatientPackages.
     */
    data: PatientPackageCreateManyInput | PatientPackageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientPackage update
   */
  export type PatientPackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientPackage.
     */
    data: XOR<PatientPackageUpdateInput, PatientPackageUncheckedUpdateInput>
    /**
     * Choose, which PatientPackage to update.
     */
    where: PatientPackageWhereUniqueInput
  }

  /**
   * PatientPackage updateMany
   */
  export type PatientPackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientPackages.
     */
    data: XOR<PatientPackageUpdateManyMutationInput, PatientPackageUncheckedUpdateManyInput>
    /**
     * Filter which PatientPackages to update
     */
    where?: PatientPackageWhereInput
  }

  /**
   * PatientPackage upsert
   */
  export type PatientPackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientPackage to update in case it exists.
     */
    where: PatientPackageWhereUniqueInput
    /**
     * In case the PatientPackage found by the `where` argument doesn't exist, create a new PatientPackage with this data.
     */
    create: XOR<PatientPackageCreateInput, PatientPackageUncheckedCreateInput>
    /**
     * In case the PatientPackage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientPackageUpdateInput, PatientPackageUncheckedUpdateInput>
  }

  /**
   * PatientPackage delete
   */
  export type PatientPackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    /**
     * Filter which PatientPackage to delete.
     */
    where: PatientPackageWhereUniqueInput
  }

  /**
   * PatientPackage deleteMany
   */
  export type PatientPackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientPackages to delete
     */
    where?: PatientPackageWhereInput
  }

  /**
   * PatientPackage.patientAssessment
   */
  export type PatientPackage$patientAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    where?: PatientAssessmentWhereInput
  }

  /**
   * PatientPackage.billing
   */
  export type PatientPackage$billingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    where?: BillingsWhereInput
  }

  /**
   * PatientPackage without action
   */
  export type PatientPackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
  }


  /**
   * Model PatientItem
   */

  export type AggregatePatientItem = {
    _count: PatientItemCountAggregateOutputType | null
    _avg: PatientItemAvgAggregateOutputType | null
    _sum: PatientItemSumAggregateOutputType | null
    _min: PatientItemMinAggregateOutputType | null
    _max: PatientItemMaxAggregateOutputType | null
  }

  export type PatientItemAvgAggregateOutputType = {
    id: number | null
    itemId: number | null
    quantity: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientItemSumAggregateOutputType = {
    id: number | null
    itemId: number | null
    quantity: number | null
    patientAssessmentId: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientItemMinAggregateOutputType = {
    id: number | null
    itemId: number | null
    quantity: number | null
    notes: string | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientItemMaxAggregateOutputType = {
    id: number | null
    itemId: number | null
    quantity: number | null
    notes: string | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PatientItemCountAggregateOutputType = {
    id: number
    itemId: number
    quantity: number
    notes: number
    patientAssessmentId: number
    billingId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PatientItemAvgAggregateInputType = {
    id?: true
    itemId?: true
    quantity?: true
    patientAssessmentId?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientItemSumAggregateInputType = {
    id?: true
    itemId?: true
    quantity?: true
    patientAssessmentId?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientItemMinAggregateInputType = {
    id?: true
    itemId?: true
    quantity?: true
    notes?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientItemMaxAggregateInputType = {
    id?: true
    itemId?: true
    quantity?: true
    notes?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PatientItemCountAggregateInputType = {
    id?: true
    itemId?: true
    quantity?: true
    notes?: true
    patientAssessmentId?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PatientItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientItem to aggregate.
     */
    where?: PatientItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientItems to fetch.
     */
    orderBy?: PatientItemOrderByWithRelationInput | PatientItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientItems
    **/
    _count?: true | PatientItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientItemMaxAggregateInputType
  }

  export type GetPatientItemAggregateType<T extends PatientItemAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientItem[P]>
      : GetScalarType<T[P], AggregatePatientItem[P]>
  }




  export type PatientItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientItemWhereInput
    orderBy?: PatientItemOrderByWithAggregationInput | PatientItemOrderByWithAggregationInput[]
    by: PatientItemScalarFieldEnum[] | PatientItemScalarFieldEnum
    having?: PatientItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientItemCountAggregateInputType | true
    _avg?: PatientItemAvgAggregateInputType
    _sum?: PatientItemSumAggregateInputType
    _min?: PatientItemMinAggregateInputType
    _max?: PatientItemMaxAggregateInputType
  }

  export type PatientItemGroupByOutputType = {
    id: number
    itemId: number
    quantity: number
    notes: string | null
    patientAssessmentId: number | null
    billingId: number | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: PatientItemCountAggregateOutputType | null
    _avg: PatientItemAvgAggregateOutputType | null
    _sum: PatientItemSumAggregateOutputType | null
    _min: PatientItemMinAggregateOutputType | null
    _max: PatientItemMaxAggregateOutputType | null
  }

  type GetPatientItemGroupByPayload<T extends PatientItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientItemGroupByOutputType[P]>
            : GetScalarType<T[P], PatientItemGroupByOutputType[P]>
        }
      >
    >


  export type PatientItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    quantity?: boolean
    notes?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    item?: boolean | ItemDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientItem$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientItem$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientItem"]>

  export type PatientItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    quantity?: boolean
    notes?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    item?: boolean | ItemDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientItem$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientItem$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientItem"]>

  export type PatientItemSelectScalar = {
    id?: boolean
    itemId?: boolean
    quantity?: boolean
    notes?: boolean
    patientAssessmentId?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PatientItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ItemDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientItem$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientItem$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type PatientItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | ItemDefaultArgs<ExtArgs>
    patientAssessment?: boolean | PatientItem$patientAssessmentArgs<ExtArgs>
    billing?: boolean | PatientItem$billingArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PatientItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientItem"
    objects: {
      item: Prisma.$ItemPayload<ExtArgs>
      patientAssessment: Prisma.$PatientAssessmentPayload<ExtArgs> | null
      billing: Prisma.$BillingsPayload<ExtArgs> | null
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      itemId: number
      quantity: number
      notes: string | null
      patientAssessmentId: number | null
      billingId: number | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["patientItem"]>
    composites: {}
  }

  type PatientItemGetPayload<S extends boolean | null | undefined | PatientItemDefaultArgs> = $Result.GetResult<Prisma.$PatientItemPayload, S>

  type PatientItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientItemCountAggregateInputType | true
    }

  export interface PatientItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientItem'], meta: { name: 'PatientItem' } }
    /**
     * Find zero or one PatientItem that matches the filter.
     * @param {PatientItemFindUniqueArgs} args - Arguments to find a PatientItem
     * @example
     * // Get one PatientItem
     * const patientItem = await prisma.patientItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientItemFindUniqueArgs>(args: SelectSubset<T, PatientItemFindUniqueArgs<ExtArgs>>): Prisma__PatientItemClient<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatientItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientItemFindUniqueOrThrowArgs} args - Arguments to find a PatientItem
     * @example
     * // Get one PatientItem
     * const patientItem = await prisma.patientItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientItemFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientItemClient<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatientItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientItemFindFirstArgs} args - Arguments to find a PatientItem
     * @example
     * // Get one PatientItem
     * const patientItem = await prisma.patientItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientItemFindFirstArgs>(args?: SelectSubset<T, PatientItemFindFirstArgs<ExtArgs>>): Prisma__PatientItemClient<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatientItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientItemFindFirstOrThrowArgs} args - Arguments to find a PatientItem
     * @example
     * // Get one PatientItem
     * const patientItem = await prisma.patientItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientItemFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientItemClient<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatientItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientItems
     * const patientItems = await prisma.patientItem.findMany()
     * 
     * // Get first 10 PatientItems
     * const patientItems = await prisma.patientItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientItemWithIdOnly = await prisma.patientItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientItemFindManyArgs>(args?: SelectSubset<T, PatientItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatientItem.
     * @param {PatientItemCreateArgs} args - Arguments to create a PatientItem.
     * @example
     * // Create one PatientItem
     * const PatientItem = await prisma.patientItem.create({
     *   data: {
     *     // ... data to create a PatientItem
     *   }
     * })
     * 
     */
    create<T extends PatientItemCreateArgs>(args: SelectSubset<T, PatientItemCreateArgs<ExtArgs>>): Prisma__PatientItemClient<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatientItems.
     * @param {PatientItemCreateManyArgs} args - Arguments to create many PatientItems.
     * @example
     * // Create many PatientItems
     * const patientItem = await prisma.patientItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientItemCreateManyArgs>(args?: SelectSubset<T, PatientItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientItems and returns the data saved in the database.
     * @param {PatientItemCreateManyAndReturnArgs} args - Arguments to create many PatientItems.
     * @example
     * // Create many PatientItems
     * const patientItem = await prisma.patientItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientItems and only return the `id`
     * const patientItemWithIdOnly = await prisma.patientItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientItemCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatientItem.
     * @param {PatientItemDeleteArgs} args - Arguments to delete one PatientItem.
     * @example
     * // Delete one PatientItem
     * const PatientItem = await prisma.patientItem.delete({
     *   where: {
     *     // ... filter to delete one PatientItem
     *   }
     * })
     * 
     */
    delete<T extends PatientItemDeleteArgs>(args: SelectSubset<T, PatientItemDeleteArgs<ExtArgs>>): Prisma__PatientItemClient<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatientItem.
     * @param {PatientItemUpdateArgs} args - Arguments to update one PatientItem.
     * @example
     * // Update one PatientItem
     * const patientItem = await prisma.patientItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientItemUpdateArgs>(args: SelectSubset<T, PatientItemUpdateArgs<ExtArgs>>): Prisma__PatientItemClient<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatientItems.
     * @param {PatientItemDeleteManyArgs} args - Arguments to filter PatientItems to delete.
     * @example
     * // Delete a few PatientItems
     * const { count } = await prisma.patientItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientItemDeleteManyArgs>(args?: SelectSubset<T, PatientItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientItems
     * const patientItem = await prisma.patientItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientItemUpdateManyArgs>(args: SelectSubset<T, PatientItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientItem.
     * @param {PatientItemUpsertArgs} args - Arguments to update or create a PatientItem.
     * @example
     * // Update or create a PatientItem
     * const patientItem = await prisma.patientItem.upsert({
     *   create: {
     *     // ... data to create a PatientItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientItem we want to update
     *   }
     * })
     */
    upsert<T extends PatientItemUpsertArgs>(args: SelectSubset<T, PatientItemUpsertArgs<ExtArgs>>): Prisma__PatientItemClient<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatientItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientItemCountArgs} args - Arguments to filter PatientItems to count.
     * @example
     * // Count the number of PatientItems
     * const count = await prisma.patientItem.count({
     *   where: {
     *     // ... the filter for the PatientItems we want to count
     *   }
     * })
    **/
    count<T extends PatientItemCountArgs>(
      args?: Subset<T, PatientItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientItemAggregateArgs>(args: Subset<T, PatientItemAggregateArgs>): Prisma.PrismaPromise<GetPatientItemAggregateType<T>>

    /**
     * Group by PatientItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientItemGroupByArgs['orderBy'] }
        : { orderBy?: PatientItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientItem model
   */
  readonly fields: PatientItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends ItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ItemDefaultArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patientAssessment<T extends PatientItem$patientAssessmentArgs<ExtArgs> = {}>(args?: Subset<T, PatientItem$patientAssessmentArgs<ExtArgs>>): Prisma__PatientAssessmentClient<$Result.GetResult<Prisma.$PatientAssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    billing<T extends PatientItem$billingArgs<ExtArgs> = {}>(args?: Subset<T, PatientItem$billingArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientItem model
   */ 
  interface PatientItemFieldRefs {
    readonly id: FieldRef<"PatientItem", 'Int'>
    readonly itemId: FieldRef<"PatientItem", 'Int'>
    readonly quantity: FieldRef<"PatientItem", 'Int'>
    readonly notes: FieldRef<"PatientItem", 'String'>
    readonly patientAssessmentId: FieldRef<"PatientItem", 'Int'>
    readonly billingId: FieldRef<"PatientItem", 'Int'>
    readonly createdAt: FieldRef<"PatientItem", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientItem", 'DateTime'>
    readonly createdById: FieldRef<"PatientItem", 'Int'>
    readonly updatedById: FieldRef<"PatientItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PatientItem findUnique
   */
  export type PatientItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    /**
     * Filter, which PatientItem to fetch.
     */
    where: PatientItemWhereUniqueInput
  }

  /**
   * PatientItem findUniqueOrThrow
   */
  export type PatientItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    /**
     * Filter, which PatientItem to fetch.
     */
    where: PatientItemWhereUniqueInput
  }

  /**
   * PatientItem findFirst
   */
  export type PatientItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    /**
     * Filter, which PatientItem to fetch.
     */
    where?: PatientItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientItems to fetch.
     */
    orderBy?: PatientItemOrderByWithRelationInput | PatientItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientItems.
     */
    cursor?: PatientItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientItems.
     */
    distinct?: PatientItemScalarFieldEnum | PatientItemScalarFieldEnum[]
  }

  /**
   * PatientItem findFirstOrThrow
   */
  export type PatientItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    /**
     * Filter, which PatientItem to fetch.
     */
    where?: PatientItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientItems to fetch.
     */
    orderBy?: PatientItemOrderByWithRelationInput | PatientItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientItems.
     */
    cursor?: PatientItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientItems.
     */
    distinct?: PatientItemScalarFieldEnum | PatientItemScalarFieldEnum[]
  }

  /**
   * PatientItem findMany
   */
  export type PatientItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    /**
     * Filter, which PatientItems to fetch.
     */
    where?: PatientItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientItems to fetch.
     */
    orderBy?: PatientItemOrderByWithRelationInput | PatientItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientItems.
     */
    cursor?: PatientItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientItems.
     */
    skip?: number
    distinct?: PatientItemScalarFieldEnum | PatientItemScalarFieldEnum[]
  }

  /**
   * PatientItem create
   */
  export type PatientItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientItem.
     */
    data: XOR<PatientItemCreateInput, PatientItemUncheckedCreateInput>
  }

  /**
   * PatientItem createMany
   */
  export type PatientItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientItems.
     */
    data: PatientItemCreateManyInput | PatientItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientItem createManyAndReturn
   */
  export type PatientItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatientItems.
     */
    data: PatientItemCreateManyInput | PatientItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientItem update
   */
  export type PatientItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientItem.
     */
    data: XOR<PatientItemUpdateInput, PatientItemUncheckedUpdateInput>
    /**
     * Choose, which PatientItem to update.
     */
    where: PatientItemWhereUniqueInput
  }

  /**
   * PatientItem updateMany
   */
  export type PatientItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientItems.
     */
    data: XOR<PatientItemUpdateManyMutationInput, PatientItemUncheckedUpdateManyInput>
    /**
     * Filter which PatientItems to update
     */
    where?: PatientItemWhereInput
  }

  /**
   * PatientItem upsert
   */
  export type PatientItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientItem to update in case it exists.
     */
    where: PatientItemWhereUniqueInput
    /**
     * In case the PatientItem found by the `where` argument doesn't exist, create a new PatientItem with this data.
     */
    create: XOR<PatientItemCreateInput, PatientItemUncheckedCreateInput>
    /**
     * In case the PatientItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientItemUpdateInput, PatientItemUncheckedUpdateInput>
  }

  /**
   * PatientItem delete
   */
  export type PatientItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    /**
     * Filter which PatientItem to delete.
     */
    where: PatientItemWhereUniqueInput
  }

  /**
   * PatientItem deleteMany
   */
  export type PatientItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientItems to delete
     */
    where?: PatientItemWhereInput
  }

  /**
   * PatientItem.patientAssessment
   */
  export type PatientItem$patientAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientAssessment
     */
    select?: PatientAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientAssessmentInclude<ExtArgs> | null
    where?: PatientAssessmentWhereInput
  }

  /**
   * PatientItem.billing
   */
  export type PatientItem$billingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    where?: BillingsWhereInput
  }

  /**
   * PatientItem without action
   */
  export type PatientItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
  }


  /**
   * Model Medicine
   */

  export type AggregateMedicine = {
    _count: MedicineCountAggregateOutputType | null
    _avg: MedicineAvgAggregateOutputType | null
    _sum: MedicineSumAggregateOutputType | null
    _min: MedicineMinAggregateOutputType | null
    _max: MedicineMaxAggregateOutputType | null
  }

  export type MedicineAvgAggregateOutputType = {
    id: number | null
    cost: number | null
    price: number | null
    quantity: number | null
    reorderPoint: number | null
    categoryId: number | null
    supplierId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type MedicineSumAggregateOutputType = {
    id: number | null
    cost: number | null
    price: number | null
    quantity: number | null
    reorderPoint: number | null
    categoryId: number | null
    supplierId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type MedicineMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    cost: number | null
    price: number | null
    quantity: number | null
    reorderPoint: number | null
    unit: string | null
    expirationDate: Date | null
    categoryId: number | null
    supplierId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type MedicineMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    cost: number | null
    price: number | null
    quantity: number | null
    reorderPoint: number | null
    unit: string | null
    expirationDate: Date | null
    categoryId: number | null
    supplierId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type MedicineCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: number
    expirationDate: number
    categoryId: number
    supplierId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type MedicineAvgAggregateInputType = {
    id?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    categoryId?: true
    supplierId?: true
    createdById?: true
    updatedById?: true
  }

  export type MedicineSumAggregateInputType = {
    id?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    categoryId?: true
    supplierId?: true
    createdById?: true
    updatedById?: true
  }

  export type MedicineMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    unit?: true
    expirationDate?: true
    categoryId?: true
    supplierId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type MedicineMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    unit?: true
    expirationDate?: true
    categoryId?: true
    supplierId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type MedicineCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    unit?: true
    expirationDate?: true
    categoryId?: true
    supplierId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type MedicineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medicine to aggregate.
     */
    where?: MedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medicines
    **/
    _count?: true | MedicineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicineMaxAggregateInputType
  }

  export type GetMedicineAggregateType<T extends MedicineAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicine[P]>
      : GetScalarType<T[P], AggregateMedicine[P]>
  }




  export type MedicineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicineWhereInput
    orderBy?: MedicineOrderByWithAggregationInput | MedicineOrderByWithAggregationInput[]
    by: MedicineScalarFieldEnum[] | MedicineScalarFieldEnum
    having?: MedicineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicineCountAggregateInputType | true
    _avg?: MedicineAvgAggregateInputType
    _sum?: MedicineSumAggregateInputType
    _min?: MedicineMinAggregateInputType
    _max?: MedicineMaxAggregateInputType
  }

  export type MedicineGroupByOutputType = {
    id: number
    code: string
    name: string
    description: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate: Date | null
    categoryId: number
    supplierId: number
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: MedicineCountAggregateOutputType | null
    _avg: MedicineAvgAggregateOutputType | null
    _sum: MedicineSumAggregateOutputType | null
    _min: MedicineMinAggregateOutputType | null
    _max: MedicineMaxAggregateOutputType | null
  }

  type GetMedicineGroupByPayload<T extends MedicineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicineGroupByOutputType[P]>
            : GetScalarType<T[P], MedicineGroupByOutputType[P]>
        }
      >
    >


  export type MedicineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    quantity?: boolean
    reorderPoint?: boolean
    unit?: boolean
    expirationDate?: boolean
    categoryId?: boolean
    supplierId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    patientMedications?: boolean | Medicine$patientMedicationsArgs<ExtArgs>
    inventoryTransactions?: boolean | Medicine$inventoryTransactionsArgs<ExtArgs>
    inventoryCountItems?: boolean | Medicine$inventoryCountItemsArgs<ExtArgs>
    purchaseOrderItems?: boolean | Medicine$purchaseOrderItemsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | MedicineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicine"]>

  export type MedicineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    quantity?: boolean
    reorderPoint?: boolean
    unit?: boolean
    expirationDate?: boolean
    categoryId?: boolean
    supplierId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicine"]>

  export type MedicineSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    quantity?: boolean
    reorderPoint?: boolean
    unit?: boolean
    expirationDate?: boolean
    categoryId?: boolean
    supplierId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type MedicineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    patientMedications?: boolean | Medicine$patientMedicationsArgs<ExtArgs>
    inventoryTransactions?: boolean | Medicine$inventoryTransactionsArgs<ExtArgs>
    inventoryCountItems?: boolean | Medicine$inventoryCountItemsArgs<ExtArgs>
    purchaseOrderItems?: boolean | Medicine$purchaseOrderItemsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | MedicineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $MedicinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Medicine"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      supplier: Prisma.$SupplierPayload<ExtArgs>
      patientMedications: Prisma.$PatientMedicationPayload<ExtArgs>[]
      inventoryTransactions: Prisma.$InventoryTransactionPayload<ExtArgs>[]
      inventoryCountItems: Prisma.$InventoryCountItemPayload<ExtArgs>[]
      purchaseOrderItems: Prisma.$PurchaseOrderItemPayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      description: string | null
      cost: number
      price: number
      quantity: number
      reorderPoint: number
      unit: string
      expirationDate: Date | null
      categoryId: number
      supplierId: number
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["medicine"]>
    composites: {}
  }

  type MedicineGetPayload<S extends boolean | null | undefined | MedicineDefaultArgs> = $Result.GetResult<Prisma.$MedicinePayload, S>

  type MedicineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MedicineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MedicineCountAggregateInputType | true
    }

  export interface MedicineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medicine'], meta: { name: 'Medicine' } }
    /**
     * Find zero or one Medicine that matches the filter.
     * @param {MedicineFindUniqueArgs} args - Arguments to find a Medicine
     * @example
     * // Get one Medicine
     * const medicine = await prisma.medicine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicineFindUniqueArgs>(args: SelectSubset<T, MedicineFindUniqueArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Medicine that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MedicineFindUniqueOrThrowArgs} args - Arguments to find a Medicine
     * @example
     * // Get one Medicine
     * const medicine = await prisma.medicine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicineFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Medicine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineFindFirstArgs} args - Arguments to find a Medicine
     * @example
     * // Get one Medicine
     * const medicine = await prisma.medicine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicineFindFirstArgs>(args?: SelectSubset<T, MedicineFindFirstArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Medicine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineFindFirstOrThrowArgs} args - Arguments to find a Medicine
     * @example
     * // Get one Medicine
     * const medicine = await prisma.medicine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicineFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicineFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Medicines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medicines
     * const medicines = await prisma.medicine.findMany()
     * 
     * // Get first 10 Medicines
     * const medicines = await prisma.medicine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicineWithIdOnly = await prisma.medicine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicineFindManyArgs>(args?: SelectSubset<T, MedicineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Medicine.
     * @param {MedicineCreateArgs} args - Arguments to create a Medicine.
     * @example
     * // Create one Medicine
     * const Medicine = await prisma.medicine.create({
     *   data: {
     *     // ... data to create a Medicine
     *   }
     * })
     * 
     */
    create<T extends MedicineCreateArgs>(args: SelectSubset<T, MedicineCreateArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Medicines.
     * @param {MedicineCreateManyArgs} args - Arguments to create many Medicines.
     * @example
     * // Create many Medicines
     * const medicine = await prisma.medicine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicineCreateManyArgs>(args?: SelectSubset<T, MedicineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medicines and returns the data saved in the database.
     * @param {MedicineCreateManyAndReturnArgs} args - Arguments to create many Medicines.
     * @example
     * // Create many Medicines
     * const medicine = await prisma.medicine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medicines and only return the `id`
     * const medicineWithIdOnly = await prisma.medicine.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicineCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Medicine.
     * @param {MedicineDeleteArgs} args - Arguments to delete one Medicine.
     * @example
     * // Delete one Medicine
     * const Medicine = await prisma.medicine.delete({
     *   where: {
     *     // ... filter to delete one Medicine
     *   }
     * })
     * 
     */
    delete<T extends MedicineDeleteArgs>(args: SelectSubset<T, MedicineDeleteArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Medicine.
     * @param {MedicineUpdateArgs} args - Arguments to update one Medicine.
     * @example
     * // Update one Medicine
     * const medicine = await prisma.medicine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicineUpdateArgs>(args: SelectSubset<T, MedicineUpdateArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Medicines.
     * @param {MedicineDeleteManyArgs} args - Arguments to filter Medicines to delete.
     * @example
     * // Delete a few Medicines
     * const { count } = await prisma.medicine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicineDeleteManyArgs>(args?: SelectSubset<T, MedicineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medicines
     * const medicine = await prisma.medicine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicineUpdateManyArgs>(args: SelectSubset<T, MedicineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Medicine.
     * @param {MedicineUpsertArgs} args - Arguments to update or create a Medicine.
     * @example
     * // Update or create a Medicine
     * const medicine = await prisma.medicine.upsert({
     *   create: {
     *     // ... data to create a Medicine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medicine we want to update
     *   }
     * })
     */
    upsert<T extends MedicineUpsertArgs>(args: SelectSubset<T, MedicineUpsertArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Medicines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineCountArgs} args - Arguments to filter Medicines to count.
     * @example
     * // Count the number of Medicines
     * const count = await prisma.medicine.count({
     *   where: {
     *     // ... the filter for the Medicines we want to count
     *   }
     * })
    **/
    count<T extends MedicineCountArgs>(
      args?: Subset<T, MedicineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medicine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicineAggregateArgs>(args: Subset<T, MedicineAggregateArgs>): Prisma.PrismaPromise<GetMedicineAggregateType<T>>

    /**
     * Group by Medicine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicineGroupByArgs['orderBy'] }
        : { orderBy?: MedicineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Medicine model
   */
  readonly fields: MedicineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Medicine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    supplier<T extends SupplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SupplierDefaultArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patientMedications<T extends Medicine$patientMedicationsArgs<ExtArgs> = {}>(args?: Subset<T, Medicine$patientMedicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findMany"> | Null>
    inventoryTransactions<T extends Medicine$inventoryTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Medicine$inventoryTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    inventoryCountItems<T extends Medicine$inventoryCountItemsArgs<ExtArgs> = {}>(args?: Subset<T, Medicine$inventoryCountItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findMany"> | Null>
    purchaseOrderItems<T extends Medicine$purchaseOrderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Medicine$purchaseOrderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Medicine model
   */ 
  interface MedicineFieldRefs {
    readonly id: FieldRef<"Medicine", 'Int'>
    readonly code: FieldRef<"Medicine", 'String'>
    readonly name: FieldRef<"Medicine", 'String'>
    readonly description: FieldRef<"Medicine", 'String'>
    readonly cost: FieldRef<"Medicine", 'Float'>
    readonly price: FieldRef<"Medicine", 'Float'>
    readonly quantity: FieldRef<"Medicine", 'Int'>
    readonly reorderPoint: FieldRef<"Medicine", 'Int'>
    readonly unit: FieldRef<"Medicine", 'String'>
    readonly expirationDate: FieldRef<"Medicine", 'DateTime'>
    readonly categoryId: FieldRef<"Medicine", 'Int'>
    readonly supplierId: FieldRef<"Medicine", 'Int'>
    readonly createdAt: FieldRef<"Medicine", 'DateTime'>
    readonly updatedAt: FieldRef<"Medicine", 'DateTime'>
    readonly createdById: FieldRef<"Medicine", 'Int'>
    readonly updatedById: FieldRef<"Medicine", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Medicine findUnique
   */
  export type MedicineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicine to fetch.
     */
    where: MedicineWhereUniqueInput
  }

  /**
   * Medicine findUniqueOrThrow
   */
  export type MedicineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicine to fetch.
     */
    where: MedicineWhereUniqueInput
  }

  /**
   * Medicine findFirst
   */
  export type MedicineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicine to fetch.
     */
    where?: MedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medicines.
     */
    cursor?: MedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medicines.
     */
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Medicine findFirstOrThrow
   */
  export type MedicineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicine to fetch.
     */
    where?: MedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medicines.
     */
    cursor?: MedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medicines.
     */
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Medicine findMany
   */
  export type MedicineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter, which Medicines to fetch.
     */
    where?: MedicineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medicines to fetch.
     */
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medicines.
     */
    cursor?: MedicineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medicines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medicines.
     */
    skip?: number
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Medicine create
   */
  export type MedicineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * The data needed to create a Medicine.
     */
    data: XOR<MedicineCreateInput, MedicineUncheckedCreateInput>
  }

  /**
   * Medicine createMany
   */
  export type MedicineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Medicines.
     */
    data: MedicineCreateManyInput | MedicineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Medicine createManyAndReturn
   */
  export type MedicineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Medicines.
     */
    data: MedicineCreateManyInput | MedicineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medicine update
   */
  export type MedicineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * The data needed to update a Medicine.
     */
    data: XOR<MedicineUpdateInput, MedicineUncheckedUpdateInput>
    /**
     * Choose, which Medicine to update.
     */
    where: MedicineWhereUniqueInput
  }

  /**
   * Medicine updateMany
   */
  export type MedicineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Medicines.
     */
    data: XOR<MedicineUpdateManyMutationInput, MedicineUncheckedUpdateManyInput>
    /**
     * Filter which Medicines to update
     */
    where?: MedicineWhereInput
  }

  /**
   * Medicine upsert
   */
  export type MedicineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * The filter to search for the Medicine to update in case it exists.
     */
    where: MedicineWhereUniqueInput
    /**
     * In case the Medicine found by the `where` argument doesn't exist, create a new Medicine with this data.
     */
    create: XOR<MedicineCreateInput, MedicineUncheckedCreateInput>
    /**
     * In case the Medicine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicineUpdateInput, MedicineUncheckedUpdateInput>
  }

  /**
   * Medicine delete
   */
  export type MedicineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    /**
     * Filter which Medicine to delete.
     */
    where: MedicineWhereUniqueInput
  }

  /**
   * Medicine deleteMany
   */
  export type MedicineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medicines to delete
     */
    where?: MedicineWhereInput
  }

  /**
   * Medicine.patientMedications
   */
  export type Medicine$patientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    where?: PatientMedicationWhereInput
    orderBy?: PatientMedicationOrderByWithRelationInput | PatientMedicationOrderByWithRelationInput[]
    cursor?: PatientMedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientMedicationScalarFieldEnum | PatientMedicationScalarFieldEnum[]
  }

  /**
   * Medicine.inventoryTransactions
   */
  export type Medicine$inventoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    where?: InventoryTransactionWhereInput
    orderBy?: InventoryTransactionOrderByWithRelationInput | InventoryTransactionOrderByWithRelationInput[]
    cursor?: InventoryTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryTransactionScalarFieldEnum | InventoryTransactionScalarFieldEnum[]
  }

  /**
   * Medicine.inventoryCountItems
   */
  export type Medicine$inventoryCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    where?: InventoryCountItemWhereInput
    orderBy?: InventoryCountItemOrderByWithRelationInput | InventoryCountItemOrderByWithRelationInput[]
    cursor?: InventoryCountItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryCountItemScalarFieldEnum | InventoryCountItemScalarFieldEnum[]
  }

  /**
   * Medicine.purchaseOrderItems
   */
  export type Medicine$purchaseOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    where?: PurchaseOrderItemWhereInput
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    cursor?: PurchaseOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * Medicine without action
   */
  export type MedicineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
  }


  /**
   * Model Item
   */

  export type AggregateItem = {
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  export type ItemAvgAggregateOutputType = {
    id: number | null
    cost: number | null
    price: number | null
    quantity: number | null
    reorderPoint: number | null
    categoryId: number | null
    supplierId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type ItemSumAggregateOutputType = {
    id: number | null
    cost: number | null
    price: number | null
    quantity: number | null
    reorderPoint: number | null
    categoryId: number | null
    supplierId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type ItemMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    cost: number | null
    price: number | null
    quantity: number | null
    reorderPoint: number | null
    unit: string | null
    categoryId: number | null
    supplierId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type ItemMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    cost: number | null
    price: number | null
    quantity: number | null
    reorderPoint: number | null
    unit: string | null
    categoryId: number | null
    supplierId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type ItemCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: number
    categoryId: number
    supplierId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type ItemAvgAggregateInputType = {
    id?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    categoryId?: true
    supplierId?: true
    createdById?: true
    updatedById?: true
  }

  export type ItemSumAggregateInputType = {
    id?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    categoryId?: true
    supplierId?: true
    createdById?: true
    updatedById?: true
  }

  export type ItemMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    unit?: true
    categoryId?: true
    supplierId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ItemMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    unit?: true
    categoryId?: true
    supplierId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ItemCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    quantity?: true
    reorderPoint?: true
    unit?: true
    categoryId?: true
    supplierId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type ItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Item to aggregate.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Items
    **/
    _count?: true | ItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItemMaxAggregateInputType
  }

  export type GetItemAggregateType<T extends ItemAggregateArgs> = {
        [P in keyof T & keyof AggregateItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem[P]>
      : GetScalarType<T[P], AggregateItem[P]>
  }




  export type ItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithAggregationInput | ItemOrderByWithAggregationInput[]
    by: ItemScalarFieldEnum[] | ItemScalarFieldEnum
    having?: ItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItemCountAggregateInputType | true
    _avg?: ItemAvgAggregateInputType
    _sum?: ItemSumAggregateInputType
    _min?: ItemMinAggregateInputType
    _max?: ItemMaxAggregateInputType
  }

  export type ItemGroupByOutputType = {
    id: number
    code: string
    name: string
    description: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: ItemCountAggregateOutputType | null
    _avg: ItemAvgAggregateOutputType | null
    _sum: ItemSumAggregateOutputType | null
    _min: ItemMinAggregateOutputType | null
    _max: ItemMaxAggregateOutputType | null
  }

  type GetItemGroupByPayload<T extends ItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItemGroupByOutputType[P]>
            : GetScalarType<T[P], ItemGroupByOutputType[P]>
        }
      >
    >


  export type ItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    quantity?: boolean
    reorderPoint?: boolean
    unit?: boolean
    categoryId?: boolean
    supplierId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    patientItems?: boolean | Item$patientItemsArgs<ExtArgs>
    inventoryTransactions?: boolean | Item$inventoryTransactionsArgs<ExtArgs>
    inventoryCountItems?: boolean | Item$inventoryCountItemsArgs<ExtArgs>
    purchaseOrderItems?: boolean | Item$purchaseOrderItemsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    quantity?: boolean
    reorderPoint?: boolean
    unit?: boolean
    categoryId?: boolean
    supplierId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["item"]>

  export type ItemSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    quantity?: boolean
    reorderPoint?: boolean
    unit?: boolean
    categoryId?: boolean
    supplierId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type ItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    patientItems?: boolean | Item$patientItemsArgs<ExtArgs>
    inventoryTransactions?: boolean | Item$inventoryTransactionsArgs<ExtArgs>
    inventoryCountItems?: boolean | Item$inventoryCountItemsArgs<ExtArgs>
    purchaseOrderItems?: boolean | Item$purchaseOrderItemsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | ItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $ItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Item"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      supplier: Prisma.$SupplierPayload<ExtArgs>
      patientItems: Prisma.$PatientItemPayload<ExtArgs>[]
      inventoryTransactions: Prisma.$InventoryTransactionPayload<ExtArgs>[]
      inventoryCountItems: Prisma.$InventoryCountItemPayload<ExtArgs>[]
      purchaseOrderItems: Prisma.$PurchaseOrderItemPayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      description: string | null
      cost: number
      price: number
      quantity: number
      reorderPoint: number
      unit: string
      categoryId: number
      supplierId: number
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["item"]>
    composites: {}
  }

  type ItemGetPayload<S extends boolean | null | undefined | ItemDefaultArgs> = $Result.GetResult<Prisma.$ItemPayload, S>

  type ItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItemCountAggregateInputType | true
    }

  export interface ItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Item'], meta: { name: 'Item' } }
    /**
     * Find zero or one Item that matches the filter.
     * @param {ItemFindUniqueArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ItemFindUniqueArgs>(args: SelectSubset<T, ItemFindUniqueArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Item that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItemFindUniqueOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Item that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ItemFindFirstArgs>(args?: SelectSubset<T, ItemFindFirstArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Item that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindFirstOrThrowArgs} args - Arguments to find a Item
     * @example
     * // Get one Item
     * const item = await prisma.item.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Items that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Items
     * const items = await prisma.item.findMany()
     * 
     * // Get first 10 Items
     * const items = await prisma.item.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itemWithIdOnly = await prisma.item.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ItemFindManyArgs>(args?: SelectSubset<T, ItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Item.
     * @param {ItemCreateArgs} args - Arguments to create a Item.
     * @example
     * // Create one Item
     * const Item = await prisma.item.create({
     *   data: {
     *     // ... data to create a Item
     *   }
     * })
     * 
     */
    create<T extends ItemCreateArgs>(args: SelectSubset<T, ItemCreateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Items.
     * @param {ItemCreateManyArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ItemCreateManyArgs>(args?: SelectSubset<T, ItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Items and returns the data saved in the database.
     * @param {ItemCreateManyAndReturnArgs} args - Arguments to create many Items.
     * @example
     * // Create many Items
     * const item = await prisma.item.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Items and only return the `id`
     * const itemWithIdOnly = await prisma.item.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Item.
     * @param {ItemDeleteArgs} args - Arguments to delete one Item.
     * @example
     * // Delete one Item
     * const Item = await prisma.item.delete({
     *   where: {
     *     // ... filter to delete one Item
     *   }
     * })
     * 
     */
    delete<T extends ItemDeleteArgs>(args: SelectSubset<T, ItemDeleteArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Item.
     * @param {ItemUpdateArgs} args - Arguments to update one Item.
     * @example
     * // Update one Item
     * const item = await prisma.item.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ItemUpdateArgs>(args: SelectSubset<T, ItemUpdateArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Items.
     * @param {ItemDeleteManyArgs} args - Arguments to filter Items to delete.
     * @example
     * // Delete a few Items
     * const { count } = await prisma.item.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ItemDeleteManyArgs>(args?: SelectSubset<T, ItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Items
     * const item = await prisma.item.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ItemUpdateManyArgs>(args: SelectSubset<T, ItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item.
     * @param {ItemUpsertArgs} args - Arguments to update or create a Item.
     * @example
     * // Update or create a Item
     * const item = await prisma.item.upsert({
     *   create: {
     *     // ... data to create a Item
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item we want to update
     *   }
     * })
     */
    upsert<T extends ItemUpsertArgs>(args: SelectSubset<T, ItemUpsertArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Items.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemCountArgs} args - Arguments to filter Items to count.
     * @example
     * // Count the number of Items
     * const count = await prisma.item.count({
     *   where: {
     *     // ... the filter for the Items we want to count
     *   }
     * })
    **/
    count<T extends ItemCountArgs>(
      args?: Subset<T, ItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItemAggregateArgs>(args: Subset<T, ItemAggregateArgs>): Prisma.PrismaPromise<GetItemAggregateType<T>>

    /**
     * Group by Item.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItemGroupByArgs['orderBy'] }
        : { orderBy?: ItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Item model
   */
  readonly fields: ItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Item.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    supplier<T extends SupplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SupplierDefaultArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patientItems<T extends Item$patientItemsArgs<ExtArgs> = {}>(args?: Subset<T, Item$patientItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findMany"> | Null>
    inventoryTransactions<T extends Item$inventoryTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Item$inventoryTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    inventoryCountItems<T extends Item$inventoryCountItemsArgs<ExtArgs> = {}>(args?: Subset<T, Item$inventoryCountItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findMany"> | Null>
    purchaseOrderItems<T extends Item$purchaseOrderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Item$purchaseOrderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Item model
   */ 
  interface ItemFieldRefs {
    readonly id: FieldRef<"Item", 'Int'>
    readonly code: FieldRef<"Item", 'String'>
    readonly name: FieldRef<"Item", 'String'>
    readonly description: FieldRef<"Item", 'String'>
    readonly cost: FieldRef<"Item", 'Float'>
    readonly price: FieldRef<"Item", 'Float'>
    readonly quantity: FieldRef<"Item", 'Int'>
    readonly reorderPoint: FieldRef<"Item", 'Int'>
    readonly unit: FieldRef<"Item", 'String'>
    readonly categoryId: FieldRef<"Item", 'Int'>
    readonly supplierId: FieldRef<"Item", 'Int'>
    readonly createdAt: FieldRef<"Item", 'DateTime'>
    readonly updatedAt: FieldRef<"Item", 'DateTime'>
    readonly createdById: FieldRef<"Item", 'Int'>
    readonly updatedById: FieldRef<"Item", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Item findUnique
   */
  export type ItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findUniqueOrThrow
   */
  export type ItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item findFirst
   */
  export type ItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findFirstOrThrow
   */
  export type ItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Item to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Items.
     */
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item findMany
   */
  export type ItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter, which Items to fetch.
     */
    where?: ItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Items to fetch.
     */
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Items.
     */
    cursor?: ItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Items from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Items.
     */
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Item create
   */
  export type ItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to create a Item.
     */
    data: XOR<ItemCreateInput, ItemUncheckedCreateInput>
  }

  /**
   * Item createMany
   */
  export type ItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Item createManyAndReturn
   */
  export type ItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Items.
     */
    data: ItemCreateManyInput | ItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Item update
   */
  export type ItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The data needed to update a Item.
     */
    data: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
    /**
     * Choose, which Item to update.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item updateMany
   */
  export type ItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Items.
     */
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyInput>
    /**
     * Filter which Items to update
     */
    where?: ItemWhereInput
  }

  /**
   * Item upsert
   */
  export type ItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * The filter to search for the Item to update in case it exists.
     */
    where: ItemWhereUniqueInput
    /**
     * In case the Item found by the `where` argument doesn't exist, create a new Item with this data.
     */
    create: XOR<ItemCreateInput, ItemUncheckedCreateInput>
    /**
     * In case the Item was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItemUpdateInput, ItemUncheckedUpdateInput>
  }

  /**
   * Item delete
   */
  export type ItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    /**
     * Filter which Item to delete.
     */
    where: ItemWhereUniqueInput
  }

  /**
   * Item deleteMany
   */
  export type ItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Items to delete
     */
    where?: ItemWhereInput
  }

  /**
   * Item.patientItems
   */
  export type Item$patientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    where?: PatientItemWhereInput
    orderBy?: PatientItemOrderByWithRelationInput | PatientItemOrderByWithRelationInput[]
    cursor?: PatientItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientItemScalarFieldEnum | PatientItemScalarFieldEnum[]
  }

  /**
   * Item.inventoryTransactions
   */
  export type Item$inventoryTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    where?: InventoryTransactionWhereInput
    orderBy?: InventoryTransactionOrderByWithRelationInput | InventoryTransactionOrderByWithRelationInput[]
    cursor?: InventoryTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryTransactionScalarFieldEnum | InventoryTransactionScalarFieldEnum[]
  }

  /**
   * Item.inventoryCountItems
   */
  export type Item$inventoryCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    where?: InventoryCountItemWhereInput
    orderBy?: InventoryCountItemOrderByWithRelationInput | InventoryCountItemOrderByWithRelationInput[]
    cursor?: InventoryCountItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryCountItemScalarFieldEnum | InventoryCountItemScalarFieldEnum[]
  }

  /**
   * Item.purchaseOrderItems
   */
  export type Item$purchaseOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    where?: PurchaseOrderItemWhereInput
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    cursor?: PurchaseOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * Item without action
   */
  export type ItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
  }


  /**
   * Model Treatment
   */

  export type AggregateTreatment = {
    _count: TreatmentCountAggregateOutputType | null
    _avg: TreatmentAvgAggregateOutputType | null
    _sum: TreatmentSumAggregateOutputType | null
    _min: TreatmentMinAggregateOutputType | null
    _max: TreatmentMaxAggregateOutputType | null
  }

  export type TreatmentAvgAggregateOutputType = {
    id: number | null
    cost: number | null
    price: number | null
    categoryId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type TreatmentSumAggregateOutputType = {
    id: number | null
    cost: number | null
    price: number | null
    categoryId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type TreatmentMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    cost: number | null
    price: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type TreatmentMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    cost: number | null
    price: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type TreatmentCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    cost: number
    price: number
    categoryId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type TreatmentAvgAggregateInputType = {
    id?: true
    cost?: true
    price?: true
    categoryId?: true
    createdById?: true
    updatedById?: true
  }

  export type TreatmentSumAggregateInputType = {
    id?: true
    cost?: true
    price?: true
    categoryId?: true
    createdById?: true
    updatedById?: true
  }

  export type TreatmentMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type TreatmentMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type TreatmentCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type TreatmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treatment to aggregate.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Treatments
    **/
    _count?: true | TreatmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TreatmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TreatmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreatmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreatmentMaxAggregateInputType
  }

  export type GetTreatmentAggregateType<T extends TreatmentAggregateArgs> = {
        [P in keyof T & keyof AggregateTreatment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreatment[P]>
      : GetScalarType<T[P], AggregateTreatment[P]>
  }




  export type TreatmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithAggregationInput | TreatmentOrderByWithAggregationInput[]
    by: TreatmentScalarFieldEnum[] | TreatmentScalarFieldEnum
    having?: TreatmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreatmentCountAggregateInputType | true
    _avg?: TreatmentAvgAggregateInputType
    _sum?: TreatmentSumAggregateInputType
    _min?: TreatmentMinAggregateInputType
    _max?: TreatmentMaxAggregateInputType
  }

  export type TreatmentGroupByOutputType = {
    id: number
    code: string
    name: string
    description: string | null
    cost: number
    price: number
    categoryId: number
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: TreatmentCountAggregateOutputType | null
    _avg: TreatmentAvgAggregateOutputType | null
    _sum: TreatmentSumAggregateOutputType | null
    _min: TreatmentMinAggregateOutputType | null
    _max: TreatmentMaxAggregateOutputType | null
  }

  type GetTreatmentGroupByPayload<T extends TreatmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreatmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreatmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreatmentGroupByOutputType[P]>
            : GetScalarType<T[P], TreatmentGroupByOutputType[P]>
        }
      >
    >


  export type TreatmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    patientTreatments?: boolean | Treatment$patientTreatmentsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | TreatmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatment"]>

  export type TreatmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatment"]>

  export type TreatmentSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type TreatmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    patientTreatments?: boolean | Treatment$patientTreatmentsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | TreatmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TreatmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $TreatmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Treatment"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      patientTreatments: Prisma.$PatientTreatmentPayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      description: string | null
      cost: number
      price: number
      categoryId: number
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["treatment"]>
    composites: {}
  }

  type TreatmentGetPayload<S extends boolean | null | undefined | TreatmentDefaultArgs> = $Result.GetResult<Prisma.$TreatmentPayload, S>

  type TreatmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TreatmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TreatmentCountAggregateInputType | true
    }

  export interface TreatmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Treatment'], meta: { name: 'Treatment' } }
    /**
     * Find zero or one Treatment that matches the filter.
     * @param {TreatmentFindUniqueArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreatmentFindUniqueArgs>(args: SelectSubset<T, TreatmentFindUniqueArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Treatment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TreatmentFindUniqueOrThrowArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreatmentFindUniqueOrThrowArgs>(args: SelectSubset<T, TreatmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Treatment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindFirstArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreatmentFindFirstArgs>(args?: SelectSubset<T, TreatmentFindFirstArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Treatment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindFirstOrThrowArgs} args - Arguments to find a Treatment
     * @example
     * // Get one Treatment
     * const treatment = await prisma.treatment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreatmentFindFirstOrThrowArgs>(args?: SelectSubset<T, TreatmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Treatments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Treatments
     * const treatments = await prisma.treatment.findMany()
     * 
     * // Get first 10 Treatments
     * const treatments = await prisma.treatment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treatmentWithIdOnly = await prisma.treatment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreatmentFindManyArgs>(args?: SelectSubset<T, TreatmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Treatment.
     * @param {TreatmentCreateArgs} args - Arguments to create a Treatment.
     * @example
     * // Create one Treatment
     * const Treatment = await prisma.treatment.create({
     *   data: {
     *     // ... data to create a Treatment
     *   }
     * })
     * 
     */
    create<T extends TreatmentCreateArgs>(args: SelectSubset<T, TreatmentCreateArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Treatments.
     * @param {TreatmentCreateManyArgs} args - Arguments to create many Treatments.
     * @example
     * // Create many Treatments
     * const treatment = await prisma.treatment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreatmentCreateManyArgs>(args?: SelectSubset<T, TreatmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Treatments and returns the data saved in the database.
     * @param {TreatmentCreateManyAndReturnArgs} args - Arguments to create many Treatments.
     * @example
     * // Create many Treatments
     * const treatment = await prisma.treatment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Treatments and only return the `id`
     * const treatmentWithIdOnly = await prisma.treatment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TreatmentCreateManyAndReturnArgs>(args?: SelectSubset<T, TreatmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Treatment.
     * @param {TreatmentDeleteArgs} args - Arguments to delete one Treatment.
     * @example
     * // Delete one Treatment
     * const Treatment = await prisma.treatment.delete({
     *   where: {
     *     // ... filter to delete one Treatment
     *   }
     * })
     * 
     */
    delete<T extends TreatmentDeleteArgs>(args: SelectSubset<T, TreatmentDeleteArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Treatment.
     * @param {TreatmentUpdateArgs} args - Arguments to update one Treatment.
     * @example
     * // Update one Treatment
     * const treatment = await prisma.treatment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreatmentUpdateArgs>(args: SelectSubset<T, TreatmentUpdateArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Treatments.
     * @param {TreatmentDeleteManyArgs} args - Arguments to filter Treatments to delete.
     * @example
     * // Delete a few Treatments
     * const { count } = await prisma.treatment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreatmentDeleteManyArgs>(args?: SelectSubset<T, TreatmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Treatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Treatments
     * const treatment = await prisma.treatment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreatmentUpdateManyArgs>(args: SelectSubset<T, TreatmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Treatment.
     * @param {TreatmentUpsertArgs} args - Arguments to update or create a Treatment.
     * @example
     * // Update or create a Treatment
     * const treatment = await prisma.treatment.upsert({
     *   create: {
     *     // ... data to create a Treatment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Treatment we want to update
     *   }
     * })
     */
    upsert<T extends TreatmentUpsertArgs>(args: SelectSubset<T, TreatmentUpsertArgs<ExtArgs>>): Prisma__TreatmentClient<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Treatments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentCountArgs} args - Arguments to filter Treatments to count.
     * @example
     * // Count the number of Treatments
     * const count = await prisma.treatment.count({
     *   where: {
     *     // ... the filter for the Treatments we want to count
     *   }
     * })
    **/
    count<T extends TreatmentCountArgs>(
      args?: Subset<T, TreatmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreatmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Treatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreatmentAggregateArgs>(args: Subset<T, TreatmentAggregateArgs>): Prisma.PrismaPromise<GetTreatmentAggregateType<T>>

    /**
     * Group by Treatment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreatmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreatmentGroupByArgs['orderBy'] }
        : { orderBy?: TreatmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreatmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreatmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Treatment model
   */
  readonly fields: TreatmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Treatment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreatmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patientTreatments<T extends Treatment$patientTreatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Treatment$patientTreatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Treatment model
   */ 
  interface TreatmentFieldRefs {
    readonly id: FieldRef<"Treatment", 'Int'>
    readonly code: FieldRef<"Treatment", 'String'>
    readonly name: FieldRef<"Treatment", 'String'>
    readonly description: FieldRef<"Treatment", 'String'>
    readonly cost: FieldRef<"Treatment", 'Float'>
    readonly price: FieldRef<"Treatment", 'Float'>
    readonly categoryId: FieldRef<"Treatment", 'Int'>
    readonly createdAt: FieldRef<"Treatment", 'DateTime'>
    readonly updatedAt: FieldRef<"Treatment", 'DateTime'>
    readonly createdById: FieldRef<"Treatment", 'Int'>
    readonly updatedById: FieldRef<"Treatment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Treatment findUnique
   */
  export type TreatmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment findUniqueOrThrow
   */
  export type TreatmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment findFirst
   */
  export type TreatmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treatments.
     */
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment findFirstOrThrow
   */
  export type TreatmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatment to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treatments.
     */
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment findMany
   */
  export type TreatmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter, which Treatments to fetch.
     */
    where?: TreatmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treatments to fetch.
     */
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Treatments.
     */
    cursor?: TreatmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treatments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treatments.
     */
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Treatment create
   */
  export type TreatmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Treatment.
     */
    data: XOR<TreatmentCreateInput, TreatmentUncheckedCreateInput>
  }

  /**
   * Treatment createMany
   */
  export type TreatmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Treatments.
     */
    data: TreatmentCreateManyInput | TreatmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Treatment createManyAndReturn
   */
  export type TreatmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Treatments.
     */
    data: TreatmentCreateManyInput | TreatmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Treatment update
   */
  export type TreatmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Treatment.
     */
    data: XOR<TreatmentUpdateInput, TreatmentUncheckedUpdateInput>
    /**
     * Choose, which Treatment to update.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment updateMany
   */
  export type TreatmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Treatments.
     */
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyInput>
    /**
     * Filter which Treatments to update
     */
    where?: TreatmentWhereInput
  }

  /**
   * Treatment upsert
   */
  export type TreatmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Treatment to update in case it exists.
     */
    where: TreatmentWhereUniqueInput
    /**
     * In case the Treatment found by the `where` argument doesn't exist, create a new Treatment with this data.
     */
    create: XOR<TreatmentCreateInput, TreatmentUncheckedCreateInput>
    /**
     * In case the Treatment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreatmentUpdateInput, TreatmentUncheckedUpdateInput>
  }

  /**
   * Treatment delete
   */
  export type TreatmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    /**
     * Filter which Treatment to delete.
     */
    where: TreatmentWhereUniqueInput
  }

  /**
   * Treatment deleteMany
   */
  export type TreatmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Treatments to delete
     */
    where?: TreatmentWhereInput
  }

  /**
   * Treatment.patientTreatments
   */
  export type Treatment$patientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    cursor?: PatientTreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * Treatment without action
   */
  export type TreatmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
  }


  /**
   * Model Package
   */

  export type AggregatePackage = {
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  export type PackageAvgAggregateOutputType = {
    id: number | null
    cost: number | null
    price: number | null
    categoryId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PackageSumAggregateOutputType = {
    id: number | null
    cost: number | null
    price: number | null
    categoryId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PackageMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    cost: number | null
    price: number | null
    duration: string | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PackageMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    description: string | null
    cost: number | null
    price: number | null
    duration: string | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PackageCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    cost: number
    price: number
    duration: number
    categoryId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PackageAvgAggregateInputType = {
    id?: true
    cost?: true
    price?: true
    categoryId?: true
    createdById?: true
    updatedById?: true
  }

  export type PackageSumAggregateInputType = {
    id?: true
    cost?: true
    price?: true
    categoryId?: true
    createdById?: true
    updatedById?: true
  }

  export type PackageMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    duration?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PackageMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    duration?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PackageCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    cost?: true
    price?: true
    duration?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Package to aggregate.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packages
    **/
    _count?: true | PackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageMaxAggregateInputType
  }

  export type GetPackageAggregateType<T extends PackageAggregateArgs> = {
        [P in keyof T & keyof AggregatePackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackage[P]>
      : GetScalarType<T[P], AggregatePackage[P]>
  }




  export type PackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithAggregationInput | PackageOrderByWithAggregationInput[]
    by: PackageScalarFieldEnum[] | PackageScalarFieldEnum
    having?: PackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageCountAggregateInputType | true
    _avg?: PackageAvgAggregateInputType
    _sum?: PackageSumAggregateInputType
    _min?: PackageMinAggregateInputType
    _max?: PackageMaxAggregateInputType
  }

  export type PackageGroupByOutputType = {
    id: number
    code: string
    name: string
    description: string | null
    cost: number
    price: number
    duration: string
    categoryId: number
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  type GetPackageGroupByPayload<T extends PackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageGroupByOutputType[P]>
            : GetScalarType<T[P], PackageGroupByOutputType[P]>
        }
      >
    >


  export type PackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    duration?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    patientPackages?: boolean | Package$patientPackagesArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    duration?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    cost?: boolean
    price?: boolean
    duration?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    patientPackages?: boolean | Package$patientPackagesArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Package"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      patientPackages: Prisma.$PatientPackagePayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      description: string | null
      cost: number
      price: number
      duration: string
      categoryId: number
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["package"]>
    composites: {}
  }

  type PackageGetPayload<S extends boolean | null | undefined | PackageDefaultArgs> = $Result.GetResult<Prisma.$PackagePayload, S>

  type PackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PackageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PackageCountAggregateInputType | true
    }

  export interface PackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Package'], meta: { name: 'Package' } }
    /**
     * Find zero or one Package that matches the filter.
     * @param {PackageFindUniqueArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageFindUniqueArgs>(args: SelectSubset<T, PackageFindUniqueArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Package that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PackageFindUniqueOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Package that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageFindFirstArgs>(args?: SelectSubset<T, PackageFindFirstArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Package that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Packages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packages
     * const packages = await prisma.package.findMany()
     * 
     * // Get first 10 Packages
     * const packages = await prisma.package.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageWithIdOnly = await prisma.package.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageFindManyArgs>(args?: SelectSubset<T, PackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Package.
     * @param {PackageCreateArgs} args - Arguments to create a Package.
     * @example
     * // Create one Package
     * const Package = await prisma.package.create({
     *   data: {
     *     // ... data to create a Package
     *   }
     * })
     * 
     */
    create<T extends PackageCreateArgs>(args: SelectSubset<T, PackageCreateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Packages.
     * @param {PackageCreateManyArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageCreateManyArgs>(args?: SelectSubset<T, PackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Packages and returns the data saved in the database.
     * @param {PackageCreateManyAndReturnArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Packages and only return the `id`
     * const packageWithIdOnly = await prisma.package.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Package.
     * @param {PackageDeleteArgs} args - Arguments to delete one Package.
     * @example
     * // Delete one Package
     * const Package = await prisma.package.delete({
     *   where: {
     *     // ... filter to delete one Package
     *   }
     * })
     * 
     */
    delete<T extends PackageDeleteArgs>(args: SelectSubset<T, PackageDeleteArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Package.
     * @param {PackageUpdateArgs} args - Arguments to update one Package.
     * @example
     * // Update one Package
     * const package = await prisma.package.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageUpdateArgs>(args: SelectSubset<T, PackageUpdateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Packages.
     * @param {PackageDeleteManyArgs} args - Arguments to filter Packages to delete.
     * @example
     * // Delete a few Packages
     * const { count } = await prisma.package.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageDeleteManyArgs>(args?: SelectSubset<T, PackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageUpdateManyArgs>(args: SelectSubset<T, PackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Package.
     * @param {PackageUpsertArgs} args - Arguments to update or create a Package.
     * @example
     * // Update or create a Package
     * const package = await prisma.package.upsert({
     *   create: {
     *     // ... data to create a Package
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Package we want to update
     *   }
     * })
     */
    upsert<T extends PackageUpsertArgs>(args: SelectSubset<T, PackageUpsertArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageCountArgs} args - Arguments to filter Packages to count.
     * @example
     * // Count the number of Packages
     * const count = await prisma.package.count({
     *   where: {
     *     // ... the filter for the Packages we want to count
     *   }
     * })
    **/
    count<T extends PackageCountArgs>(
      args?: Subset<T, PackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageAggregateArgs>(args: Subset<T, PackageAggregateArgs>): Prisma.PrismaPromise<GetPackageAggregateType<T>>

    /**
     * Group by Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageGroupByArgs['orderBy'] }
        : { orderBy?: PackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Package model
   */
  readonly fields: PackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Package.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patientPackages<T extends Package$patientPackagesArgs<ExtArgs> = {}>(args?: Subset<T, Package$patientPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Package model
   */ 
  interface PackageFieldRefs {
    readonly id: FieldRef<"Package", 'Int'>
    readonly code: FieldRef<"Package", 'String'>
    readonly name: FieldRef<"Package", 'String'>
    readonly description: FieldRef<"Package", 'String'>
    readonly cost: FieldRef<"Package", 'Float'>
    readonly price: FieldRef<"Package", 'Float'>
    readonly duration: FieldRef<"Package", 'String'>
    readonly categoryId: FieldRef<"Package", 'Int'>
    readonly createdAt: FieldRef<"Package", 'DateTime'>
    readonly updatedAt: FieldRef<"Package", 'DateTime'>
    readonly createdById: FieldRef<"Package", 'Int'>
    readonly updatedById: FieldRef<"Package", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Package findUnique
   */
  export type PackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findUniqueOrThrow
   */
  export type PackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findFirst
   */
  export type PackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findFirstOrThrow
   */
  export type PackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findMany
   */
  export type PackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Packages to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package create
   */
  export type PackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to create a Package.
     */
    data: XOR<PackageCreateInput, PackageUncheckedCreateInput>
  }

  /**
   * Package createMany
   */
  export type PackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package createManyAndReturn
   */
  export type PackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Package update
   */
  export type PackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to update a Package.
     */
    data: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
    /**
     * Choose, which Package to update.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package updateMany
   */
  export type PackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
  }

  /**
   * Package upsert
   */
  export type PackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The filter to search for the Package to update in case it exists.
     */
    where: PackageWhereUniqueInput
    /**
     * In case the Package found by the `where` argument doesn't exist, create a new Package with this data.
     */
    create: XOR<PackageCreateInput, PackageUncheckedCreateInput>
    /**
     * In case the Package was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
  }

  /**
   * Package delete
   */
  export type PackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter which Package to delete.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package deleteMany
   */
  export type PackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Packages to delete
     */
    where?: PackageWhereInput
  }

  /**
   * Package.patientPackages
   */
  export type Package$patientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    where?: PatientPackageWhereInput
    orderBy?: PatientPackageOrderByWithRelationInput | PatientPackageOrderByWithRelationInput[]
    cursor?: PatientPackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientPackageScalarFieldEnum | PatientPackageScalarFieldEnum[]
  }

  /**
   * Package without action
   */
  export type PackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    createdById?: true
    updatedById?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    createdById?: true
    updatedById?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    medicines?: boolean | Category$medicinesArgs<ExtArgs>
    items?: boolean | Category$itemsArgs<ExtArgs>
    treatments?: boolean | Category$treatmentsArgs<ExtArgs>
    packages?: boolean | Category$packagesArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicines?: boolean | Category$medicinesArgs<ExtArgs>
    items?: boolean | Category$itemsArgs<ExtArgs>
    treatments?: boolean | Category$treatmentsArgs<ExtArgs>
    packages?: boolean | Category$packagesArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      medicines: Prisma.$MedicinePayload<ExtArgs>[]
      items: Prisma.$ItemPayload<ExtArgs>[]
      treatments: Prisma.$TreatmentPayload<ExtArgs>[]
      packages: Prisma.$PackagePayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medicines<T extends Category$medicinesArgs<ExtArgs> = {}>(args?: Subset<T, Category$medicinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findMany"> | Null>
    items<T extends Category$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Category$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany"> | Null>
    treatments<T extends Category$treatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Category$treatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPayload<ExtArgs>, T, "findMany"> | Null>
    packages<T extends Category$packagesArgs<ExtArgs> = {}>(args?: Subset<T, Category$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
    readonly createdById: FieldRef<"Category", 'Int'>
    readonly updatedById: FieldRef<"Category", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.medicines
   */
  export type Category$medicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    where?: MedicineWhereInput
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    cursor?: MedicineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Category.items
   */
  export type Category$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Category.treatments
   */
  export type Category$treatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Treatment
     */
    select?: TreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentInclude<ExtArgs> | null
    where?: TreatmentWhereInput
    orderBy?: TreatmentOrderByWithRelationInput | TreatmentOrderByWithRelationInput[]
    cursor?: TreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentScalarFieldEnum | TreatmentScalarFieldEnum[]
  }

  /**
   * Category.packages
   */
  export type Category$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    cursor?: PackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Supplier
   */

  export type AggregateSupplier = {
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  export type SupplierAvgAggregateOutputType = {
    id: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type SupplierSumAggregateOutputType = {
    id: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type SupplierMinAggregateOutputType = {
    id: number | null
    name: string | null
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type SupplierMaxAggregateOutputType = {
    id: number | null
    name: string | null
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type SupplierCountAggregateOutputType = {
    id: number
    name: number
    contactName: number
    email: number
    phone: number
    address: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type SupplierAvgAggregateInputType = {
    id?: true
    createdById?: true
    updatedById?: true
  }

  export type SupplierSumAggregateInputType = {
    id?: true
    createdById?: true
    updatedById?: true
  }

  export type SupplierMinAggregateInputType = {
    id?: true
    name?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type SupplierMaxAggregateInputType = {
    id?: true
    name?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type SupplierCountAggregateInputType = {
    id?: true
    name?: true
    contactName?: true
    email?: true
    phone?: true
    address?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type SupplierAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supplier to aggregate.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Suppliers
    **/
    _count?: true | SupplierCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SupplierAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SupplierSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupplierMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupplierMaxAggregateInputType
  }

  export type GetSupplierAggregateType<T extends SupplierAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplier]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplier[P]>
      : GetScalarType<T[P], AggregateSupplier[P]>
  }




  export type SupplierGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupplierWhereInput
    orderBy?: SupplierOrderByWithAggregationInput | SupplierOrderByWithAggregationInput[]
    by: SupplierScalarFieldEnum[] | SupplierScalarFieldEnum
    having?: SupplierScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupplierCountAggregateInputType | true
    _avg?: SupplierAvgAggregateInputType
    _sum?: SupplierSumAggregateInputType
    _min?: SupplierMinAggregateInputType
    _max?: SupplierMaxAggregateInputType
  }

  export type SupplierGroupByOutputType = {
    id: number
    name: string
    contactName: string | null
    email: string | null
    phone: string | null
    address: string | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: SupplierCountAggregateOutputType | null
    _avg: SupplierAvgAggregateOutputType | null
    _sum: SupplierSumAggregateOutputType | null
    _min: SupplierMinAggregateOutputType | null
    _max: SupplierMaxAggregateOutputType | null
  }

  type GetSupplierGroupByPayload<T extends SupplierGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupplierGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupplierGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupplierGroupByOutputType[P]>
            : GetScalarType<T[P], SupplierGroupByOutputType[P]>
        }
      >
    >


  export type SupplierSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    medicines?: boolean | Supplier$medicinesArgs<ExtArgs>
    items?: boolean | Supplier$itemsArgs<ExtArgs>
    purchaseOrders?: boolean | Supplier$purchaseOrdersArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["supplier"]>

  export type SupplierSelectScalar = {
    id?: boolean
    name?: boolean
    contactName?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type SupplierInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medicines?: boolean | Supplier$medicinesArgs<ExtArgs>
    items?: boolean | Supplier$itemsArgs<ExtArgs>
    purchaseOrders?: boolean | Supplier$purchaseOrdersArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | SupplierCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SupplierIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $SupplierPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Supplier"
    objects: {
      medicines: Prisma.$MedicinePayload<ExtArgs>[]
      items: Prisma.$ItemPayload<ExtArgs>[]
      purchaseOrders: Prisma.$PurchaseOrderPayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      contactName: string | null
      email: string | null
      phone: string | null
      address: string | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["supplier"]>
    composites: {}
  }

  type SupplierGetPayload<S extends boolean | null | undefined | SupplierDefaultArgs> = $Result.GetResult<Prisma.$SupplierPayload, S>

  type SupplierCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SupplierFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SupplierCountAggregateInputType | true
    }

  export interface SupplierDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Supplier'], meta: { name: 'Supplier' } }
    /**
     * Find zero or one Supplier that matches the filter.
     * @param {SupplierFindUniqueArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupplierFindUniqueArgs>(args: SelectSubset<T, SupplierFindUniqueArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Supplier that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SupplierFindUniqueOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupplierFindUniqueOrThrowArgs>(args: SelectSubset<T, SupplierFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Supplier that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupplierFindFirstArgs>(args?: SelectSubset<T, SupplierFindFirstArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Supplier that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindFirstOrThrowArgs} args - Arguments to find a Supplier
     * @example
     * // Get one Supplier
     * const supplier = await prisma.supplier.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupplierFindFirstOrThrowArgs>(args?: SelectSubset<T, SupplierFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Suppliers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Suppliers
     * const suppliers = await prisma.supplier.findMany()
     * 
     * // Get first 10 Suppliers
     * const suppliers = await prisma.supplier.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supplierWithIdOnly = await prisma.supplier.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupplierFindManyArgs>(args?: SelectSubset<T, SupplierFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Supplier.
     * @param {SupplierCreateArgs} args - Arguments to create a Supplier.
     * @example
     * // Create one Supplier
     * const Supplier = await prisma.supplier.create({
     *   data: {
     *     // ... data to create a Supplier
     *   }
     * })
     * 
     */
    create<T extends SupplierCreateArgs>(args: SelectSubset<T, SupplierCreateArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Suppliers.
     * @param {SupplierCreateManyArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupplierCreateManyArgs>(args?: SelectSubset<T, SupplierCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Suppliers and returns the data saved in the database.
     * @param {SupplierCreateManyAndReturnArgs} args - Arguments to create many Suppliers.
     * @example
     * // Create many Suppliers
     * const supplier = await prisma.supplier.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Suppliers and only return the `id`
     * const supplierWithIdOnly = await prisma.supplier.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupplierCreateManyAndReturnArgs>(args?: SelectSubset<T, SupplierCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Supplier.
     * @param {SupplierDeleteArgs} args - Arguments to delete one Supplier.
     * @example
     * // Delete one Supplier
     * const Supplier = await prisma.supplier.delete({
     *   where: {
     *     // ... filter to delete one Supplier
     *   }
     * })
     * 
     */
    delete<T extends SupplierDeleteArgs>(args: SelectSubset<T, SupplierDeleteArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Supplier.
     * @param {SupplierUpdateArgs} args - Arguments to update one Supplier.
     * @example
     * // Update one Supplier
     * const supplier = await prisma.supplier.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupplierUpdateArgs>(args: SelectSubset<T, SupplierUpdateArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Suppliers.
     * @param {SupplierDeleteManyArgs} args - Arguments to filter Suppliers to delete.
     * @example
     * // Delete a few Suppliers
     * const { count } = await prisma.supplier.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupplierDeleteManyArgs>(args?: SelectSubset<T, SupplierDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Suppliers
     * const supplier = await prisma.supplier.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupplierUpdateManyArgs>(args: SelectSubset<T, SupplierUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Supplier.
     * @param {SupplierUpsertArgs} args - Arguments to update or create a Supplier.
     * @example
     * // Update or create a Supplier
     * const supplier = await prisma.supplier.upsert({
     *   create: {
     *     // ... data to create a Supplier
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supplier we want to update
     *   }
     * })
     */
    upsert<T extends SupplierUpsertArgs>(args: SelectSubset<T, SupplierUpsertArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Suppliers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierCountArgs} args - Arguments to filter Suppliers to count.
     * @example
     * // Count the number of Suppliers
     * const count = await prisma.supplier.count({
     *   where: {
     *     // ... the filter for the Suppliers we want to count
     *   }
     * })
    **/
    count<T extends SupplierCountArgs>(
      args?: Subset<T, SupplierCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupplierCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupplierAggregateArgs>(args: Subset<T, SupplierAggregateArgs>): Prisma.PrismaPromise<GetSupplierAggregateType<T>>

    /**
     * Group by Supplier.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupplierGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupplierGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupplierGroupByArgs['orderBy'] }
        : { orderBy?: SupplierGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupplierGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupplierGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Supplier model
   */
  readonly fields: SupplierFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Supplier.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupplierClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medicines<T extends Supplier$medicinesArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$medicinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findMany"> | Null>
    items<T extends Supplier$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findMany"> | Null>
    purchaseOrders<T extends Supplier$purchaseOrdersArgs<ExtArgs> = {}>(args?: Subset<T, Supplier$purchaseOrdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Supplier model
   */ 
  interface SupplierFieldRefs {
    readonly id: FieldRef<"Supplier", 'Int'>
    readonly name: FieldRef<"Supplier", 'String'>
    readonly contactName: FieldRef<"Supplier", 'String'>
    readonly email: FieldRef<"Supplier", 'String'>
    readonly phone: FieldRef<"Supplier", 'String'>
    readonly address: FieldRef<"Supplier", 'String'>
    readonly createdAt: FieldRef<"Supplier", 'DateTime'>
    readonly updatedAt: FieldRef<"Supplier", 'DateTime'>
    readonly createdById: FieldRef<"Supplier", 'Int'>
    readonly updatedById: FieldRef<"Supplier", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Supplier findUnique
   */
  export type SupplierFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier findUniqueOrThrow
   */
  export type SupplierFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier findFirst
   */
  export type SupplierFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier findFirstOrThrow
   */
  export type SupplierFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Supplier to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Suppliers.
     */
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier findMany
   */
  export type SupplierFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter, which Suppliers to fetch.
     */
    where?: SupplierWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Suppliers to fetch.
     */
    orderBy?: SupplierOrderByWithRelationInput | SupplierOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Suppliers.
     */
    cursor?: SupplierWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Suppliers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Suppliers.
     */
    skip?: number
    distinct?: SupplierScalarFieldEnum | SupplierScalarFieldEnum[]
  }

  /**
   * Supplier create
   */
  export type SupplierCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to create a Supplier.
     */
    data: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
  }

  /**
   * Supplier createMany
   */
  export type SupplierCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Supplier createManyAndReturn
   */
  export type SupplierCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Suppliers.
     */
    data: SupplierCreateManyInput | SupplierCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Supplier update
   */
  export type SupplierUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The data needed to update a Supplier.
     */
    data: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
    /**
     * Choose, which Supplier to update.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier updateMany
   */
  export type SupplierUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Suppliers.
     */
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyInput>
    /**
     * Filter which Suppliers to update
     */
    where?: SupplierWhereInput
  }

  /**
   * Supplier upsert
   */
  export type SupplierUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * The filter to search for the Supplier to update in case it exists.
     */
    where: SupplierWhereUniqueInput
    /**
     * In case the Supplier found by the `where` argument doesn't exist, create a new Supplier with this data.
     */
    create: XOR<SupplierCreateInput, SupplierUncheckedCreateInput>
    /**
     * In case the Supplier was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupplierUpdateInput, SupplierUncheckedUpdateInput>
  }

  /**
   * Supplier delete
   */
  export type SupplierDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
    /**
     * Filter which Supplier to delete.
     */
    where: SupplierWhereUniqueInput
  }

  /**
   * Supplier deleteMany
   */
  export type SupplierDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Suppliers to delete
     */
    where?: SupplierWhereInput
  }

  /**
   * Supplier.medicines
   */
  export type Supplier$medicinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    where?: MedicineWhereInput
    orderBy?: MedicineOrderByWithRelationInput | MedicineOrderByWithRelationInput[]
    cursor?: MedicineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicineScalarFieldEnum | MedicineScalarFieldEnum[]
  }

  /**
   * Supplier.items
   */
  export type Supplier$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
    orderBy?: ItemOrderByWithRelationInput | ItemOrderByWithRelationInput[]
    cursor?: ItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItemScalarFieldEnum | ItemScalarFieldEnum[]
  }

  /**
   * Supplier.purchaseOrders
   */
  export type Supplier$purchaseOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    cursor?: PurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * Supplier without action
   */
  export type SupplierDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplier
     */
    select?: SupplierSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupplierInclude<ExtArgs> | null
  }


  /**
   * Model InventoryTransaction
   */

  export type AggregateInventoryTransaction = {
    _count: InventoryTransactionCountAggregateOutputType | null
    _avg: InventoryTransactionAvgAggregateOutputType | null
    _sum: InventoryTransactionSumAggregateOutputType | null
    _min: InventoryTransactionMinAggregateOutputType | null
    _max: InventoryTransactionMaxAggregateOutputType | null
  }

  export type InventoryTransactionAvgAggregateOutputType = {
    id: number | null
    itemId: number | null
    medicineId: number | null
    quantity: number | null
    employeeId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryTransactionSumAggregateOutputType = {
    id: number | null
    itemId: number | null
    medicineId: number | null
    quantity: number | null
    employeeId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryTransactionMinAggregateOutputType = {
    id: number | null
    itemId: number | null
    medicineId: number | null
    type: string | null
    quantity: number | null
    date: Date | null
    employeeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryTransactionMaxAggregateOutputType = {
    id: number | null
    itemId: number | null
    medicineId: number | null
    type: string | null
    quantity: number | null
    date: Date | null
    employeeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryTransactionCountAggregateOutputType = {
    id: number
    itemId: number
    medicineId: number
    type: number
    quantity: number
    date: number
    employeeId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type InventoryTransactionAvgAggregateInputType = {
    id?: true
    itemId?: true
    medicineId?: true
    quantity?: true
    employeeId?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryTransactionSumAggregateInputType = {
    id?: true
    itemId?: true
    medicineId?: true
    quantity?: true
    employeeId?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryTransactionMinAggregateInputType = {
    id?: true
    itemId?: true
    medicineId?: true
    type?: true
    quantity?: true
    date?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryTransactionMaxAggregateInputType = {
    id?: true
    itemId?: true
    medicineId?: true
    type?: true
    quantity?: true
    date?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryTransactionCountAggregateInputType = {
    id?: true
    itemId?: true
    medicineId?: true
    type?: true
    quantity?: true
    date?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type InventoryTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryTransaction to aggregate.
     */
    where?: InventoryTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryTransactions to fetch.
     */
    orderBy?: InventoryTransactionOrderByWithRelationInput | InventoryTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryTransactions
    **/
    _count?: true | InventoryTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryTransactionMaxAggregateInputType
  }

  export type GetInventoryTransactionAggregateType<T extends InventoryTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryTransaction[P]>
      : GetScalarType<T[P], AggregateInventoryTransaction[P]>
  }




  export type InventoryTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryTransactionWhereInput
    orderBy?: InventoryTransactionOrderByWithAggregationInput | InventoryTransactionOrderByWithAggregationInput[]
    by: InventoryTransactionScalarFieldEnum[] | InventoryTransactionScalarFieldEnum
    having?: InventoryTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryTransactionCountAggregateInputType | true
    _avg?: InventoryTransactionAvgAggregateInputType
    _sum?: InventoryTransactionSumAggregateInputType
    _min?: InventoryTransactionMinAggregateInputType
    _max?: InventoryTransactionMaxAggregateInputType
  }

  export type InventoryTransactionGroupByOutputType = {
    id: number
    itemId: number | null
    medicineId: number | null
    type: string
    quantity: number
    date: Date
    employeeId: number
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: InventoryTransactionCountAggregateOutputType | null
    _avg: InventoryTransactionAvgAggregateOutputType | null
    _sum: InventoryTransactionSumAggregateOutputType | null
    _min: InventoryTransactionMinAggregateOutputType | null
    _max: InventoryTransactionMaxAggregateOutputType | null
  }

  type GetInventoryTransactionGroupByPayload<T extends InventoryTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryTransactionGroupByOutputType[P]>
        }
      >
    >


  export type InventoryTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    medicineId?: boolean
    type?: boolean
    quantity?: boolean
    date?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    item?: boolean | InventoryTransaction$itemArgs<ExtArgs>
    medicine?: boolean | InventoryTransaction$medicineArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryTransaction"]>

  export type InventoryTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    medicineId?: boolean
    type?: boolean
    quantity?: boolean
    date?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    item?: boolean | InventoryTransaction$itemArgs<ExtArgs>
    medicine?: boolean | InventoryTransaction$medicineArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryTransaction"]>

  export type InventoryTransactionSelectScalar = {
    id?: boolean
    itemId?: boolean
    medicineId?: boolean
    type?: boolean
    quantity?: boolean
    date?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type InventoryTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | InventoryTransaction$itemArgs<ExtArgs>
    medicine?: boolean | InventoryTransaction$medicineArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type InventoryTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | InventoryTransaction$itemArgs<ExtArgs>
    medicine?: boolean | InventoryTransaction$medicineArgs<ExtArgs>
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $InventoryTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryTransaction"
    objects: {
      item: Prisma.$ItemPayload<ExtArgs> | null
      medicine: Prisma.$MedicinePayload<ExtArgs> | null
      employee: Prisma.$EmployeePayload<ExtArgs>
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      itemId: number | null
      medicineId: number | null
      type: string
      quantity: number
      date: Date
      employeeId: number
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["inventoryTransaction"]>
    composites: {}
  }

  type InventoryTransactionGetPayload<S extends boolean | null | undefined | InventoryTransactionDefaultArgs> = $Result.GetResult<Prisma.$InventoryTransactionPayload, S>

  type InventoryTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryTransactionCountAggregateInputType | true
    }

  export interface InventoryTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryTransaction'], meta: { name: 'InventoryTransaction' } }
    /**
     * Find zero or one InventoryTransaction that matches the filter.
     * @param {InventoryTransactionFindUniqueArgs} args - Arguments to find a InventoryTransaction
     * @example
     * // Get one InventoryTransaction
     * const inventoryTransaction = await prisma.inventoryTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryTransactionFindUniqueArgs>(args: SelectSubset<T, InventoryTransactionFindUniqueArgs<ExtArgs>>): Prisma__InventoryTransactionClient<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryTransactionFindUniqueOrThrowArgs} args - Arguments to find a InventoryTransaction
     * @example
     * // Get one InventoryTransaction
     * const inventoryTransaction = await prisma.inventoryTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryTransactionClient<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTransactionFindFirstArgs} args - Arguments to find a InventoryTransaction
     * @example
     * // Get one InventoryTransaction
     * const inventoryTransaction = await prisma.inventoryTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryTransactionFindFirstArgs>(args?: SelectSubset<T, InventoryTransactionFindFirstArgs<ExtArgs>>): Prisma__InventoryTransactionClient<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTransactionFindFirstOrThrowArgs} args - Arguments to find a InventoryTransaction
     * @example
     * // Get one InventoryTransaction
     * const inventoryTransaction = await prisma.inventoryTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryTransactionClient<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryTransactions
     * const inventoryTransactions = await prisma.inventoryTransaction.findMany()
     * 
     * // Get first 10 InventoryTransactions
     * const inventoryTransactions = await prisma.inventoryTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryTransactionWithIdOnly = await prisma.inventoryTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryTransactionFindManyArgs>(args?: SelectSubset<T, InventoryTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryTransaction.
     * @param {InventoryTransactionCreateArgs} args - Arguments to create a InventoryTransaction.
     * @example
     * // Create one InventoryTransaction
     * const InventoryTransaction = await prisma.inventoryTransaction.create({
     *   data: {
     *     // ... data to create a InventoryTransaction
     *   }
     * })
     * 
     */
    create<T extends InventoryTransactionCreateArgs>(args: SelectSubset<T, InventoryTransactionCreateArgs<ExtArgs>>): Prisma__InventoryTransactionClient<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryTransactions.
     * @param {InventoryTransactionCreateManyArgs} args - Arguments to create many InventoryTransactions.
     * @example
     * // Create many InventoryTransactions
     * const inventoryTransaction = await prisma.inventoryTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryTransactionCreateManyArgs>(args?: SelectSubset<T, InventoryTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryTransactions and returns the data saved in the database.
     * @param {InventoryTransactionCreateManyAndReturnArgs} args - Arguments to create many InventoryTransactions.
     * @example
     * // Create many InventoryTransactions
     * const inventoryTransaction = await prisma.inventoryTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryTransactions and only return the `id`
     * const inventoryTransactionWithIdOnly = await prisma.inventoryTransaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InventoryTransaction.
     * @param {InventoryTransactionDeleteArgs} args - Arguments to delete one InventoryTransaction.
     * @example
     * // Delete one InventoryTransaction
     * const InventoryTransaction = await prisma.inventoryTransaction.delete({
     *   where: {
     *     // ... filter to delete one InventoryTransaction
     *   }
     * })
     * 
     */
    delete<T extends InventoryTransactionDeleteArgs>(args: SelectSubset<T, InventoryTransactionDeleteArgs<ExtArgs>>): Prisma__InventoryTransactionClient<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryTransaction.
     * @param {InventoryTransactionUpdateArgs} args - Arguments to update one InventoryTransaction.
     * @example
     * // Update one InventoryTransaction
     * const inventoryTransaction = await prisma.inventoryTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryTransactionUpdateArgs>(args: SelectSubset<T, InventoryTransactionUpdateArgs<ExtArgs>>): Prisma__InventoryTransactionClient<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryTransactions.
     * @param {InventoryTransactionDeleteManyArgs} args - Arguments to filter InventoryTransactions to delete.
     * @example
     * // Delete a few InventoryTransactions
     * const { count } = await prisma.inventoryTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryTransactionDeleteManyArgs>(args?: SelectSubset<T, InventoryTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryTransactions
     * const inventoryTransaction = await prisma.inventoryTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryTransactionUpdateManyArgs>(args: SelectSubset<T, InventoryTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryTransaction.
     * @param {InventoryTransactionUpsertArgs} args - Arguments to update or create a InventoryTransaction.
     * @example
     * // Update or create a InventoryTransaction
     * const inventoryTransaction = await prisma.inventoryTransaction.upsert({
     *   create: {
     *     // ... data to create a InventoryTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryTransaction we want to update
     *   }
     * })
     */
    upsert<T extends InventoryTransactionUpsertArgs>(args: SelectSubset<T, InventoryTransactionUpsertArgs<ExtArgs>>): Prisma__InventoryTransactionClient<$Result.GetResult<Prisma.$InventoryTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTransactionCountArgs} args - Arguments to filter InventoryTransactions to count.
     * @example
     * // Count the number of InventoryTransactions
     * const count = await prisma.inventoryTransaction.count({
     *   where: {
     *     // ... the filter for the InventoryTransactions we want to count
     *   }
     * })
    **/
    count<T extends InventoryTransactionCountArgs>(
      args?: Subset<T, InventoryTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryTransactionAggregateArgs>(args: Subset<T, InventoryTransactionAggregateArgs>): Prisma.PrismaPromise<GetInventoryTransactionAggregateType<T>>

    /**
     * Group by InventoryTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryTransactionGroupByArgs['orderBy'] }
        : { orderBy?: InventoryTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryTransaction model
   */
  readonly fields: InventoryTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends InventoryTransaction$itemArgs<ExtArgs> = {}>(args?: Subset<T, InventoryTransaction$itemArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    medicine<T extends InventoryTransaction$medicineArgs<ExtArgs> = {}>(args?: Subset<T, InventoryTransaction$medicineArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryTransaction model
   */ 
  interface InventoryTransactionFieldRefs {
    readonly id: FieldRef<"InventoryTransaction", 'Int'>
    readonly itemId: FieldRef<"InventoryTransaction", 'Int'>
    readonly medicineId: FieldRef<"InventoryTransaction", 'Int'>
    readonly type: FieldRef<"InventoryTransaction", 'String'>
    readonly quantity: FieldRef<"InventoryTransaction", 'Int'>
    readonly date: FieldRef<"InventoryTransaction", 'DateTime'>
    readonly employeeId: FieldRef<"InventoryTransaction", 'Int'>
    readonly createdAt: FieldRef<"InventoryTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryTransaction", 'DateTime'>
    readonly createdById: FieldRef<"InventoryTransaction", 'Int'>
    readonly updatedById: FieldRef<"InventoryTransaction", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * InventoryTransaction findUnique
   */
  export type InventoryTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTransaction to fetch.
     */
    where: InventoryTransactionWhereUniqueInput
  }

  /**
   * InventoryTransaction findUniqueOrThrow
   */
  export type InventoryTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTransaction to fetch.
     */
    where: InventoryTransactionWhereUniqueInput
  }

  /**
   * InventoryTransaction findFirst
   */
  export type InventoryTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTransaction to fetch.
     */
    where?: InventoryTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryTransactions to fetch.
     */
    orderBy?: InventoryTransactionOrderByWithRelationInput | InventoryTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryTransactions.
     */
    cursor?: InventoryTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryTransactions.
     */
    distinct?: InventoryTransactionScalarFieldEnum | InventoryTransactionScalarFieldEnum[]
  }

  /**
   * InventoryTransaction findFirstOrThrow
   */
  export type InventoryTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTransaction to fetch.
     */
    where?: InventoryTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryTransactions to fetch.
     */
    orderBy?: InventoryTransactionOrderByWithRelationInput | InventoryTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryTransactions.
     */
    cursor?: InventoryTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryTransactions.
     */
    distinct?: InventoryTransactionScalarFieldEnum | InventoryTransactionScalarFieldEnum[]
  }

  /**
   * InventoryTransaction findMany
   */
  export type InventoryTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    /**
     * Filter, which InventoryTransactions to fetch.
     */
    where?: InventoryTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryTransactions to fetch.
     */
    orderBy?: InventoryTransactionOrderByWithRelationInput | InventoryTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryTransactions.
     */
    cursor?: InventoryTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryTransactions.
     */
    skip?: number
    distinct?: InventoryTransactionScalarFieldEnum | InventoryTransactionScalarFieldEnum[]
  }

  /**
   * InventoryTransaction create
   */
  export type InventoryTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryTransaction.
     */
    data: XOR<InventoryTransactionCreateInput, InventoryTransactionUncheckedCreateInput>
  }

  /**
   * InventoryTransaction createMany
   */
  export type InventoryTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryTransactions.
     */
    data: InventoryTransactionCreateManyInput | InventoryTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryTransaction createManyAndReturn
   */
  export type InventoryTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InventoryTransactions.
     */
    data: InventoryTransactionCreateManyInput | InventoryTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryTransaction update
   */
  export type InventoryTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryTransaction.
     */
    data: XOR<InventoryTransactionUpdateInput, InventoryTransactionUncheckedUpdateInput>
    /**
     * Choose, which InventoryTransaction to update.
     */
    where: InventoryTransactionWhereUniqueInput
  }

  /**
   * InventoryTransaction updateMany
   */
  export type InventoryTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryTransactions.
     */
    data: XOR<InventoryTransactionUpdateManyMutationInput, InventoryTransactionUncheckedUpdateManyInput>
    /**
     * Filter which InventoryTransactions to update
     */
    where?: InventoryTransactionWhereInput
  }

  /**
   * InventoryTransaction upsert
   */
  export type InventoryTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryTransaction to update in case it exists.
     */
    where: InventoryTransactionWhereUniqueInput
    /**
     * In case the InventoryTransaction found by the `where` argument doesn't exist, create a new InventoryTransaction with this data.
     */
    create: XOR<InventoryTransactionCreateInput, InventoryTransactionUncheckedCreateInput>
    /**
     * In case the InventoryTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryTransactionUpdateInput, InventoryTransactionUncheckedUpdateInput>
  }

  /**
   * InventoryTransaction delete
   */
  export type InventoryTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
    /**
     * Filter which InventoryTransaction to delete.
     */
    where: InventoryTransactionWhereUniqueInput
  }

  /**
   * InventoryTransaction deleteMany
   */
  export type InventoryTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryTransactions to delete
     */
    where?: InventoryTransactionWhereInput
  }

  /**
   * InventoryTransaction.item
   */
  export type InventoryTransaction$itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
  }

  /**
   * InventoryTransaction.medicine
   */
  export type InventoryTransaction$medicineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    where?: MedicineWhereInput
  }

  /**
   * InventoryTransaction without action
   */
  export type InventoryTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryTransaction
     */
    select?: InventoryTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryTransactionInclude<ExtArgs> | null
  }


  /**
   * Model InventoryCount
   */

  export type AggregateInventoryCount = {
    _count: InventoryCountCountAggregateOutputType | null
    _avg: InventoryCountAvgAggregateOutputType | null
    _sum: InventoryCountSumAggregateOutputType | null
    _min: InventoryCountMinAggregateOutputType | null
    _max: InventoryCountMaxAggregateOutputType | null
  }

  export type InventoryCountAvgAggregateOutputType = {
    id: number | null
    employeeId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryCountSumAggregateOutputType = {
    id: number | null
    employeeId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryCountMinAggregateOutputType = {
    id: number | null
    date: Date | null
    status: string | null
    employeeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryCountMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    status: string | null
    employeeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryCountCountAggregateOutputType = {
    id: number
    date: number
    status: number
    employeeId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type InventoryCountAvgAggregateInputType = {
    id?: true
    employeeId?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryCountSumAggregateInputType = {
    id?: true
    employeeId?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryCountMinAggregateInputType = {
    id?: true
    date?: true
    status?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryCountMaxAggregateInputType = {
    id?: true
    date?: true
    status?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryCountCountAggregateInputType = {
    id?: true
    date?: true
    status?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type InventoryCountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryCount to aggregate.
     */
    where?: InventoryCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryCounts to fetch.
     */
    orderBy?: InventoryCountOrderByWithRelationInput | InventoryCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryCounts
    **/
    _count?: true | InventoryCountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryCountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryCountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryCountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryCountMaxAggregateInputType
  }

  export type GetInventoryCountAggregateType<T extends InventoryCountAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryCount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryCount[P]>
      : GetScalarType<T[P], AggregateInventoryCount[P]>
  }




  export type InventoryCountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountWhereInput
    orderBy?: InventoryCountOrderByWithAggregationInput | InventoryCountOrderByWithAggregationInput[]
    by: InventoryCountScalarFieldEnum[] | InventoryCountScalarFieldEnum
    having?: InventoryCountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountCountAggregateInputType | true
    _avg?: InventoryCountAvgAggregateInputType
    _sum?: InventoryCountSumAggregateInputType
    _min?: InventoryCountMinAggregateInputType
    _max?: InventoryCountMaxAggregateInputType
  }

  export type InventoryCountGroupByOutputType = {
    id: number
    date: Date
    status: string
    employeeId: number
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: InventoryCountCountAggregateOutputType | null
    _avg: InventoryCountAvgAggregateOutputType | null
    _sum: InventoryCountSumAggregateOutputType | null
    _min: InventoryCountMinAggregateOutputType | null
    _max: InventoryCountMaxAggregateOutputType | null
  }

  type GetInventoryCountGroupByPayload<T extends InventoryCountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryCountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryCountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryCountGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryCountGroupByOutputType[P]>
        }
      >
    >


  export type InventoryCountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    status?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    items?: boolean | InventoryCount$itemsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | InventoryCountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryCount"]>

  export type InventoryCountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    status?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryCount"]>

  export type InventoryCountSelectScalar = {
    id?: boolean
    date?: boolean
    status?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type InventoryCountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    items?: boolean | InventoryCount$itemsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | InventoryCountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InventoryCountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | EmployeeDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $InventoryCountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryCount"
    objects: {
      employee: Prisma.$EmployeePayload<ExtArgs>
      items: Prisma.$InventoryCountItemPayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      status: string
      employeeId: number
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["inventoryCount"]>
    composites: {}
  }

  type InventoryCountGetPayload<S extends boolean | null | undefined | InventoryCountDefaultArgs> = $Result.GetResult<Prisma.$InventoryCountPayload, S>

  type InventoryCountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryCountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryCountCountAggregateInputType | true
    }

  export interface InventoryCountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryCount'], meta: { name: 'InventoryCount' } }
    /**
     * Find zero or one InventoryCount that matches the filter.
     * @param {InventoryCountFindUniqueArgs} args - Arguments to find a InventoryCount
     * @example
     * // Get one InventoryCount
     * const inventoryCount = await prisma.inventoryCount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryCountFindUniqueArgs>(args: SelectSubset<T, InventoryCountFindUniqueArgs<ExtArgs>>): Prisma__InventoryCountClient<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryCount that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryCountFindUniqueOrThrowArgs} args - Arguments to find a InventoryCount
     * @example
     * // Get one InventoryCount
     * const inventoryCount = await prisma.inventoryCount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryCountFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryCountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryCountClient<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryCount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountFindFirstArgs} args - Arguments to find a InventoryCount
     * @example
     * // Get one InventoryCount
     * const inventoryCount = await prisma.inventoryCount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryCountFindFirstArgs>(args?: SelectSubset<T, InventoryCountFindFirstArgs<ExtArgs>>): Prisma__InventoryCountClient<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryCount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountFindFirstOrThrowArgs} args - Arguments to find a InventoryCount
     * @example
     * // Get one InventoryCount
     * const inventoryCount = await prisma.inventoryCount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryCountFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryCountFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryCountClient<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryCounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryCounts
     * const inventoryCounts = await prisma.inventoryCount.findMany()
     * 
     * // Get first 10 InventoryCounts
     * const inventoryCounts = await prisma.inventoryCount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryCountWithIdOnly = await prisma.inventoryCount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryCountFindManyArgs>(args?: SelectSubset<T, InventoryCountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryCount.
     * @param {InventoryCountCreateArgs} args - Arguments to create a InventoryCount.
     * @example
     * // Create one InventoryCount
     * const InventoryCount = await prisma.inventoryCount.create({
     *   data: {
     *     // ... data to create a InventoryCount
     *   }
     * })
     * 
     */
    create<T extends InventoryCountCreateArgs>(args: SelectSubset<T, InventoryCountCreateArgs<ExtArgs>>): Prisma__InventoryCountClient<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryCounts.
     * @param {InventoryCountCreateManyArgs} args - Arguments to create many InventoryCounts.
     * @example
     * // Create many InventoryCounts
     * const inventoryCount = await prisma.inventoryCount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryCountCreateManyArgs>(args?: SelectSubset<T, InventoryCountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryCounts and returns the data saved in the database.
     * @param {InventoryCountCreateManyAndReturnArgs} args - Arguments to create many InventoryCounts.
     * @example
     * // Create many InventoryCounts
     * const inventoryCount = await prisma.inventoryCount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryCounts and only return the `id`
     * const inventoryCountWithIdOnly = await prisma.inventoryCount.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryCountCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryCountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InventoryCount.
     * @param {InventoryCountDeleteArgs} args - Arguments to delete one InventoryCount.
     * @example
     * // Delete one InventoryCount
     * const InventoryCount = await prisma.inventoryCount.delete({
     *   where: {
     *     // ... filter to delete one InventoryCount
     *   }
     * })
     * 
     */
    delete<T extends InventoryCountDeleteArgs>(args: SelectSubset<T, InventoryCountDeleteArgs<ExtArgs>>): Prisma__InventoryCountClient<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryCount.
     * @param {InventoryCountUpdateArgs} args - Arguments to update one InventoryCount.
     * @example
     * // Update one InventoryCount
     * const inventoryCount = await prisma.inventoryCount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryCountUpdateArgs>(args: SelectSubset<T, InventoryCountUpdateArgs<ExtArgs>>): Prisma__InventoryCountClient<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryCounts.
     * @param {InventoryCountDeleteManyArgs} args - Arguments to filter InventoryCounts to delete.
     * @example
     * // Delete a few InventoryCounts
     * const { count } = await prisma.inventoryCount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryCountDeleteManyArgs>(args?: SelectSubset<T, InventoryCountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryCounts
     * const inventoryCount = await prisma.inventoryCount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryCountUpdateManyArgs>(args: SelectSubset<T, InventoryCountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryCount.
     * @param {InventoryCountUpsertArgs} args - Arguments to update or create a InventoryCount.
     * @example
     * // Update or create a InventoryCount
     * const inventoryCount = await prisma.inventoryCount.upsert({
     *   create: {
     *     // ... data to create a InventoryCount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryCount we want to update
     *   }
     * })
     */
    upsert<T extends InventoryCountUpsertArgs>(args: SelectSubset<T, InventoryCountUpsertArgs<ExtArgs>>): Prisma__InventoryCountClient<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryCounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountCountArgs} args - Arguments to filter InventoryCounts to count.
     * @example
     * // Count the number of InventoryCounts
     * const count = await prisma.inventoryCount.count({
     *   where: {
     *     // ... the filter for the InventoryCounts we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountCountArgs>(
      args?: Subset<T, InventoryCountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryCountAggregateArgs>(args: Subset<T, InventoryCountAggregateArgs>): Prisma.PrismaPromise<GetInventoryCountAggregateType<T>>

    /**
     * Group by InventoryCount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryCountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryCountGroupByArgs['orderBy'] }
        : { orderBy?: InventoryCountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryCountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryCountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryCount model
   */
  readonly fields: InventoryCountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryCount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryCountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends InventoryCount$itemsArgs<ExtArgs> = {}>(args?: Subset<T, InventoryCount$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryCount model
   */ 
  interface InventoryCountFieldRefs {
    readonly id: FieldRef<"InventoryCount", 'Int'>
    readonly date: FieldRef<"InventoryCount", 'DateTime'>
    readonly status: FieldRef<"InventoryCount", 'String'>
    readonly employeeId: FieldRef<"InventoryCount", 'Int'>
    readonly createdAt: FieldRef<"InventoryCount", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryCount", 'DateTime'>
    readonly createdById: FieldRef<"InventoryCount", 'Int'>
    readonly updatedById: FieldRef<"InventoryCount", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * InventoryCount findUnique
   */
  export type InventoryCountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCount to fetch.
     */
    where: InventoryCountWhereUniqueInput
  }

  /**
   * InventoryCount findUniqueOrThrow
   */
  export type InventoryCountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCount to fetch.
     */
    where: InventoryCountWhereUniqueInput
  }

  /**
   * InventoryCount findFirst
   */
  export type InventoryCountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCount to fetch.
     */
    where?: InventoryCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryCounts to fetch.
     */
    orderBy?: InventoryCountOrderByWithRelationInput | InventoryCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryCounts.
     */
    cursor?: InventoryCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryCounts.
     */
    distinct?: InventoryCountScalarFieldEnum | InventoryCountScalarFieldEnum[]
  }

  /**
   * InventoryCount findFirstOrThrow
   */
  export type InventoryCountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCount to fetch.
     */
    where?: InventoryCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryCounts to fetch.
     */
    orderBy?: InventoryCountOrderByWithRelationInput | InventoryCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryCounts.
     */
    cursor?: InventoryCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryCounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryCounts.
     */
    distinct?: InventoryCountScalarFieldEnum | InventoryCountScalarFieldEnum[]
  }

  /**
   * InventoryCount findMany
   */
  export type InventoryCountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCounts to fetch.
     */
    where?: InventoryCountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryCounts to fetch.
     */
    orderBy?: InventoryCountOrderByWithRelationInput | InventoryCountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryCounts.
     */
    cursor?: InventoryCountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryCounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryCounts.
     */
    skip?: number
    distinct?: InventoryCountScalarFieldEnum | InventoryCountScalarFieldEnum[]
  }

  /**
   * InventoryCount create
   */
  export type InventoryCountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryCount.
     */
    data: XOR<InventoryCountCreateInput, InventoryCountUncheckedCreateInput>
  }

  /**
   * InventoryCount createMany
   */
  export type InventoryCountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryCounts.
     */
    data: InventoryCountCreateManyInput | InventoryCountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryCount createManyAndReturn
   */
  export type InventoryCountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InventoryCounts.
     */
    data: InventoryCountCreateManyInput | InventoryCountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryCount update
   */
  export type InventoryCountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryCount.
     */
    data: XOR<InventoryCountUpdateInput, InventoryCountUncheckedUpdateInput>
    /**
     * Choose, which InventoryCount to update.
     */
    where: InventoryCountWhereUniqueInput
  }

  /**
   * InventoryCount updateMany
   */
  export type InventoryCountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryCounts.
     */
    data: XOR<InventoryCountUpdateManyMutationInput, InventoryCountUncheckedUpdateManyInput>
    /**
     * Filter which InventoryCounts to update
     */
    where?: InventoryCountWhereInput
  }

  /**
   * InventoryCount upsert
   */
  export type InventoryCountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryCount to update in case it exists.
     */
    where: InventoryCountWhereUniqueInput
    /**
     * In case the InventoryCount found by the `where` argument doesn't exist, create a new InventoryCount with this data.
     */
    create: XOR<InventoryCountCreateInput, InventoryCountUncheckedCreateInput>
    /**
     * In case the InventoryCount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryCountUpdateInput, InventoryCountUncheckedUpdateInput>
  }

  /**
   * InventoryCount delete
   */
  export type InventoryCountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
    /**
     * Filter which InventoryCount to delete.
     */
    where: InventoryCountWhereUniqueInput
  }

  /**
   * InventoryCount deleteMany
   */
  export type InventoryCountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryCounts to delete
     */
    where?: InventoryCountWhereInput
  }

  /**
   * InventoryCount.items
   */
  export type InventoryCount$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    where?: InventoryCountItemWhereInput
    orderBy?: InventoryCountItemOrderByWithRelationInput | InventoryCountItemOrderByWithRelationInput[]
    cursor?: InventoryCountItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryCountItemScalarFieldEnum | InventoryCountItemScalarFieldEnum[]
  }

  /**
   * InventoryCount without action
   */
  export type InventoryCountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCount
     */
    select?: InventoryCountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountInclude<ExtArgs> | null
  }


  /**
   * Model InventoryCountItem
   */

  export type AggregateInventoryCountItem = {
    _count: InventoryCountItemCountAggregateOutputType | null
    _avg: InventoryCountItemAvgAggregateOutputType | null
    _sum: InventoryCountItemSumAggregateOutputType | null
    _min: InventoryCountItemMinAggregateOutputType | null
    _max: InventoryCountItemMaxAggregateOutputType | null
  }

  export type InventoryCountItemAvgAggregateOutputType = {
    id: number | null
    inventoryCountId: number | null
    itemId: number | null
    medicineId: number | null
    expectedQuantity: number | null
    actualQuantity: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryCountItemSumAggregateOutputType = {
    id: number | null
    inventoryCountId: number | null
    itemId: number | null
    medicineId: number | null
    expectedQuantity: number | null
    actualQuantity: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryCountItemMinAggregateOutputType = {
    id: number | null
    inventoryCountId: number | null
    itemId: number | null
    medicineId: number | null
    expectedQuantity: number | null
    actualQuantity: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryCountItemMaxAggregateOutputType = {
    id: number | null
    inventoryCountId: number | null
    itemId: number | null
    medicineId: number | null
    expectedQuantity: number | null
    actualQuantity: number | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type InventoryCountItemCountAggregateOutputType = {
    id: number
    inventoryCountId: number
    itemId: number
    medicineId: number
    expectedQuantity: number
    actualQuantity: number
    notes: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type InventoryCountItemAvgAggregateInputType = {
    id?: true
    inventoryCountId?: true
    itemId?: true
    medicineId?: true
    expectedQuantity?: true
    actualQuantity?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryCountItemSumAggregateInputType = {
    id?: true
    inventoryCountId?: true
    itemId?: true
    medicineId?: true
    expectedQuantity?: true
    actualQuantity?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryCountItemMinAggregateInputType = {
    id?: true
    inventoryCountId?: true
    itemId?: true
    medicineId?: true
    expectedQuantity?: true
    actualQuantity?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryCountItemMaxAggregateInputType = {
    id?: true
    inventoryCountId?: true
    itemId?: true
    medicineId?: true
    expectedQuantity?: true
    actualQuantity?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type InventoryCountItemCountAggregateInputType = {
    id?: true
    inventoryCountId?: true
    itemId?: true
    medicineId?: true
    expectedQuantity?: true
    actualQuantity?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type InventoryCountItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryCountItem to aggregate.
     */
    where?: InventoryCountItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryCountItems to fetch.
     */
    orderBy?: InventoryCountItemOrderByWithRelationInput | InventoryCountItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryCountItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryCountItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryCountItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryCountItems
    **/
    _count?: true | InventoryCountItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryCountItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryCountItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryCountItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryCountItemMaxAggregateInputType
  }

  export type GetInventoryCountItemAggregateType<T extends InventoryCountItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryCountItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryCountItem[P]>
      : GetScalarType<T[P], AggregateInventoryCountItem[P]>
  }




  export type InventoryCountItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryCountItemWhereInput
    orderBy?: InventoryCountItemOrderByWithAggregationInput | InventoryCountItemOrderByWithAggregationInput[]
    by: InventoryCountItemScalarFieldEnum[] | InventoryCountItemScalarFieldEnum
    having?: InventoryCountItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountItemCountAggregateInputType | true
    _avg?: InventoryCountItemAvgAggregateInputType
    _sum?: InventoryCountItemSumAggregateInputType
    _min?: InventoryCountItemMinAggregateInputType
    _max?: InventoryCountItemMaxAggregateInputType
  }

  export type InventoryCountItemGroupByOutputType = {
    id: number
    inventoryCountId: number
    itemId: number | null
    medicineId: number | null
    expectedQuantity: number
    actualQuantity: number
    notes: string | null
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: InventoryCountItemCountAggregateOutputType | null
    _avg: InventoryCountItemAvgAggregateOutputType | null
    _sum: InventoryCountItemSumAggregateOutputType | null
    _min: InventoryCountItemMinAggregateOutputType | null
    _max: InventoryCountItemMaxAggregateOutputType | null
  }

  type GetInventoryCountItemGroupByPayload<T extends InventoryCountItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryCountItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryCountItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryCountItemGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryCountItemGroupByOutputType[P]>
        }
      >
    >


  export type InventoryCountItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryCountId?: boolean
    itemId?: boolean
    medicineId?: boolean
    expectedQuantity?: boolean
    actualQuantity?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    inventoryCount?: boolean | InventoryCountDefaultArgs<ExtArgs>
    item?: boolean | InventoryCountItem$itemArgs<ExtArgs>
    medicine?: boolean | InventoryCountItem$medicineArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryCountItem"]>

  export type InventoryCountItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryCountId?: boolean
    itemId?: boolean
    medicineId?: boolean
    expectedQuantity?: boolean
    actualQuantity?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    inventoryCount?: boolean | InventoryCountDefaultArgs<ExtArgs>
    item?: boolean | InventoryCountItem$itemArgs<ExtArgs>
    medicine?: boolean | InventoryCountItem$medicineArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryCountItem"]>

  export type InventoryCountItemSelectScalar = {
    id?: boolean
    inventoryCountId?: boolean
    itemId?: boolean
    medicineId?: boolean
    expectedQuantity?: boolean
    actualQuantity?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type InventoryCountItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventoryCount?: boolean | InventoryCountDefaultArgs<ExtArgs>
    item?: boolean | InventoryCountItem$itemArgs<ExtArgs>
    medicine?: boolean | InventoryCountItem$medicineArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type InventoryCountItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventoryCount?: boolean | InventoryCountDefaultArgs<ExtArgs>
    item?: boolean | InventoryCountItem$itemArgs<ExtArgs>
    medicine?: boolean | InventoryCountItem$medicineArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $InventoryCountItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryCountItem"
    objects: {
      inventoryCount: Prisma.$InventoryCountPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs> | null
      medicine: Prisma.$MedicinePayload<ExtArgs> | null
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      inventoryCountId: number
      itemId: number | null
      medicineId: number | null
      expectedQuantity: number
      actualQuantity: number
      notes: string | null
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["inventoryCountItem"]>
    composites: {}
  }

  type InventoryCountItemGetPayload<S extends boolean | null | undefined | InventoryCountItemDefaultArgs> = $Result.GetResult<Prisma.$InventoryCountItemPayload, S>

  type InventoryCountItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryCountItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryCountItemCountAggregateInputType | true
    }

  export interface InventoryCountItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryCountItem'], meta: { name: 'InventoryCountItem' } }
    /**
     * Find zero or one InventoryCountItem that matches the filter.
     * @param {InventoryCountItemFindUniqueArgs} args - Arguments to find a InventoryCountItem
     * @example
     * // Get one InventoryCountItem
     * const inventoryCountItem = await prisma.inventoryCountItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryCountItemFindUniqueArgs>(args: SelectSubset<T, InventoryCountItemFindUniqueArgs<ExtArgs>>): Prisma__InventoryCountItemClient<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryCountItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryCountItemFindUniqueOrThrowArgs} args - Arguments to find a InventoryCountItem
     * @example
     * // Get one InventoryCountItem
     * const inventoryCountItem = await prisma.inventoryCountItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryCountItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryCountItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryCountItemClient<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryCountItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountItemFindFirstArgs} args - Arguments to find a InventoryCountItem
     * @example
     * // Get one InventoryCountItem
     * const inventoryCountItem = await prisma.inventoryCountItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryCountItemFindFirstArgs>(args?: SelectSubset<T, InventoryCountItemFindFirstArgs<ExtArgs>>): Prisma__InventoryCountItemClient<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryCountItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountItemFindFirstOrThrowArgs} args - Arguments to find a InventoryCountItem
     * @example
     * // Get one InventoryCountItem
     * const inventoryCountItem = await prisma.inventoryCountItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryCountItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryCountItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryCountItemClient<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryCountItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryCountItems
     * const inventoryCountItems = await prisma.inventoryCountItem.findMany()
     * 
     * // Get first 10 InventoryCountItems
     * const inventoryCountItems = await prisma.inventoryCountItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryCountItemWithIdOnly = await prisma.inventoryCountItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryCountItemFindManyArgs>(args?: SelectSubset<T, InventoryCountItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryCountItem.
     * @param {InventoryCountItemCreateArgs} args - Arguments to create a InventoryCountItem.
     * @example
     * // Create one InventoryCountItem
     * const InventoryCountItem = await prisma.inventoryCountItem.create({
     *   data: {
     *     // ... data to create a InventoryCountItem
     *   }
     * })
     * 
     */
    create<T extends InventoryCountItemCreateArgs>(args: SelectSubset<T, InventoryCountItemCreateArgs<ExtArgs>>): Prisma__InventoryCountItemClient<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryCountItems.
     * @param {InventoryCountItemCreateManyArgs} args - Arguments to create many InventoryCountItems.
     * @example
     * // Create many InventoryCountItems
     * const inventoryCountItem = await prisma.inventoryCountItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryCountItemCreateManyArgs>(args?: SelectSubset<T, InventoryCountItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InventoryCountItems and returns the data saved in the database.
     * @param {InventoryCountItemCreateManyAndReturnArgs} args - Arguments to create many InventoryCountItems.
     * @example
     * // Create many InventoryCountItems
     * const inventoryCountItem = await prisma.inventoryCountItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InventoryCountItems and only return the `id`
     * const inventoryCountItemWithIdOnly = await prisma.inventoryCountItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryCountItemCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryCountItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InventoryCountItem.
     * @param {InventoryCountItemDeleteArgs} args - Arguments to delete one InventoryCountItem.
     * @example
     * // Delete one InventoryCountItem
     * const InventoryCountItem = await prisma.inventoryCountItem.delete({
     *   where: {
     *     // ... filter to delete one InventoryCountItem
     *   }
     * })
     * 
     */
    delete<T extends InventoryCountItemDeleteArgs>(args: SelectSubset<T, InventoryCountItemDeleteArgs<ExtArgs>>): Prisma__InventoryCountItemClient<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryCountItem.
     * @param {InventoryCountItemUpdateArgs} args - Arguments to update one InventoryCountItem.
     * @example
     * // Update one InventoryCountItem
     * const inventoryCountItem = await prisma.inventoryCountItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryCountItemUpdateArgs>(args: SelectSubset<T, InventoryCountItemUpdateArgs<ExtArgs>>): Prisma__InventoryCountItemClient<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryCountItems.
     * @param {InventoryCountItemDeleteManyArgs} args - Arguments to filter InventoryCountItems to delete.
     * @example
     * // Delete a few InventoryCountItems
     * const { count } = await prisma.inventoryCountItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryCountItemDeleteManyArgs>(args?: SelectSubset<T, InventoryCountItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryCountItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryCountItems
     * const inventoryCountItem = await prisma.inventoryCountItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryCountItemUpdateManyArgs>(args: SelectSubset<T, InventoryCountItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryCountItem.
     * @param {InventoryCountItemUpsertArgs} args - Arguments to update or create a InventoryCountItem.
     * @example
     * // Update or create a InventoryCountItem
     * const inventoryCountItem = await prisma.inventoryCountItem.upsert({
     *   create: {
     *     // ... data to create a InventoryCountItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryCountItem we want to update
     *   }
     * })
     */
    upsert<T extends InventoryCountItemUpsertArgs>(args: SelectSubset<T, InventoryCountItemUpsertArgs<ExtArgs>>): Prisma__InventoryCountItemClient<$Result.GetResult<Prisma.$InventoryCountItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryCountItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountItemCountArgs} args - Arguments to filter InventoryCountItems to count.
     * @example
     * // Count the number of InventoryCountItems
     * const count = await prisma.inventoryCountItem.count({
     *   where: {
     *     // ... the filter for the InventoryCountItems we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountItemCountArgs>(
      args?: Subset<T, InventoryCountItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryCountItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryCountItemAggregateArgs>(args: Subset<T, InventoryCountItemAggregateArgs>): Prisma.PrismaPromise<GetInventoryCountItemAggregateType<T>>

    /**
     * Group by InventoryCountItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryCountItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryCountItemGroupByArgs['orderBy'] }
        : { orderBy?: InventoryCountItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryCountItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryCountItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryCountItem model
   */
  readonly fields: InventoryCountItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryCountItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryCountItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventoryCount<T extends InventoryCountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryCountDefaultArgs<ExtArgs>>): Prisma__InventoryCountClient<$Result.GetResult<Prisma.$InventoryCountPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends InventoryCountItem$itemArgs<ExtArgs> = {}>(args?: Subset<T, InventoryCountItem$itemArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    medicine<T extends InventoryCountItem$medicineArgs<ExtArgs> = {}>(args?: Subset<T, InventoryCountItem$medicineArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryCountItem model
   */ 
  interface InventoryCountItemFieldRefs {
    readonly id: FieldRef<"InventoryCountItem", 'Int'>
    readonly inventoryCountId: FieldRef<"InventoryCountItem", 'Int'>
    readonly itemId: FieldRef<"InventoryCountItem", 'Int'>
    readonly medicineId: FieldRef<"InventoryCountItem", 'Int'>
    readonly expectedQuantity: FieldRef<"InventoryCountItem", 'Int'>
    readonly actualQuantity: FieldRef<"InventoryCountItem", 'Int'>
    readonly notes: FieldRef<"InventoryCountItem", 'String'>
    readonly createdAt: FieldRef<"InventoryCountItem", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryCountItem", 'DateTime'>
    readonly createdById: FieldRef<"InventoryCountItem", 'Int'>
    readonly updatedById: FieldRef<"InventoryCountItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * InventoryCountItem findUnique
   */
  export type InventoryCountItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCountItem to fetch.
     */
    where: InventoryCountItemWhereUniqueInput
  }

  /**
   * InventoryCountItem findUniqueOrThrow
   */
  export type InventoryCountItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCountItem to fetch.
     */
    where: InventoryCountItemWhereUniqueInput
  }

  /**
   * InventoryCountItem findFirst
   */
  export type InventoryCountItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCountItem to fetch.
     */
    where?: InventoryCountItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryCountItems to fetch.
     */
    orderBy?: InventoryCountItemOrderByWithRelationInput | InventoryCountItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryCountItems.
     */
    cursor?: InventoryCountItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryCountItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryCountItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryCountItems.
     */
    distinct?: InventoryCountItemScalarFieldEnum | InventoryCountItemScalarFieldEnum[]
  }

  /**
   * InventoryCountItem findFirstOrThrow
   */
  export type InventoryCountItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCountItem to fetch.
     */
    where?: InventoryCountItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryCountItems to fetch.
     */
    orderBy?: InventoryCountItemOrderByWithRelationInput | InventoryCountItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryCountItems.
     */
    cursor?: InventoryCountItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryCountItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryCountItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryCountItems.
     */
    distinct?: InventoryCountItemScalarFieldEnum | InventoryCountItemScalarFieldEnum[]
  }

  /**
   * InventoryCountItem findMany
   */
  export type InventoryCountItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryCountItems to fetch.
     */
    where?: InventoryCountItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryCountItems to fetch.
     */
    orderBy?: InventoryCountItemOrderByWithRelationInput | InventoryCountItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryCountItems.
     */
    cursor?: InventoryCountItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryCountItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryCountItems.
     */
    skip?: number
    distinct?: InventoryCountItemScalarFieldEnum | InventoryCountItemScalarFieldEnum[]
  }

  /**
   * InventoryCountItem create
   */
  export type InventoryCountItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryCountItem.
     */
    data: XOR<InventoryCountItemCreateInput, InventoryCountItemUncheckedCreateInput>
  }

  /**
   * InventoryCountItem createMany
   */
  export type InventoryCountItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryCountItems.
     */
    data: InventoryCountItemCreateManyInput | InventoryCountItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryCountItem createManyAndReturn
   */
  export type InventoryCountItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InventoryCountItems.
     */
    data: InventoryCountItemCreateManyInput | InventoryCountItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InventoryCountItem update
   */
  export type InventoryCountItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryCountItem.
     */
    data: XOR<InventoryCountItemUpdateInput, InventoryCountItemUncheckedUpdateInput>
    /**
     * Choose, which InventoryCountItem to update.
     */
    where: InventoryCountItemWhereUniqueInput
  }

  /**
   * InventoryCountItem updateMany
   */
  export type InventoryCountItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryCountItems.
     */
    data: XOR<InventoryCountItemUpdateManyMutationInput, InventoryCountItemUncheckedUpdateManyInput>
    /**
     * Filter which InventoryCountItems to update
     */
    where?: InventoryCountItemWhereInput
  }

  /**
   * InventoryCountItem upsert
   */
  export type InventoryCountItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryCountItem to update in case it exists.
     */
    where: InventoryCountItemWhereUniqueInput
    /**
     * In case the InventoryCountItem found by the `where` argument doesn't exist, create a new InventoryCountItem with this data.
     */
    create: XOR<InventoryCountItemCreateInput, InventoryCountItemUncheckedCreateInput>
    /**
     * In case the InventoryCountItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryCountItemUpdateInput, InventoryCountItemUncheckedUpdateInput>
  }

  /**
   * InventoryCountItem delete
   */
  export type InventoryCountItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
    /**
     * Filter which InventoryCountItem to delete.
     */
    where: InventoryCountItemWhereUniqueInput
  }

  /**
   * InventoryCountItem deleteMany
   */
  export type InventoryCountItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryCountItems to delete
     */
    where?: InventoryCountItemWhereInput
  }

  /**
   * InventoryCountItem.item
   */
  export type InventoryCountItem$itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
  }

  /**
   * InventoryCountItem.medicine
   */
  export type InventoryCountItem$medicineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    where?: MedicineWhereInput
  }

  /**
   * InventoryCountItem without action
   */
  export type InventoryCountItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountItem
     */
    select?: InventoryCountItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryCountItemInclude<ExtArgs> | null
  }


  /**
   * Model PurchaseOrder
   */

  export type AggregatePurchaseOrder = {
    _count: PurchaseOrderCountAggregateOutputType | null
    _avg: PurchaseOrderAvgAggregateOutputType | null
    _sum: PurchaseOrderSumAggregateOutputType | null
    _min: PurchaseOrderMinAggregateOutputType | null
    _max: PurchaseOrderMaxAggregateOutputType | null
  }

  export type PurchaseOrderAvgAggregateOutputType = {
    id: number | null
    supplierId: number | null
    totalAmount: number | null
    createdById: number | null
    updatedById: number | null
    employeeId: number | null
  }

  export type PurchaseOrderSumAggregateOutputType = {
    id: number | null
    supplierId: number | null
    totalAmount: number | null
    createdById: number | null
    updatedById: number | null
    employeeId: number | null
  }

  export type PurchaseOrderMinAggregateOutputType = {
    id: number | null
    orderNumber: string | null
    supplierId: number | null
    orderDate: Date | null
    status: string | null
    totalAmount: number | null
    notes: string | null
    createdById: number | null
    updatedById: number | null
    createdAt: Date | null
    updatedAt: Date | null
    employeeId: number | null
  }

  export type PurchaseOrderMaxAggregateOutputType = {
    id: number | null
    orderNumber: string | null
    supplierId: number | null
    orderDate: Date | null
    status: string | null
    totalAmount: number | null
    notes: string | null
    createdById: number | null
    updatedById: number | null
    createdAt: Date | null
    updatedAt: Date | null
    employeeId: number | null
  }

  export type PurchaseOrderCountAggregateOutputType = {
    id: number
    orderNumber: number
    supplierId: number
    orderDate: number
    status: number
    totalAmount: number
    notes: number
    createdById: number
    updatedById: number
    createdAt: number
    updatedAt: number
    employeeId: number
    _all: number
  }


  export type PurchaseOrderAvgAggregateInputType = {
    id?: true
    supplierId?: true
    totalAmount?: true
    createdById?: true
    updatedById?: true
    employeeId?: true
  }

  export type PurchaseOrderSumAggregateInputType = {
    id?: true
    supplierId?: true
    totalAmount?: true
    createdById?: true
    updatedById?: true
    employeeId?: true
  }

  export type PurchaseOrderMinAggregateInputType = {
    id?: true
    orderNumber?: true
    supplierId?: true
    orderDate?: true
    status?: true
    totalAmount?: true
    notes?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    employeeId?: true
  }

  export type PurchaseOrderMaxAggregateInputType = {
    id?: true
    orderNumber?: true
    supplierId?: true
    orderDate?: true
    status?: true
    totalAmount?: true
    notes?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    employeeId?: true
  }

  export type PurchaseOrderCountAggregateInputType = {
    id?: true
    orderNumber?: true
    supplierId?: true
    orderDate?: true
    status?: true
    totalAmount?: true
    notes?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    employeeId?: true
    _all?: true
  }

  export type PurchaseOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrder to aggregate.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseOrders
    **/
    _count?: true | PurchaseOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseOrderMaxAggregateInputType
  }

  export type GetPurchaseOrderAggregateType<T extends PurchaseOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseOrder[P]>
      : GetScalarType<T[P], AggregatePurchaseOrder[P]>
  }




  export type PurchaseOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
    orderBy?: PurchaseOrderOrderByWithAggregationInput | PurchaseOrderOrderByWithAggregationInput[]
    by: PurchaseOrderScalarFieldEnum[] | PurchaseOrderScalarFieldEnum
    having?: PurchaseOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseOrderCountAggregateInputType | true
    _avg?: PurchaseOrderAvgAggregateInputType
    _sum?: PurchaseOrderSumAggregateInputType
    _min?: PurchaseOrderMinAggregateInputType
    _max?: PurchaseOrderMaxAggregateInputType
  }

  export type PurchaseOrderGroupByOutputType = {
    id: number
    orderNumber: string
    supplierId: number
    orderDate: Date
    status: string
    totalAmount: number
    notes: string | null
    createdById: number
    updatedById: number
    createdAt: Date
    updatedAt: Date
    employeeId: number | null
    _count: PurchaseOrderCountAggregateOutputType | null
    _avg: PurchaseOrderAvgAggregateOutputType | null
    _sum: PurchaseOrderSumAggregateOutputType | null
    _min: PurchaseOrderMinAggregateOutputType | null
    _max: PurchaseOrderMaxAggregateOutputType | null
  }

  type GetPurchaseOrderGroupByPayload<T extends PurchaseOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    supplierId?: boolean
    orderDate?: boolean
    status?: boolean
    totalAmount?: boolean
    notes?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employeeId?: boolean
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    items?: boolean | PurchaseOrder$itemsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    Employee?: boolean | PurchaseOrder$EmployeeArgs<ExtArgs>
    _count?: boolean | PurchaseOrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrder"]>

  export type PurchaseOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderNumber?: boolean
    supplierId?: boolean
    orderDate?: boolean
    status?: boolean
    totalAmount?: boolean
    notes?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employeeId?: boolean
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    Employee?: boolean | PurchaseOrder$EmployeeArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrder"]>

  export type PurchaseOrderSelectScalar = {
    id?: boolean
    orderNumber?: boolean
    supplierId?: boolean
    orderDate?: boolean
    status?: boolean
    totalAmount?: boolean
    notes?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employeeId?: boolean
  }

  export type PurchaseOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    items?: boolean | PurchaseOrder$itemsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    Employee?: boolean | PurchaseOrder$EmployeeArgs<ExtArgs>
    _count?: boolean | PurchaseOrderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PurchaseOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supplier?: boolean | SupplierDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    Employee?: boolean | PurchaseOrder$EmployeeArgs<ExtArgs>
  }

  export type $PurchaseOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PurchaseOrder"
    objects: {
      supplier: Prisma.$SupplierPayload<ExtArgs>
      items: Prisma.$PurchaseOrderItemPayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
      Employee: Prisma.$EmployeePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderNumber: string
      supplierId: number
      orderDate: Date
      status: string
      totalAmount: number
      notes: string | null
      createdById: number
      updatedById: number
      createdAt: Date
      updatedAt: Date
      employeeId: number | null
    }, ExtArgs["result"]["purchaseOrder"]>
    composites: {}
  }

  type PurchaseOrderGetPayload<S extends boolean | null | undefined | PurchaseOrderDefaultArgs> = $Result.GetResult<Prisma.$PurchaseOrderPayload, S>

  type PurchaseOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PurchaseOrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PurchaseOrderCountAggregateInputType | true
    }

  export interface PurchaseOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseOrder'], meta: { name: 'PurchaseOrder' } }
    /**
     * Find zero or one PurchaseOrder that matches the filter.
     * @param {PurchaseOrderFindUniqueArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PurchaseOrderFindUniqueArgs>(args: SelectSubset<T, PurchaseOrderFindUniqueArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PurchaseOrder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PurchaseOrderFindUniqueOrThrowArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PurchaseOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PurchaseOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindFirstArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PurchaseOrderFindFirstArgs>(args?: SelectSubset<T, PurchaseOrderFindFirstArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PurchaseOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindFirstOrThrowArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PurchaseOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, PurchaseOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PurchaseOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseOrders
     * const purchaseOrders = await prisma.purchaseOrder.findMany()
     * 
     * // Get first 10 PurchaseOrders
     * const purchaseOrders = await prisma.purchaseOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseOrderWithIdOnly = await prisma.purchaseOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PurchaseOrderFindManyArgs>(args?: SelectSubset<T, PurchaseOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PurchaseOrder.
     * @param {PurchaseOrderCreateArgs} args - Arguments to create a PurchaseOrder.
     * @example
     * // Create one PurchaseOrder
     * const PurchaseOrder = await prisma.purchaseOrder.create({
     *   data: {
     *     // ... data to create a PurchaseOrder
     *   }
     * })
     * 
     */
    create<T extends PurchaseOrderCreateArgs>(args: SelectSubset<T, PurchaseOrderCreateArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PurchaseOrders.
     * @param {PurchaseOrderCreateManyArgs} args - Arguments to create many PurchaseOrders.
     * @example
     * // Create many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PurchaseOrderCreateManyArgs>(args?: SelectSubset<T, PurchaseOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PurchaseOrders and returns the data saved in the database.
     * @param {PurchaseOrderCreateManyAndReturnArgs} args - Arguments to create many PurchaseOrders.
     * @example
     * // Create many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PurchaseOrders and only return the `id`
     * const purchaseOrderWithIdOnly = await prisma.purchaseOrder.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PurchaseOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, PurchaseOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PurchaseOrder.
     * @param {PurchaseOrderDeleteArgs} args - Arguments to delete one PurchaseOrder.
     * @example
     * // Delete one PurchaseOrder
     * const PurchaseOrder = await prisma.purchaseOrder.delete({
     *   where: {
     *     // ... filter to delete one PurchaseOrder
     *   }
     * })
     * 
     */
    delete<T extends PurchaseOrderDeleteArgs>(args: SelectSubset<T, PurchaseOrderDeleteArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PurchaseOrder.
     * @param {PurchaseOrderUpdateArgs} args - Arguments to update one PurchaseOrder.
     * @example
     * // Update one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PurchaseOrderUpdateArgs>(args: SelectSubset<T, PurchaseOrderUpdateArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PurchaseOrders.
     * @param {PurchaseOrderDeleteManyArgs} args - Arguments to filter PurchaseOrders to delete.
     * @example
     * // Delete a few PurchaseOrders
     * const { count } = await prisma.purchaseOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PurchaseOrderDeleteManyArgs>(args?: SelectSubset<T, PurchaseOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PurchaseOrderUpdateManyArgs>(args: SelectSubset<T, PurchaseOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PurchaseOrder.
     * @param {PurchaseOrderUpsertArgs} args - Arguments to update or create a PurchaseOrder.
     * @example
     * // Update or create a PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.upsert({
     *   create: {
     *     // ... data to create a PurchaseOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseOrder we want to update
     *   }
     * })
     */
    upsert<T extends PurchaseOrderUpsertArgs>(args: SelectSubset<T, PurchaseOrderUpsertArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderCountArgs} args - Arguments to filter PurchaseOrders to count.
     * @example
     * // Count the number of PurchaseOrders
     * const count = await prisma.purchaseOrder.count({
     *   where: {
     *     // ... the filter for the PurchaseOrders we want to count
     *   }
     * })
    **/
    count<T extends PurchaseOrderCountArgs>(
      args?: Subset<T, PurchaseOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseOrderAggregateArgs>(args: Subset<T, PurchaseOrderAggregateArgs>): Prisma.PrismaPromise<GetPurchaseOrderAggregateType<T>>

    /**
     * Group by PurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseOrderGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PurchaseOrder model
   */
  readonly fields: PurchaseOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    supplier<T extends SupplierDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SupplierDefaultArgs<ExtArgs>>): Prisma__SupplierClient<$Result.GetResult<Prisma.$SupplierPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends PurchaseOrder$itemsArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseOrder$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Employee<T extends PurchaseOrder$EmployeeArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseOrder$EmployeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PurchaseOrder model
   */ 
  interface PurchaseOrderFieldRefs {
    readonly id: FieldRef<"PurchaseOrder", 'Int'>
    readonly orderNumber: FieldRef<"PurchaseOrder", 'String'>
    readonly supplierId: FieldRef<"PurchaseOrder", 'Int'>
    readonly orderDate: FieldRef<"PurchaseOrder", 'DateTime'>
    readonly status: FieldRef<"PurchaseOrder", 'String'>
    readonly totalAmount: FieldRef<"PurchaseOrder", 'Float'>
    readonly notes: FieldRef<"PurchaseOrder", 'String'>
    readonly createdById: FieldRef<"PurchaseOrder", 'Int'>
    readonly updatedById: FieldRef<"PurchaseOrder", 'Int'>
    readonly createdAt: FieldRef<"PurchaseOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"PurchaseOrder", 'DateTime'>
    readonly employeeId: FieldRef<"PurchaseOrder", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PurchaseOrder findUnique
   */
  export type PurchaseOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder findUniqueOrThrow
   */
  export type PurchaseOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder findFirst
   */
  export type PurchaseOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrders.
     */
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * PurchaseOrder findFirstOrThrow
   */
  export type PurchaseOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrders.
     */
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * PurchaseOrder findMany
   */
  export type PurchaseOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrders to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: PurchaseOrderOrderByWithRelationInput | PurchaseOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    distinct?: PurchaseOrderScalarFieldEnum | PurchaseOrderScalarFieldEnum[]
  }

  /**
   * PurchaseOrder create
   */
  export type PurchaseOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a PurchaseOrder.
     */
    data: XOR<PurchaseOrderCreateInput, PurchaseOrderUncheckedCreateInput>
  }

  /**
   * PurchaseOrder createMany
   */
  export type PurchaseOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseOrders.
     */
    data: PurchaseOrderCreateManyInput | PurchaseOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PurchaseOrder createManyAndReturn
   */
  export type PurchaseOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PurchaseOrders.
     */
    data: PurchaseOrderCreateManyInput | PurchaseOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PurchaseOrder update
   */
  export type PurchaseOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a PurchaseOrder.
     */
    data: XOR<PurchaseOrderUpdateInput, PurchaseOrderUncheckedUpdateInput>
    /**
     * Choose, which PurchaseOrder to update.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder updateMany
   */
  export type PurchaseOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseOrders.
     */
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseOrders to update
     */
    where?: PurchaseOrderWhereInput
  }

  /**
   * PurchaseOrder upsert
   */
  export type PurchaseOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the PurchaseOrder to update in case it exists.
     */
    where: PurchaseOrderWhereUniqueInput
    /**
     * In case the PurchaseOrder found by the `where` argument doesn't exist, create a new PurchaseOrder with this data.
     */
    create: XOR<PurchaseOrderCreateInput, PurchaseOrderUncheckedCreateInput>
    /**
     * In case the PurchaseOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseOrderUpdateInput, PurchaseOrderUncheckedUpdateInput>
  }

  /**
   * PurchaseOrder delete
   */
  export type PurchaseOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter which PurchaseOrder to delete.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder deleteMany
   */
  export type PurchaseOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrders to delete
     */
    where?: PurchaseOrderWhereInput
  }

  /**
   * PurchaseOrder.items
   */
  export type PurchaseOrder$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    where?: PurchaseOrderItemWhereInput
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    cursor?: PurchaseOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * PurchaseOrder.Employee
   */
  export type PurchaseOrder$EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * PurchaseOrder without action
   */
  export type PurchaseOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
  }


  /**
   * Model PurchaseOrderItem
   */

  export type AggregatePurchaseOrderItem = {
    _count: PurchaseOrderItemCountAggregateOutputType | null
    _avg: PurchaseOrderItemAvgAggregateOutputType | null
    _sum: PurchaseOrderItemSumAggregateOutputType | null
    _min: PurchaseOrderItemMinAggregateOutputType | null
    _max: PurchaseOrderItemMaxAggregateOutputType | null
  }

  export type PurchaseOrderItemAvgAggregateOutputType = {
    id: number | null
    purchaseOrderId: number | null
    itemId: number | null
    medicineId: number | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type PurchaseOrderItemSumAggregateOutputType = {
    id: number | null
    purchaseOrderId: number | null
    itemId: number | null
    medicineId: number | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
  }

  export type PurchaseOrderItemMinAggregateOutputType = {
    id: number | null
    purchaseOrderId: number | null
    itemId: number | null
    medicineId: number | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PurchaseOrderItemMaxAggregateOutputType = {
    id: number | null
    purchaseOrderId: number | null
    itemId: number | null
    medicineId: number | null
    quantity: number | null
    unitPrice: number | null
    totalPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PurchaseOrderItemCountAggregateOutputType = {
    id: number
    purchaseOrderId: number
    itemId: number
    medicineId: number
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PurchaseOrderItemAvgAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    itemId?: true
    medicineId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type PurchaseOrderItemSumAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    itemId?: true
    medicineId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
  }

  export type PurchaseOrderItemMinAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    itemId?: true
    medicineId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PurchaseOrderItemMaxAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    itemId?: true
    medicineId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PurchaseOrderItemCountAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    itemId?: true
    medicineId?: true
    quantity?: true
    unitPrice?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PurchaseOrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrderItem to aggregate.
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrderItems to fetch.
     */
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseOrderItems
    **/
    _count?: true | PurchaseOrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseOrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseOrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseOrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseOrderItemMaxAggregateInputType
  }

  export type GetPurchaseOrderItemAggregateType<T extends PurchaseOrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseOrderItem[P]>
      : GetScalarType<T[P], AggregatePurchaseOrderItem[P]>
  }




  export type PurchaseOrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderItemWhereInput
    orderBy?: PurchaseOrderItemOrderByWithAggregationInput | PurchaseOrderItemOrderByWithAggregationInput[]
    by: PurchaseOrderItemScalarFieldEnum[] | PurchaseOrderItemScalarFieldEnum
    having?: PurchaseOrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseOrderItemCountAggregateInputType | true
    _avg?: PurchaseOrderItemAvgAggregateInputType
    _sum?: PurchaseOrderItemSumAggregateInputType
    _min?: PurchaseOrderItemMinAggregateInputType
    _max?: PurchaseOrderItemMaxAggregateInputType
  }

  export type PurchaseOrderItemGroupByOutputType = {
    id: number
    purchaseOrderId: number
    itemId: number | null
    medicineId: number | null
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt: Date
    updatedAt: Date
    _count: PurchaseOrderItemCountAggregateOutputType | null
    _avg: PurchaseOrderItemAvgAggregateOutputType | null
    _sum: PurchaseOrderItemSumAggregateOutputType | null
    _min: PurchaseOrderItemMinAggregateOutputType | null
    _max: PurchaseOrderItemMaxAggregateOutputType | null
  }

  type GetPurchaseOrderItemGroupByPayload<T extends PurchaseOrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchaseOrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseOrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseOrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseOrderItemGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseOrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    purchaseOrderId?: boolean
    itemId?: boolean
    medicineId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    purchaseOrder?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    item?: boolean | PurchaseOrderItem$itemArgs<ExtArgs>
    medicine?: boolean | PurchaseOrderItem$medicineArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrderItem"]>

  export type PurchaseOrderItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    purchaseOrderId?: boolean
    itemId?: boolean
    medicineId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    purchaseOrder?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    item?: boolean | PurchaseOrderItem$itemArgs<ExtArgs>
    medicine?: boolean | PurchaseOrderItem$medicineArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrderItem"]>

  export type PurchaseOrderItemSelectScalar = {
    id?: boolean
    purchaseOrderId?: boolean
    itemId?: boolean
    medicineId?: boolean
    quantity?: boolean
    unitPrice?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PurchaseOrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaseOrder?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    item?: boolean | PurchaseOrderItem$itemArgs<ExtArgs>
    medicine?: boolean | PurchaseOrderItem$medicineArgs<ExtArgs>
  }
  export type PurchaseOrderItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaseOrder?: boolean | PurchaseOrderDefaultArgs<ExtArgs>
    item?: boolean | PurchaseOrderItem$itemArgs<ExtArgs>
    medicine?: boolean | PurchaseOrderItem$medicineArgs<ExtArgs>
  }

  export type $PurchaseOrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PurchaseOrderItem"
    objects: {
      purchaseOrder: Prisma.$PurchaseOrderPayload<ExtArgs>
      item: Prisma.$ItemPayload<ExtArgs> | null
      medicine: Prisma.$MedicinePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      purchaseOrderId: number
      itemId: number | null
      medicineId: number | null
      quantity: number
      unitPrice: number
      totalPrice: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["purchaseOrderItem"]>
    composites: {}
  }

  type PurchaseOrderItemGetPayload<S extends boolean | null | undefined | PurchaseOrderItemDefaultArgs> = $Result.GetResult<Prisma.$PurchaseOrderItemPayload, S>

  type PurchaseOrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PurchaseOrderItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PurchaseOrderItemCountAggregateInputType | true
    }

  export interface PurchaseOrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseOrderItem'], meta: { name: 'PurchaseOrderItem' } }
    /**
     * Find zero or one PurchaseOrderItem that matches the filter.
     * @param {PurchaseOrderItemFindUniqueArgs} args - Arguments to find a PurchaseOrderItem
     * @example
     * // Get one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PurchaseOrderItemFindUniqueArgs>(args: SelectSubset<T, PurchaseOrderItemFindUniqueArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PurchaseOrderItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PurchaseOrderItemFindUniqueOrThrowArgs} args - Arguments to find a PurchaseOrderItem
     * @example
     * // Get one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PurchaseOrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, PurchaseOrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PurchaseOrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemFindFirstArgs} args - Arguments to find a PurchaseOrderItem
     * @example
     * // Get one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PurchaseOrderItemFindFirstArgs>(args?: SelectSubset<T, PurchaseOrderItemFindFirstArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PurchaseOrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemFindFirstOrThrowArgs} args - Arguments to find a PurchaseOrderItem
     * @example
     * // Get one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PurchaseOrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, PurchaseOrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PurchaseOrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseOrderItems
     * const purchaseOrderItems = await prisma.purchaseOrderItem.findMany()
     * 
     * // Get first 10 PurchaseOrderItems
     * const purchaseOrderItems = await prisma.purchaseOrderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseOrderItemWithIdOnly = await prisma.purchaseOrderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PurchaseOrderItemFindManyArgs>(args?: SelectSubset<T, PurchaseOrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PurchaseOrderItem.
     * @param {PurchaseOrderItemCreateArgs} args - Arguments to create a PurchaseOrderItem.
     * @example
     * // Create one PurchaseOrderItem
     * const PurchaseOrderItem = await prisma.purchaseOrderItem.create({
     *   data: {
     *     // ... data to create a PurchaseOrderItem
     *   }
     * })
     * 
     */
    create<T extends PurchaseOrderItemCreateArgs>(args: SelectSubset<T, PurchaseOrderItemCreateArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PurchaseOrderItems.
     * @param {PurchaseOrderItemCreateManyArgs} args - Arguments to create many PurchaseOrderItems.
     * @example
     * // Create many PurchaseOrderItems
     * const purchaseOrderItem = await prisma.purchaseOrderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PurchaseOrderItemCreateManyArgs>(args?: SelectSubset<T, PurchaseOrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PurchaseOrderItems and returns the data saved in the database.
     * @param {PurchaseOrderItemCreateManyAndReturnArgs} args - Arguments to create many PurchaseOrderItems.
     * @example
     * // Create many PurchaseOrderItems
     * const purchaseOrderItem = await prisma.purchaseOrderItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PurchaseOrderItems and only return the `id`
     * const purchaseOrderItemWithIdOnly = await prisma.purchaseOrderItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PurchaseOrderItemCreateManyAndReturnArgs>(args?: SelectSubset<T, PurchaseOrderItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PurchaseOrderItem.
     * @param {PurchaseOrderItemDeleteArgs} args - Arguments to delete one PurchaseOrderItem.
     * @example
     * // Delete one PurchaseOrderItem
     * const PurchaseOrderItem = await prisma.purchaseOrderItem.delete({
     *   where: {
     *     // ... filter to delete one PurchaseOrderItem
     *   }
     * })
     * 
     */
    delete<T extends PurchaseOrderItemDeleteArgs>(args: SelectSubset<T, PurchaseOrderItemDeleteArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PurchaseOrderItem.
     * @param {PurchaseOrderItemUpdateArgs} args - Arguments to update one PurchaseOrderItem.
     * @example
     * // Update one PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PurchaseOrderItemUpdateArgs>(args: SelectSubset<T, PurchaseOrderItemUpdateArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PurchaseOrderItems.
     * @param {PurchaseOrderItemDeleteManyArgs} args - Arguments to filter PurchaseOrderItems to delete.
     * @example
     * // Delete a few PurchaseOrderItems
     * const { count } = await prisma.purchaseOrderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PurchaseOrderItemDeleteManyArgs>(args?: SelectSubset<T, PurchaseOrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseOrderItems
     * const purchaseOrderItem = await prisma.purchaseOrderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PurchaseOrderItemUpdateManyArgs>(args: SelectSubset<T, PurchaseOrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PurchaseOrderItem.
     * @param {PurchaseOrderItemUpsertArgs} args - Arguments to update or create a PurchaseOrderItem.
     * @example
     * // Update or create a PurchaseOrderItem
     * const purchaseOrderItem = await prisma.purchaseOrderItem.upsert({
     *   create: {
     *     // ... data to create a PurchaseOrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseOrderItem we want to update
     *   }
     * })
     */
    upsert<T extends PurchaseOrderItemUpsertArgs>(args: SelectSubset<T, PurchaseOrderItemUpsertArgs<ExtArgs>>): Prisma__PurchaseOrderItemClient<$Result.GetResult<Prisma.$PurchaseOrderItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PurchaseOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemCountArgs} args - Arguments to filter PurchaseOrderItems to count.
     * @example
     * // Count the number of PurchaseOrderItems
     * const count = await prisma.purchaseOrderItem.count({
     *   where: {
     *     // ... the filter for the PurchaseOrderItems we want to count
     *   }
     * })
    **/
    count<T extends PurchaseOrderItemCountArgs>(
      args?: Subset<T, PurchaseOrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseOrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseOrderItemAggregateArgs>(args: Subset<T, PurchaseOrderItemAggregateArgs>): Prisma.PrismaPromise<GetPurchaseOrderItemAggregateType<T>>

    /**
     * Group by PurchaseOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseOrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseOrderItemGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseOrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseOrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PurchaseOrderItem model
   */
  readonly fields: PurchaseOrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseOrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchaseOrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    purchaseOrder<T extends PurchaseOrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseOrderDefaultArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Result.GetResult<Prisma.$PurchaseOrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends PurchaseOrderItem$itemArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseOrderItem$itemArgs<ExtArgs>>): Prisma__ItemClient<$Result.GetResult<Prisma.$ItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    medicine<T extends PurchaseOrderItem$medicineArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseOrderItem$medicineArgs<ExtArgs>>): Prisma__MedicineClient<$Result.GetResult<Prisma.$MedicinePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PurchaseOrderItem model
   */ 
  interface PurchaseOrderItemFieldRefs {
    readonly id: FieldRef<"PurchaseOrderItem", 'Int'>
    readonly purchaseOrderId: FieldRef<"PurchaseOrderItem", 'Int'>
    readonly itemId: FieldRef<"PurchaseOrderItem", 'Int'>
    readonly medicineId: FieldRef<"PurchaseOrderItem", 'Int'>
    readonly quantity: FieldRef<"PurchaseOrderItem", 'Int'>
    readonly unitPrice: FieldRef<"PurchaseOrderItem", 'Float'>
    readonly totalPrice: FieldRef<"PurchaseOrderItem", 'Float'>
    readonly createdAt: FieldRef<"PurchaseOrderItem", 'DateTime'>
    readonly updatedAt: FieldRef<"PurchaseOrderItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PurchaseOrderItem findUnique
   */
  export type PurchaseOrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItem to fetch.
     */
    where: PurchaseOrderItemWhereUniqueInput
  }

  /**
   * PurchaseOrderItem findUniqueOrThrow
   */
  export type PurchaseOrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItem to fetch.
     */
    where: PurchaseOrderItemWhereUniqueInput
  }

  /**
   * PurchaseOrderItem findFirst
   */
  export type PurchaseOrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItem to fetch.
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrderItems to fetch.
     */
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrderItems.
     */
    cursor?: PurchaseOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrderItems.
     */
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * PurchaseOrderItem findFirstOrThrow
   */
  export type PurchaseOrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItem to fetch.
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrderItems to fetch.
     */
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrderItems.
     */
    cursor?: PurchaseOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrderItems.
     */
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * PurchaseOrderItem findMany
   */
  export type PurchaseOrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrderItems to fetch.
     */
    where?: PurchaseOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrderItems to fetch.
     */
    orderBy?: PurchaseOrderItemOrderByWithRelationInput | PurchaseOrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseOrderItems.
     */
    cursor?: PurchaseOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrderItems.
     */
    skip?: number
    distinct?: PurchaseOrderItemScalarFieldEnum | PurchaseOrderItemScalarFieldEnum[]
  }

  /**
   * PurchaseOrderItem create
   */
  export type PurchaseOrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a PurchaseOrderItem.
     */
    data: XOR<PurchaseOrderItemCreateInput, PurchaseOrderItemUncheckedCreateInput>
  }

  /**
   * PurchaseOrderItem createMany
   */
  export type PurchaseOrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseOrderItems.
     */
    data: PurchaseOrderItemCreateManyInput | PurchaseOrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PurchaseOrderItem createManyAndReturn
   */
  export type PurchaseOrderItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PurchaseOrderItems.
     */
    data: PurchaseOrderItemCreateManyInput | PurchaseOrderItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PurchaseOrderItem update
   */
  export type PurchaseOrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a PurchaseOrderItem.
     */
    data: XOR<PurchaseOrderItemUpdateInput, PurchaseOrderItemUncheckedUpdateInput>
    /**
     * Choose, which PurchaseOrderItem to update.
     */
    where: PurchaseOrderItemWhereUniqueInput
  }

  /**
   * PurchaseOrderItem updateMany
   */
  export type PurchaseOrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseOrderItems.
     */
    data: XOR<PurchaseOrderItemUpdateManyMutationInput, PurchaseOrderItemUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseOrderItems to update
     */
    where?: PurchaseOrderItemWhereInput
  }

  /**
   * PurchaseOrderItem upsert
   */
  export type PurchaseOrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the PurchaseOrderItem to update in case it exists.
     */
    where: PurchaseOrderItemWhereUniqueInput
    /**
     * In case the PurchaseOrderItem found by the `where` argument doesn't exist, create a new PurchaseOrderItem with this data.
     */
    create: XOR<PurchaseOrderItemCreateInput, PurchaseOrderItemUncheckedCreateInput>
    /**
     * In case the PurchaseOrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseOrderItemUpdateInput, PurchaseOrderItemUncheckedUpdateInput>
  }

  /**
   * PurchaseOrderItem delete
   */
  export type PurchaseOrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
    /**
     * Filter which PurchaseOrderItem to delete.
     */
    where: PurchaseOrderItemWhereUniqueInput
  }

  /**
   * PurchaseOrderItem deleteMany
   */
  export type PurchaseOrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrderItems to delete
     */
    where?: PurchaseOrderItemWhereInput
  }

  /**
   * PurchaseOrderItem.item
   */
  export type PurchaseOrderItem$itemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Item
     */
    select?: ItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItemInclude<ExtArgs> | null
    where?: ItemWhereInput
  }

  /**
   * PurchaseOrderItem.medicine
   */
  export type PurchaseOrderItem$medicineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medicine
     */
    select?: MedicineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicineInclude<ExtArgs> | null
    where?: MedicineWhereInput
  }

  /**
   * PurchaseOrderItem without action
   */
  export type PurchaseOrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderItem
     */
    select?: PurchaseOrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PurchaseOrderItemInclude<ExtArgs> | null
  }


  /**
   * Model Billings
   */

  export type AggregateBillings = {
    _count: BillingsCountAggregateOutputType | null
    _avg: BillingsAvgAggregateOutputType | null
    _sum: BillingsSumAggregateOutputType | null
    _min: BillingsMinAggregateOutputType | null
    _max: BillingsMaxAggregateOutputType | null
  }

  export type BillingsAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    consultationId: number | null
    total: number | null
    tax: number | null
    discount: number | null
    previousBalance: number | null
    subtotal: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type BillingsSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    consultationId: number | null
    total: number | null
    tax: number | null
    discount: number | null
    previousBalance: number | null
    subtotal: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type BillingsMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    consultationId: number | null
    total: number | null
    tax: number | null
    discount: number | null
    previousBalance: number | null
    paymentMade: string | null
    subtotal: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type BillingsMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    consultationId: number | null
    total: number | null
    tax: number | null
    discount: number | null
    previousBalance: number | null
    paymentMade: string | null
    subtotal: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type BillingsCountAggregateOutputType = {
    id: number
    patientId: number
    doctorId: number
    consultationId: number
    total: number
    tax: number
    discount: number
    previousBalance: number
    paymentMade: number
    subtotal: number
    status: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type BillingsAvgAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    consultationId?: true
    total?: true
    tax?: true
    discount?: true
    previousBalance?: true
    subtotal?: true
    createdById?: true
    updatedById?: true
  }

  export type BillingsSumAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    consultationId?: true
    total?: true
    tax?: true
    discount?: true
    previousBalance?: true
    subtotal?: true
    createdById?: true
    updatedById?: true
  }

  export type BillingsMinAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    consultationId?: true
    total?: true
    tax?: true
    discount?: true
    previousBalance?: true
    paymentMade?: true
    subtotal?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type BillingsMaxAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    consultationId?: true
    total?: true
    tax?: true
    discount?: true
    previousBalance?: true
    paymentMade?: true
    subtotal?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type BillingsCountAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    consultationId?: true
    total?: true
    tax?: true
    discount?: true
    previousBalance?: true
    paymentMade?: true
    subtotal?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type BillingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Billings to aggregate.
     */
    where?: BillingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingsOrderByWithRelationInput | BillingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Billings
    **/
    _count?: true | BillingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingsMaxAggregateInputType
  }

  export type GetBillingsAggregateType<T extends BillingsAggregateArgs> = {
        [P in keyof T & keyof AggregateBillings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillings[P]>
      : GetScalarType<T[P], AggregateBillings[P]>
  }




  export type BillingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingsWhereInput
    orderBy?: BillingsOrderByWithAggregationInput | BillingsOrderByWithAggregationInput[]
    by: BillingsScalarFieldEnum[] | BillingsScalarFieldEnum
    having?: BillingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingsCountAggregateInputType | true
    _avg?: BillingsAvgAggregateInputType
    _sum?: BillingsSumAggregateInputType
    _min?: BillingsMinAggregateInputType
    _max?: BillingsMaxAggregateInputType
  }

  export type BillingsGroupByOutputType = {
    id: number
    patientId: number | null
    doctorId: number | null
    consultationId: number
    total: number | null
    tax: number | null
    discount: number | null
    previousBalance: number | null
    paymentMade: string | null
    subtotal: number | null
    status: string
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: BillingsCountAggregateOutputType | null
    _avg: BillingsAvgAggregateOutputType | null
    _sum: BillingsSumAggregateOutputType | null
    _min: BillingsMinAggregateOutputType | null
    _max: BillingsMaxAggregateOutputType | null
  }

  type GetBillingsGroupByPayload<T extends BillingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingsGroupByOutputType[P]>
            : GetScalarType<T[P], BillingsGroupByOutputType[P]>
        }
      >
    >


  export type BillingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    consultationId?: boolean
    total?: boolean
    tax?: boolean
    discount?: boolean
    previousBalance?: boolean
    paymentMade?: boolean
    subtotal?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    doctor?: boolean | Billings$doctorArgs<ExtArgs>
    patient?: boolean | Billings$patientArgs<ExtArgs>
    patientTreatments?: boolean | Billings$patientTreatmentsArgs<ExtArgs>
    patientMedications?: boolean | Billings$patientMedicationsArgs<ExtArgs>
    patientPackages?: boolean | Billings$patientPackagesArgs<ExtArgs>
    patientItems?: boolean | Billings$patientItemsArgs<ExtArgs>
    consultation?: boolean | ConsultationsDefaultArgs<ExtArgs>
    payments?: boolean | Billings$paymentsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | BillingsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billings"]>

  export type BillingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    consultationId?: boolean
    total?: boolean
    tax?: boolean
    discount?: boolean
    previousBalance?: boolean
    paymentMade?: boolean
    subtotal?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    doctor?: boolean | Billings$doctorArgs<ExtArgs>
    patient?: boolean | Billings$patientArgs<ExtArgs>
    consultation?: boolean | ConsultationsDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billings"]>

  export type BillingsSelectScalar = {
    id?: boolean
    patientId?: boolean
    doctorId?: boolean
    consultationId?: boolean
    total?: boolean
    tax?: boolean
    discount?: boolean
    previousBalance?: boolean
    paymentMade?: boolean
    subtotal?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type BillingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | Billings$doctorArgs<ExtArgs>
    patient?: boolean | Billings$patientArgs<ExtArgs>
    patientTreatments?: boolean | Billings$patientTreatmentsArgs<ExtArgs>
    patientMedications?: boolean | Billings$patientMedicationsArgs<ExtArgs>
    patientPackages?: boolean | Billings$patientPackagesArgs<ExtArgs>
    patientItems?: boolean | Billings$patientItemsArgs<ExtArgs>
    consultation?: boolean | ConsultationsDefaultArgs<ExtArgs>
    payments?: boolean | Billings$paymentsArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    _count?: boolean | BillingsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BillingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | Billings$doctorArgs<ExtArgs>
    patient?: boolean | Billings$patientArgs<ExtArgs>
    consultation?: boolean | ConsultationsDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $BillingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Billings"
    objects: {
      doctor: Prisma.$EmployeePayload<ExtArgs> | null
      patient: Prisma.$PatientsPayload<ExtArgs> | null
      patientTreatments: Prisma.$PatientTreatmentPayload<ExtArgs>[]
      patientMedications: Prisma.$PatientMedicationPayload<ExtArgs>[]
      patientPackages: Prisma.$PatientPackagePayload<ExtArgs>[]
      patientItems: Prisma.$PatientItemPayload<ExtArgs>[]
      consultation: Prisma.$ConsultationsPayload<ExtArgs>
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientId: number | null
      doctorId: number | null
      consultationId: number
      total: number | null
      tax: number | null
      discount: number | null
      previousBalance: number | null
      paymentMade: string | null
      subtotal: number | null
      status: string
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["billings"]>
    composites: {}
  }

  type BillingsGetPayload<S extends boolean | null | undefined | BillingsDefaultArgs> = $Result.GetResult<Prisma.$BillingsPayload, S>

  type BillingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BillingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BillingsCountAggregateInputType | true
    }

  export interface BillingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Billings'], meta: { name: 'Billings' } }
    /**
     * Find zero or one Billings that matches the filter.
     * @param {BillingsFindUniqueArgs} args - Arguments to find a Billings
     * @example
     * // Get one Billings
     * const billings = await prisma.billings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingsFindUniqueArgs>(args: SelectSubset<T, BillingsFindUniqueArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Billings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BillingsFindUniqueOrThrowArgs} args - Arguments to find a Billings
     * @example
     * // Get one Billings
     * const billings = await prisma.billings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingsFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Billings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingsFindFirstArgs} args - Arguments to find a Billings
     * @example
     * // Get one Billings
     * const billings = await prisma.billings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingsFindFirstArgs>(args?: SelectSubset<T, BillingsFindFirstArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Billings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingsFindFirstOrThrowArgs} args - Arguments to find a Billings
     * @example
     * // Get one Billings
     * const billings = await prisma.billings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingsFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Billings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Billings
     * const billings = await prisma.billings.findMany()
     * 
     * // Get first 10 Billings
     * const billings = await prisma.billings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingsWithIdOnly = await prisma.billings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingsFindManyArgs>(args?: SelectSubset<T, BillingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Billings.
     * @param {BillingsCreateArgs} args - Arguments to create a Billings.
     * @example
     * // Create one Billings
     * const Billings = await prisma.billings.create({
     *   data: {
     *     // ... data to create a Billings
     *   }
     * })
     * 
     */
    create<T extends BillingsCreateArgs>(args: SelectSubset<T, BillingsCreateArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Billings.
     * @param {BillingsCreateManyArgs} args - Arguments to create many Billings.
     * @example
     * // Create many Billings
     * const billings = await prisma.billings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingsCreateManyArgs>(args?: SelectSubset<T, BillingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Billings and returns the data saved in the database.
     * @param {BillingsCreateManyAndReturnArgs} args - Arguments to create many Billings.
     * @example
     * // Create many Billings
     * const billings = await prisma.billings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Billings and only return the `id`
     * const billingsWithIdOnly = await prisma.billings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BillingsCreateManyAndReturnArgs>(args?: SelectSubset<T, BillingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Billings.
     * @param {BillingsDeleteArgs} args - Arguments to delete one Billings.
     * @example
     * // Delete one Billings
     * const Billings = await prisma.billings.delete({
     *   where: {
     *     // ... filter to delete one Billings
     *   }
     * })
     * 
     */
    delete<T extends BillingsDeleteArgs>(args: SelectSubset<T, BillingsDeleteArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Billings.
     * @param {BillingsUpdateArgs} args - Arguments to update one Billings.
     * @example
     * // Update one Billings
     * const billings = await prisma.billings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingsUpdateArgs>(args: SelectSubset<T, BillingsUpdateArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Billings.
     * @param {BillingsDeleteManyArgs} args - Arguments to filter Billings to delete.
     * @example
     * // Delete a few Billings
     * const { count } = await prisma.billings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingsDeleteManyArgs>(args?: SelectSubset<T, BillingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Billings
     * const billings = await prisma.billings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingsUpdateManyArgs>(args: SelectSubset<T, BillingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Billings.
     * @param {BillingsUpsertArgs} args - Arguments to update or create a Billings.
     * @example
     * // Update or create a Billings
     * const billings = await prisma.billings.upsert({
     *   create: {
     *     // ... data to create a Billings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Billings we want to update
     *   }
     * })
     */
    upsert<T extends BillingsUpsertArgs>(args: SelectSubset<T, BillingsUpsertArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingsCountArgs} args - Arguments to filter Billings to count.
     * @example
     * // Count the number of Billings
     * const count = await prisma.billings.count({
     *   where: {
     *     // ... the filter for the Billings we want to count
     *   }
     * })
    **/
    count<T extends BillingsCountArgs>(
      args?: Subset<T, BillingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingsAggregateArgs>(args: Subset<T, BillingsAggregateArgs>): Prisma.PrismaPromise<GetBillingsAggregateType<T>>

    /**
     * Group by Billings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingsGroupByArgs['orderBy'] }
        : { orderBy?: BillingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Billings model
   */
  readonly fields: BillingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Billings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends Billings$doctorArgs<ExtArgs> = {}>(args?: Subset<T, Billings$doctorArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patient<T extends Billings$patientArgs<ExtArgs> = {}>(args?: Subset<T, Billings$patientArgs<ExtArgs>>): Prisma__PatientsClient<$Result.GetResult<Prisma.$PatientsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patientTreatments<T extends Billings$patientTreatmentsArgs<ExtArgs> = {}>(args?: Subset<T, Billings$patientTreatmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientTreatmentPayload<ExtArgs>, T, "findMany"> | Null>
    patientMedications<T extends Billings$patientMedicationsArgs<ExtArgs> = {}>(args?: Subset<T, Billings$patientMedicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMedicationPayload<ExtArgs>, T, "findMany"> | Null>
    patientPackages<T extends Billings$patientPackagesArgs<ExtArgs> = {}>(args?: Subset<T, Billings$patientPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPackagePayload<ExtArgs>, T, "findMany"> | Null>
    patientItems<T extends Billings$patientItemsArgs<ExtArgs> = {}>(args?: Subset<T, Billings$patientItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientItemPayload<ExtArgs>, T, "findMany"> | Null>
    consultation<T extends ConsultationsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultationsDefaultArgs<ExtArgs>>): Prisma__ConsultationsClient<$Result.GetResult<Prisma.$ConsultationsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    payments<T extends Billings$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Billings$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Billings model
   */ 
  interface BillingsFieldRefs {
    readonly id: FieldRef<"Billings", 'Int'>
    readonly patientId: FieldRef<"Billings", 'Int'>
    readonly doctorId: FieldRef<"Billings", 'Int'>
    readonly consultationId: FieldRef<"Billings", 'Int'>
    readonly total: FieldRef<"Billings", 'Float'>
    readonly tax: FieldRef<"Billings", 'Float'>
    readonly discount: FieldRef<"Billings", 'Float'>
    readonly previousBalance: FieldRef<"Billings", 'Float'>
    readonly paymentMade: FieldRef<"Billings", 'String'>
    readonly subtotal: FieldRef<"Billings", 'Float'>
    readonly status: FieldRef<"Billings", 'String'>
    readonly createdAt: FieldRef<"Billings", 'DateTime'>
    readonly updatedAt: FieldRef<"Billings", 'DateTime'>
    readonly createdById: FieldRef<"Billings", 'Int'>
    readonly updatedById: FieldRef<"Billings", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Billings findUnique
   */
  export type BillingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    /**
     * Filter, which Billings to fetch.
     */
    where: BillingsWhereUniqueInput
  }

  /**
   * Billings findUniqueOrThrow
   */
  export type BillingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    /**
     * Filter, which Billings to fetch.
     */
    where: BillingsWhereUniqueInput
  }

  /**
   * Billings findFirst
   */
  export type BillingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    /**
     * Filter, which Billings to fetch.
     */
    where?: BillingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingsOrderByWithRelationInput | BillingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Billings.
     */
    cursor?: BillingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Billings.
     */
    distinct?: BillingsScalarFieldEnum | BillingsScalarFieldEnum[]
  }

  /**
   * Billings findFirstOrThrow
   */
  export type BillingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    /**
     * Filter, which Billings to fetch.
     */
    where?: BillingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingsOrderByWithRelationInput | BillingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Billings.
     */
    cursor?: BillingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Billings.
     */
    distinct?: BillingsScalarFieldEnum | BillingsScalarFieldEnum[]
  }

  /**
   * Billings findMany
   */
  export type BillingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    /**
     * Filter, which Billings to fetch.
     */
    where?: BillingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Billings to fetch.
     */
    orderBy?: BillingsOrderByWithRelationInput | BillingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Billings.
     */
    cursor?: BillingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Billings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Billings.
     */
    skip?: number
    distinct?: BillingsScalarFieldEnum | BillingsScalarFieldEnum[]
  }

  /**
   * Billings create
   */
  export type BillingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    /**
     * The data needed to create a Billings.
     */
    data: XOR<BillingsCreateInput, BillingsUncheckedCreateInput>
  }

  /**
   * Billings createMany
   */
  export type BillingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Billings.
     */
    data: BillingsCreateManyInput | BillingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Billings createManyAndReturn
   */
  export type BillingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Billings.
     */
    data: BillingsCreateManyInput | BillingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Billings update
   */
  export type BillingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    /**
     * The data needed to update a Billings.
     */
    data: XOR<BillingsUpdateInput, BillingsUncheckedUpdateInput>
    /**
     * Choose, which Billings to update.
     */
    where: BillingsWhereUniqueInput
  }

  /**
   * Billings updateMany
   */
  export type BillingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Billings.
     */
    data: XOR<BillingsUpdateManyMutationInput, BillingsUncheckedUpdateManyInput>
    /**
     * Filter which Billings to update
     */
    where?: BillingsWhereInput
  }

  /**
   * Billings upsert
   */
  export type BillingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    /**
     * The filter to search for the Billings to update in case it exists.
     */
    where: BillingsWhereUniqueInput
    /**
     * In case the Billings found by the `where` argument doesn't exist, create a new Billings with this data.
     */
    create: XOR<BillingsCreateInput, BillingsUncheckedCreateInput>
    /**
     * In case the Billings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingsUpdateInput, BillingsUncheckedUpdateInput>
  }

  /**
   * Billings delete
   */
  export type BillingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
    /**
     * Filter which Billings to delete.
     */
    where: BillingsWhereUniqueInput
  }

  /**
   * Billings deleteMany
   */
  export type BillingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Billings to delete
     */
    where?: BillingsWhereInput
  }

  /**
   * Billings.doctor
   */
  export type Billings$doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * Billings.patient
   */
  export type Billings$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patients
     */
    select?: PatientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientsInclude<ExtArgs> | null
    where?: PatientsWhereInput
  }

  /**
   * Billings.patientTreatments
   */
  export type Billings$patientTreatmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientTreatment
     */
    select?: PatientTreatmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientTreatmentInclude<ExtArgs> | null
    where?: PatientTreatmentWhereInput
    orderBy?: PatientTreatmentOrderByWithRelationInput | PatientTreatmentOrderByWithRelationInput[]
    cursor?: PatientTreatmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientTreatmentScalarFieldEnum | PatientTreatmentScalarFieldEnum[]
  }

  /**
   * Billings.patientMedications
   */
  export type Billings$patientMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMedication
     */
    select?: PatientMedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMedicationInclude<ExtArgs> | null
    where?: PatientMedicationWhereInput
    orderBy?: PatientMedicationOrderByWithRelationInput | PatientMedicationOrderByWithRelationInput[]
    cursor?: PatientMedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientMedicationScalarFieldEnum | PatientMedicationScalarFieldEnum[]
  }

  /**
   * Billings.patientPackages
   */
  export type Billings$patientPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientPackage
     */
    select?: PatientPackageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientPackageInclude<ExtArgs> | null
    where?: PatientPackageWhereInput
    orderBy?: PatientPackageOrderByWithRelationInput | PatientPackageOrderByWithRelationInput[]
    cursor?: PatientPackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientPackageScalarFieldEnum | PatientPackageScalarFieldEnum[]
  }

  /**
   * Billings.patientItems
   */
  export type Billings$patientItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientItem
     */
    select?: PatientItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientItemInclude<ExtArgs> | null
    where?: PatientItemWhereInput
    orderBy?: PatientItemOrderByWithRelationInput | PatientItemOrderByWithRelationInput[]
    cursor?: PatientItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientItemScalarFieldEnum | PatientItemScalarFieldEnum[]
  }

  /**
   * Billings.payments
   */
  export type Billings$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Billings without action
   */
  export type BillingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Billings
     */
    select?: BillingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingsInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    amount: number | null
    billingId: number | null
    createdById: number | null
    updatedById: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    paymentType: string | null
    amount: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    paymentType: string | null
    amount: number | null
    billingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
    updatedById: number | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    paymentType: number
    amount: number
    billingId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    amount?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    amount?: true
    billingId?: true
    createdById?: true
    updatedById?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    paymentType?: true
    amount?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    paymentType?: true
    amount?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    paymentType?: true
    amount?: true
    billingId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    paymentType: string
    amount: number
    billingId: number
    createdAt: Date
    updatedAt: Date
    createdById: number
    updatedById: number
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentType?: boolean
    amount?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    billing?: boolean | BillingsDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentType?: boolean
    amount?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    billing?: boolean | BillingsDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    paymentType?: boolean
    amount?: boolean
    billingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billing?: boolean | BillingsDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billing?: boolean | BillingsDefaultArgs<ExtArgs>
    createdBy?: boolean | EmployeeDefaultArgs<ExtArgs>
    updatedBy?: boolean | EmployeeDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      billing: Prisma.$BillingsPayload<ExtArgs>
      createdBy: Prisma.$EmployeePayload<ExtArgs>
      updatedBy: Prisma.$EmployeePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      paymentType: string
      amount: number
      billingId: number
      createdAt: Date
      updatedAt: Date
      createdById: number
      updatedById: number
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    billing<T extends BillingsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BillingsDefaultArgs<ExtArgs>>): Prisma__BillingsClient<$Result.GetResult<Prisma.$BillingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends EmployeeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployeeDefaultArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'Int'>
    readonly paymentType: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Float'>
    readonly billingId: FieldRef<"Payment", 'Int'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
    readonly createdById: FieldRef<"Payment", 'Int'>
    readonly updatedById: FieldRef<"Payment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    firstName: 'firstName',
    lastName: 'lastName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    department: 'department',
    position: 'position',
    hireDate: 'hireDate',
    salary: 'salary',
    phoneNumber: 'phoneNumber',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    deleted: 'deleted',
    deletedAt: 'deletedAt'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    entityId: 'entityId',
    entityType: 'entityType',
    userId: 'userId',
    action: 'action',
    details: 'details',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    startTime: 'startTime',
    endTime: 'endTime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const PatientsScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    nationality: 'nationality',
    maritalStatus: 'maritalStatus',
    dob: 'dob',
    gender: 'gender',
    source: 'source',
    email: 'email',
    countryCode: 'countryCode',
    phoneNumber: 'phoneNumber',
    address: 'address',
    district: 'district',
    emirate: 'emirate',
    country: 'country',
    visaType: 'visaType',
    nationalID: 'nationalID',
    otherID: 'otherID',
    emergencyContactNumber: 'emergencyContactNumber',
    emergencyContactName: 'emergencyContactName',
    emergencyContactRelationship: 'emergencyContactRelationship',
    allergies: 'allergies',
    profilePicture: 'profilePicture',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    doctorId: 'doctorId',
    mrNumber: 'mrNumber',
    appointmentId: 'appointmentId',
    createdById: 'createdById',
    updatedById: 'updatedById',
    deleted: 'deleted',
    deletedAt: 'deletedAt'
  };

  export type PatientsScalarFieldEnum = (typeof PatientsScalarFieldEnum)[keyof typeof PatientsScalarFieldEnum]


  export const ConsultationsScalarFieldEnum: {
    id: 'id',
    status: 'status',
    appointmentId: 'appointmentId',
    doctorId: 'doctorId',
    patientId: 'patientId',
    triageId: 'triageId',
    patientAssessmentId: 'patientAssessmentId',
    patientTriageId: 'patientTriageId',
    createdById: 'createdById',
    updatedById: 'updatedById',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ConsultationsScalarFieldEnum = (typeof ConsultationsScalarFieldEnum)[keyof typeof ConsultationsScalarFieldEnum]


  export const AppointmentsScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    date: 'date',
    notes: 'notes',
    email: 'email',
    endTime: 'endTime',
    firstName: 'firstName',
    lastName: 'lastName',
    countryCode: 'countryCode',
    phoneNumber: 'phoneNumber',
    startTime: 'startTime',
    created_at: 'created_at',
    updated_at: 'updated_at',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type AppointmentsScalarFieldEnum = (typeof AppointmentsScalarFieldEnum)[keyof typeof AppointmentsScalarFieldEnum]


  export const DoctorsScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    created_at: 'created_at',
    updated_at: 'updated_at',
    password: 'password'
  };

  export type DoctorsScalarFieldEnum = (typeof DoctorsScalarFieldEnum)[keyof typeof DoctorsScalarFieldEnum]


  export const AvailabilityScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    date: 'date',
    startTime: 'startTime',
    endTime: 'endTime',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AvailabilityScalarFieldEnum = (typeof AvailabilityScalarFieldEnum)[keyof typeof AvailabilityScalarFieldEnum]


  export const AllergyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type AllergyScalarFieldEnum = (typeof AllergyScalarFieldEnum)[keyof typeof AllergyScalarFieldEnum]


  export const TriageAllergyScalarFieldEnum: {
    id: 'id',
    patientTriageId: 'patientTriageId',
    allergyId: 'allergyId'
  };

  export type TriageAllergyScalarFieldEnum = (typeof TriageAllergyScalarFieldEnum)[keyof typeof TriageAllergyScalarFieldEnum]


  export const ProblemScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ProblemScalarFieldEnum = (typeof ProblemScalarFieldEnum)[keyof typeof ProblemScalarFieldEnum]


  export const TriageProblemScalarFieldEnum: {
    id: 'id',
    patientTriageId: 'patientTriageId',
    problemId: 'problemId'
  };

  export type TriageProblemScalarFieldEnum = (typeof TriageProblemScalarFieldEnum)[keyof typeof TriageProblemScalarFieldEnum]


  export const PatientTriageScalarFieldEnum: {
    id: 'id',
    status: 'status',
    priority: 'priority',
    immunizationUpToDate: 'immunizationUpToDate',
    immunizationRemarks: 'immunizationRemarks',
    allergenHistory: 'allergenHistory',
    systolic: 'systolic',
    diastolic: 'diastolic',
    temperature: 'temperature',
    height: 'height',
    weight: 'weight',
    spO2: 'spO2',
    bmi: 'bmi',
    pulse: 'pulse',
    pastMedicalHistory: 'pastMedicalHistory',
    familyHistory: 'familyHistory',
    socialHistory: 'socialHistory',
    surgicalHistory: 'surgicalHistory',
    creams: 'creams',
    nurseAssessment: 'nurseAssessment',
    medications: 'medications',
    otherNotes: 'otherNotes',
    created_at: 'created_at',
    updated_at: 'updated_at',
    painScale: 'painScale',
    currentHistory: 'currentHistory',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PatientTriageScalarFieldEnum = (typeof PatientTriageScalarFieldEnum)[keyof typeof PatientTriageScalarFieldEnum]


  export const PatientAssessmentScalarFieldEnum: {
    id: 'id',
    visitType: 'visitType',
    consultationType: 'consultationType',
    status: 'status',
    createdAt: 'createdAt',
    complaints: 'complaints',
    facial_dermapen_prp: 'facial_dermapen_prp',
    instructions: 'instructions',
    laser_q_note: 'laser_q_note',
    prescription: 'prescription',
    provider_notes: 'provider_notes',
    recommendations: 'recommendations',
    slimming_note: 'slimming_note',
    images: 'images',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PatientAssessmentScalarFieldEnum = (typeof PatientAssessmentScalarFieldEnum)[keyof typeof PatientAssessmentScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    noteType: 'noteType',
    patientTriageId: 'patientTriageId',
    patientAssessmentId: 'patientAssessmentId'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const PatientTreatmentScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    notes: 'notes',
    treatmentId: 'treatmentId',
    patientAssessmentId: 'patientAssessmentId',
    billingId: 'billingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PatientTreatmentScalarFieldEnum = (typeof PatientTreatmentScalarFieldEnum)[keyof typeof PatientTreatmentScalarFieldEnum]


  export const PatientMedicationScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    notes: 'notes',
    medicineId: 'medicineId',
    patientAssessmentId: 'patientAssessmentId',
    billingId: 'billingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PatientMedicationScalarFieldEnum = (typeof PatientMedicationScalarFieldEnum)[keyof typeof PatientMedicationScalarFieldEnum]


  export const PatientPackageScalarFieldEnum: {
    id: 'id',
    packageId: 'packageId',
    quantity: 'quantity',
    notes: 'notes',
    patientAssessmentId: 'patientAssessmentId',
    billingId: 'billingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PatientPackageScalarFieldEnum = (typeof PatientPackageScalarFieldEnum)[keyof typeof PatientPackageScalarFieldEnum]


  export const PatientItemScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    quantity: 'quantity',
    notes: 'notes',
    patientAssessmentId: 'patientAssessmentId',
    billingId: 'billingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PatientItemScalarFieldEnum = (typeof PatientItemScalarFieldEnum)[keyof typeof PatientItemScalarFieldEnum]


  export const MedicineScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    cost: 'cost',
    price: 'price',
    quantity: 'quantity',
    reorderPoint: 'reorderPoint',
    unit: 'unit',
    expirationDate: 'expirationDate',
    categoryId: 'categoryId',
    supplierId: 'supplierId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type MedicineScalarFieldEnum = (typeof MedicineScalarFieldEnum)[keyof typeof MedicineScalarFieldEnum]


  export const ItemScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    cost: 'cost',
    price: 'price',
    quantity: 'quantity',
    reorderPoint: 'reorderPoint',
    unit: 'unit',
    categoryId: 'categoryId',
    supplierId: 'supplierId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type ItemScalarFieldEnum = (typeof ItemScalarFieldEnum)[keyof typeof ItemScalarFieldEnum]


  export const TreatmentScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    cost: 'cost',
    price: 'price',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type TreatmentScalarFieldEnum = (typeof TreatmentScalarFieldEnum)[keyof typeof TreatmentScalarFieldEnum]


  export const PackageScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    cost: 'cost',
    price: 'price',
    duration: 'duration',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PackageScalarFieldEnum = (typeof PackageScalarFieldEnum)[keyof typeof PackageScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SupplierScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contactName: 'contactName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type SupplierScalarFieldEnum = (typeof SupplierScalarFieldEnum)[keyof typeof SupplierScalarFieldEnum]


  export const InventoryTransactionScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    medicineId: 'medicineId',
    type: 'type',
    quantity: 'quantity',
    date: 'date',
    employeeId: 'employeeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type InventoryTransactionScalarFieldEnum = (typeof InventoryTransactionScalarFieldEnum)[keyof typeof InventoryTransactionScalarFieldEnum]


  export const InventoryCountScalarFieldEnum: {
    id: 'id',
    date: 'date',
    status: 'status',
    employeeId: 'employeeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type InventoryCountScalarFieldEnum = (typeof InventoryCountScalarFieldEnum)[keyof typeof InventoryCountScalarFieldEnum]


  export const InventoryCountItemScalarFieldEnum: {
    id: 'id',
    inventoryCountId: 'inventoryCountId',
    itemId: 'itemId',
    medicineId: 'medicineId',
    expectedQuantity: 'expectedQuantity',
    actualQuantity: 'actualQuantity',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type InventoryCountItemScalarFieldEnum = (typeof InventoryCountItemScalarFieldEnum)[keyof typeof InventoryCountItemScalarFieldEnum]


  export const PurchaseOrderScalarFieldEnum: {
    id: 'id',
    orderNumber: 'orderNumber',
    supplierId: 'supplierId',
    orderDate: 'orderDate',
    status: 'status',
    totalAmount: 'totalAmount',
    notes: 'notes',
    createdById: 'createdById',
    updatedById: 'updatedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    employeeId: 'employeeId'
  };

  export type PurchaseOrderScalarFieldEnum = (typeof PurchaseOrderScalarFieldEnum)[keyof typeof PurchaseOrderScalarFieldEnum]


  export const PurchaseOrderItemScalarFieldEnum: {
    id: 'id',
    purchaseOrderId: 'purchaseOrderId',
    itemId: 'itemId',
    medicineId: 'medicineId',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    totalPrice: 'totalPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PurchaseOrderItemScalarFieldEnum = (typeof PurchaseOrderItemScalarFieldEnum)[keyof typeof PurchaseOrderItemScalarFieldEnum]


  export const BillingsScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    doctorId: 'doctorId',
    consultationId: 'consultationId',
    total: 'total',
    tax: 'tax',
    discount: 'discount',
    previousBalance: 'previousBalance',
    paymentMade: 'paymentMade',
    subtotal: 'subtotal',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type BillingsScalarFieldEnum = (typeof BillingsScalarFieldEnum)[keyof typeof BillingsScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    paymentType: 'paymentType',
    amount: 'amount',
    billingId: 'billingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Position'
   */
  export type EnumPositionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Position'>
    


  /**
   * Reference to a field of type 'Position[]'
   */
  export type ListEnumPositionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Position[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deleted?: BoolFilter<"User"> | boolean
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    employee?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    createdEmployees?: EmployeeListRelationFilter
    updatedEmployees?: EmployeeListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    employee?: EmployeeOrderByWithRelationInput
    createdEmployees?: EmployeeOrderByRelationAggregateInput
    updatedEmployees?: EmployeeOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deleted?: BoolFilter<"User"> | boolean
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    employee?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    createdEmployees?: EmployeeListRelationFilter
    updatedEmployees?: EmployeeListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deleted?: BoolWithAggregatesFilter<"User"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: IntFilter<"Employee"> | number
    userId?: IntFilter<"Employee"> | number
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    department?: StringNullableListFilter<"Employee">
    position?: EnumPositionFilter<"Employee"> | $Enums.Position
    hireDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    salary?: FloatNullableFilter<"Employee"> | number | null
    phoneNumber?: StringNullableFilter<"Employee"> | string | null
    address?: StringNullableFilter<"Employee"> | string | null
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    createdById?: IntFilter<"Employee"> | number
    updatedById?: IntFilter<"Employee"> | number
    deleted?: BoolFilter<"Employee"> | boolean
    deletedAt?: DateTimeNullableFilter<"Employee"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    schedules?: ScheduleListRelationFilter
    Appointments?: AppointmentsListRelationFilter
    consultations?: ConsultationsListRelationFilter
    billings?: BillingsListRelationFilter
    notes?: NoteListRelationFilter
    InventoryTransaction?: InventoryTransactionListRelationFilter
    InventoryCount?: InventoryCountListRelationFilter
    createdPOs?: PurchaseOrderListRelationFilter
    updatedPOs?: PurchaseOrderListRelationFilter
    PurchaseOrder?: PurchaseOrderListRelationFilter
    createdConsultations?: ConsultationsListRelationFilter
    updatedConsultations?: ConsultationsListRelationFilter
    createdAppointments?: AppointmentsListRelationFilter
    updatedAppointments?: AppointmentsListRelationFilter
    createdPatients?: PatientsListRelationFilter
    updatedPatients?: PatientsListRelationFilter
    createdPatientTriages?: PatientTriageListRelationFilter
    updatedPatientTriages?: PatientTriageListRelationFilter
    createdPatientAssessments?: PatientAssessmentListRelationFilter
    updatedPatientAssessments?: PatientAssessmentListRelationFilter
    createdPatientTreatments?: PatientTreatmentListRelationFilter
    updatedPatientTreatments?: PatientTreatmentListRelationFilter
    updatedPatientMedications?: PatientMedicationListRelationFilter
    createdPatientMedications?: PatientMedicationListRelationFilter
    updatedPatientPackages?: PatientPackageListRelationFilter
    createdPatientPackages?: PatientPackageListRelationFilter
    createdPatientItems?: PatientItemListRelationFilter
    updatedPatientItems?: PatientItemListRelationFilter
    createdMedicines?: MedicineListRelationFilter
    updatedMedicines?: MedicineListRelationFilter
    createdItems?: ItemListRelationFilter
    updatedItems?: ItemListRelationFilter
    createdTreatments?: TreatmentListRelationFilter
    updatedTreatments?: TreatmentListRelationFilter
    createdPackages?: PackageListRelationFilter
    updatedPackages?: PackageListRelationFilter
    createdCategories?: CategoryListRelationFilter
    updatedCategories?: CategoryListRelationFilter
    createdSuppliers?: SupplierListRelationFilter
    updatedSuppliers?: SupplierListRelationFilter
    createdInventoryTransactions?: InventoryTransactionListRelationFilter
    updatedInventoryTransactions?: InventoryTransactionListRelationFilter
    createdInventoryCounts?: InventoryCountListRelationFilter
    updatedInventoryCounts?: InventoryCountListRelationFilter
    createdInventoryCountItems?: InventoryCountItemListRelationFilter
    updatedInventoryCountItems?: InventoryCountItemListRelationFilter
    createdBillings?: BillingsListRelationFilter
    updatedBillings?: BillingsListRelationFilter
    createdPayments?: PaymentListRelationFilter
    updatedPayments?: PaymentListRelationFilter
    createdSchedules?: ScheduleListRelationFilter
    updatedSchedules?: ScheduleListRelationFilter
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    department?: SortOrder
    position?: SortOrder
    hireDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    schedules?: ScheduleOrderByRelationAggregateInput
    Appointments?: AppointmentsOrderByRelationAggregateInput
    consultations?: ConsultationsOrderByRelationAggregateInput
    billings?: BillingsOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    InventoryTransaction?: InventoryTransactionOrderByRelationAggregateInput
    InventoryCount?: InventoryCountOrderByRelationAggregateInput
    createdPOs?: PurchaseOrderOrderByRelationAggregateInput
    updatedPOs?: PurchaseOrderOrderByRelationAggregateInput
    PurchaseOrder?: PurchaseOrderOrderByRelationAggregateInput
    createdConsultations?: ConsultationsOrderByRelationAggregateInput
    updatedConsultations?: ConsultationsOrderByRelationAggregateInput
    createdAppointments?: AppointmentsOrderByRelationAggregateInput
    updatedAppointments?: AppointmentsOrderByRelationAggregateInput
    createdPatients?: PatientsOrderByRelationAggregateInput
    updatedPatients?: PatientsOrderByRelationAggregateInput
    createdPatientTriages?: PatientTriageOrderByRelationAggregateInput
    updatedPatientTriages?: PatientTriageOrderByRelationAggregateInput
    createdPatientAssessments?: PatientAssessmentOrderByRelationAggregateInput
    updatedPatientAssessments?: PatientAssessmentOrderByRelationAggregateInput
    createdPatientTreatments?: PatientTreatmentOrderByRelationAggregateInput
    updatedPatientTreatments?: PatientTreatmentOrderByRelationAggregateInput
    updatedPatientMedications?: PatientMedicationOrderByRelationAggregateInput
    createdPatientMedications?: PatientMedicationOrderByRelationAggregateInput
    updatedPatientPackages?: PatientPackageOrderByRelationAggregateInput
    createdPatientPackages?: PatientPackageOrderByRelationAggregateInput
    createdPatientItems?: PatientItemOrderByRelationAggregateInput
    updatedPatientItems?: PatientItemOrderByRelationAggregateInput
    createdMedicines?: MedicineOrderByRelationAggregateInput
    updatedMedicines?: MedicineOrderByRelationAggregateInput
    createdItems?: ItemOrderByRelationAggregateInput
    updatedItems?: ItemOrderByRelationAggregateInput
    createdTreatments?: TreatmentOrderByRelationAggregateInput
    updatedTreatments?: TreatmentOrderByRelationAggregateInput
    createdPackages?: PackageOrderByRelationAggregateInput
    updatedPackages?: PackageOrderByRelationAggregateInput
    createdCategories?: CategoryOrderByRelationAggregateInput
    updatedCategories?: CategoryOrderByRelationAggregateInput
    createdSuppliers?: SupplierOrderByRelationAggregateInput
    updatedSuppliers?: SupplierOrderByRelationAggregateInput
    createdInventoryTransactions?: InventoryTransactionOrderByRelationAggregateInput
    updatedInventoryTransactions?: InventoryTransactionOrderByRelationAggregateInput
    createdInventoryCounts?: InventoryCountOrderByRelationAggregateInput
    updatedInventoryCounts?: InventoryCountOrderByRelationAggregateInput
    createdInventoryCountItems?: InventoryCountItemOrderByRelationAggregateInput
    updatedInventoryCountItems?: InventoryCountItemOrderByRelationAggregateInput
    createdBillings?: BillingsOrderByRelationAggregateInput
    updatedBillings?: BillingsOrderByRelationAggregateInput
    createdPayments?: PaymentOrderByRelationAggregateInput
    updatedPayments?: PaymentOrderByRelationAggregateInput
    createdSchedules?: ScheduleOrderByRelationAggregateInput
    updatedSchedules?: ScheduleOrderByRelationAggregateInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    email?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    department?: StringNullableListFilter<"Employee">
    position?: EnumPositionFilter<"Employee"> | $Enums.Position
    hireDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    salary?: FloatNullableFilter<"Employee"> | number | null
    phoneNumber?: StringNullableFilter<"Employee"> | string | null
    address?: StringNullableFilter<"Employee"> | string | null
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    createdById?: IntFilter<"Employee"> | number
    updatedById?: IntFilter<"Employee"> | number
    deleted?: BoolFilter<"Employee"> | boolean
    deletedAt?: DateTimeNullableFilter<"Employee"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    updatedBy?: XOR<UserRelationFilter, UserWhereInput>
    schedules?: ScheduleListRelationFilter
    Appointments?: AppointmentsListRelationFilter
    consultations?: ConsultationsListRelationFilter
    billings?: BillingsListRelationFilter
    notes?: NoteListRelationFilter
    InventoryTransaction?: InventoryTransactionListRelationFilter
    InventoryCount?: InventoryCountListRelationFilter
    createdPOs?: PurchaseOrderListRelationFilter
    updatedPOs?: PurchaseOrderListRelationFilter
    PurchaseOrder?: PurchaseOrderListRelationFilter
    createdConsultations?: ConsultationsListRelationFilter
    updatedConsultations?: ConsultationsListRelationFilter
    createdAppointments?: AppointmentsListRelationFilter
    updatedAppointments?: AppointmentsListRelationFilter
    createdPatients?: PatientsListRelationFilter
    updatedPatients?: PatientsListRelationFilter
    createdPatientTriages?: PatientTriageListRelationFilter
    updatedPatientTriages?: PatientTriageListRelationFilter
    createdPatientAssessments?: PatientAssessmentListRelationFilter
    updatedPatientAssessments?: PatientAssessmentListRelationFilter
    createdPatientTreatments?: PatientTreatmentListRelationFilter
    updatedPatientTreatments?: PatientTreatmentListRelationFilter
    updatedPatientMedications?: PatientMedicationListRelationFilter
    createdPatientMedications?: PatientMedicationListRelationFilter
    updatedPatientPackages?: PatientPackageListRelationFilter
    createdPatientPackages?: PatientPackageListRelationFilter
    createdPatientItems?: PatientItemListRelationFilter
    updatedPatientItems?: PatientItemListRelationFilter
    createdMedicines?: MedicineListRelationFilter
    updatedMedicines?: MedicineListRelationFilter
    createdItems?: ItemListRelationFilter
    updatedItems?: ItemListRelationFilter
    createdTreatments?: TreatmentListRelationFilter
    updatedTreatments?: TreatmentListRelationFilter
    createdPackages?: PackageListRelationFilter
    updatedPackages?: PackageListRelationFilter
    createdCategories?: CategoryListRelationFilter
    updatedCategories?: CategoryListRelationFilter
    createdSuppliers?: SupplierListRelationFilter
    updatedSuppliers?: SupplierListRelationFilter
    createdInventoryTransactions?: InventoryTransactionListRelationFilter
    updatedInventoryTransactions?: InventoryTransactionListRelationFilter
    createdInventoryCounts?: InventoryCountListRelationFilter
    updatedInventoryCounts?: InventoryCountListRelationFilter
    createdInventoryCountItems?: InventoryCountItemListRelationFilter
    updatedInventoryCountItems?: InventoryCountItemListRelationFilter
    createdBillings?: BillingsListRelationFilter
    updatedBillings?: BillingsListRelationFilter
    createdPayments?: PaymentListRelationFilter
    updatedPayments?: PaymentListRelationFilter
    createdSchedules?: ScheduleListRelationFilter
    updatedSchedules?: ScheduleListRelationFilter
  }, "id" | "userId" | "email">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    department?: SortOrder
    position?: SortOrder
    hireDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _avg?: EmployeeAvgOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
    _sum?: EmployeeSumOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employee"> | number
    userId?: IntWithAggregatesFilter<"Employee"> | number
    firstName?: StringWithAggregatesFilter<"Employee"> | string
    lastName?: StringWithAggregatesFilter<"Employee"> | string
    email?: StringWithAggregatesFilter<"Employee"> | string
    department?: StringNullableListFilter<"Employee">
    position?: EnumPositionWithAggregatesFilter<"Employee"> | $Enums.Position
    hireDate?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
    salary?: FloatNullableWithAggregatesFilter<"Employee"> | number | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    address?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    createdById?: IntWithAggregatesFilter<"Employee"> | number
    updatedById?: IntWithAggregatesFilter<"Employee"> | number
    deleted?: BoolWithAggregatesFilter<"Employee"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Employee"> | Date | string | null
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    entityId?: IntNullableFilter<"AuditLog"> | number | null
    entityType?: StringNullableFilter<"AuditLog"> | string | null
    userId?: IntFilter<"AuditLog"> | number
    action?: StringFilter<"AuditLog"> | string
    details?: JsonFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    entityId?: SortOrderInput | SortOrder
    entityType?: SortOrderInput | SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    entityId?: IntNullableFilter<"AuditLog"> | number | null
    entityType?: StringNullableFilter<"AuditLog"> | string | null
    userId?: IntFilter<"AuditLog"> | number
    action?: StringFilter<"AuditLog"> | string
    details?: JsonFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    entityId?: SortOrderInput | SortOrder
    entityType?: SortOrderInput | SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuditLog"> | number
    entityId?: IntNullableWithAggregatesFilter<"AuditLog"> | number | null
    entityType?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userId?: IntWithAggregatesFilter<"AuditLog"> | number
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: JsonWithAggregatesFilter<"AuditLog">
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: IntFilter<"Schedule"> | number
    employeeId?: IntFilter<"Schedule"> | number
    startTime?: DateTimeFilter<"Schedule"> | Date | string
    endTime?: DateTimeFilter<"Schedule"> | Date | string
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    createdById?: IntFilter<"Schedule"> | number
    updatedById?: IntFilter<"Schedule"> | number
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    employeeId?: IntFilter<"Schedule"> | number
    startTime?: DateTimeFilter<"Schedule"> | Date | string
    endTime?: DateTimeFilter<"Schedule"> | Date | string
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    createdById?: IntFilter<"Schedule"> | number
    updatedById?: IntFilter<"Schedule"> | number
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Schedule"> | number
    employeeId?: IntWithAggregatesFilter<"Schedule"> | number
    startTime?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    createdById?: IntWithAggregatesFilter<"Schedule"> | number
    updatedById?: IntWithAggregatesFilter<"Schedule"> | number
  }

  export type PatientsWhereInput = {
    AND?: PatientsWhereInput | PatientsWhereInput[]
    OR?: PatientsWhereInput[]
    NOT?: PatientsWhereInput | PatientsWhereInput[]
    id?: IntFilter<"Patients"> | number
    firstName?: StringFilter<"Patients"> | string
    middleName?: StringNullableFilter<"Patients"> | string | null
    lastName?: StringFilter<"Patients"> | string
    nationality?: StringNullableFilter<"Patients"> | string | null
    maritalStatus?: StringNullableFilter<"Patients"> | string | null
    dob?: StringNullableFilter<"Patients"> | string | null
    gender?: StringNullableFilter<"Patients"> | string | null
    source?: StringNullableFilter<"Patients"> | string | null
    email?: StringFilter<"Patients"> | string
    countryCode?: StringFilter<"Patients"> | string
    phoneNumber?: StringFilter<"Patients"> | string
    address?: StringNullableFilter<"Patients"> | string | null
    district?: StringNullableFilter<"Patients"> | string | null
    emirate?: StringNullableFilter<"Patients"> | string | null
    country?: StringNullableFilter<"Patients"> | string | null
    visaType?: StringNullableFilter<"Patients"> | string | null
    nationalID?: StringNullableFilter<"Patients"> | string | null
    otherID?: StringNullableFilter<"Patients"> | string | null
    emergencyContactNumber?: StringNullableFilter<"Patients"> | string | null
    emergencyContactName?: StringNullableFilter<"Patients"> | string | null
    emergencyContactRelationship?: StringNullableFilter<"Patients"> | string | null
    allergies?: StringNullableFilter<"Patients"> | string | null
    profilePicture?: StringNullableFilter<"Patients"> | string | null
    createdAt?: DateTimeFilter<"Patients"> | Date | string
    updatedAt?: DateTimeFilter<"Patients"> | Date | string
    doctorId?: IntNullableFilter<"Patients"> | number | null
    mrNumber?: StringFilter<"Patients"> | string
    appointmentId?: IntNullableFilter<"Patients"> | number | null
    createdById?: IntFilter<"Patients"> | number
    updatedById?: IntFilter<"Patients"> | number
    deleted?: BoolFilter<"Patients"> | boolean
    deletedAt?: DateTimeNullableFilter<"Patients"> | Date | string | null
    billings?: BillingsListRelationFilter
    consultations?: ConsultationsListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PatientsOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    nationality?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    email?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrderInput | SortOrder
    district?: SortOrderInput | SortOrder
    emirate?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    visaType?: SortOrderInput | SortOrder
    nationalID?: SortOrderInput | SortOrder
    otherID?: SortOrderInput | SortOrder
    emergencyContactNumber?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactRelationship?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    profilePicture?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    mrNumber?: SortOrder
    appointmentId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    billings?: BillingsOrderByRelationAggregateInput
    consultations?: ConsultationsOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type PatientsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    mrNumber?: string
    AND?: PatientsWhereInput | PatientsWhereInput[]
    OR?: PatientsWhereInput[]
    NOT?: PatientsWhereInput | PatientsWhereInput[]
    firstName?: StringFilter<"Patients"> | string
    middleName?: StringNullableFilter<"Patients"> | string | null
    lastName?: StringFilter<"Patients"> | string
    nationality?: StringNullableFilter<"Patients"> | string | null
    maritalStatus?: StringNullableFilter<"Patients"> | string | null
    dob?: StringNullableFilter<"Patients"> | string | null
    gender?: StringNullableFilter<"Patients"> | string | null
    source?: StringNullableFilter<"Patients"> | string | null
    countryCode?: StringFilter<"Patients"> | string
    phoneNumber?: StringFilter<"Patients"> | string
    address?: StringNullableFilter<"Patients"> | string | null
    district?: StringNullableFilter<"Patients"> | string | null
    emirate?: StringNullableFilter<"Patients"> | string | null
    country?: StringNullableFilter<"Patients"> | string | null
    visaType?: StringNullableFilter<"Patients"> | string | null
    nationalID?: StringNullableFilter<"Patients"> | string | null
    otherID?: StringNullableFilter<"Patients"> | string | null
    emergencyContactNumber?: StringNullableFilter<"Patients"> | string | null
    emergencyContactName?: StringNullableFilter<"Patients"> | string | null
    emergencyContactRelationship?: StringNullableFilter<"Patients"> | string | null
    allergies?: StringNullableFilter<"Patients"> | string | null
    profilePicture?: StringNullableFilter<"Patients"> | string | null
    createdAt?: DateTimeFilter<"Patients"> | Date | string
    updatedAt?: DateTimeFilter<"Patients"> | Date | string
    doctorId?: IntNullableFilter<"Patients"> | number | null
    appointmentId?: IntNullableFilter<"Patients"> | number | null
    createdById?: IntFilter<"Patients"> | number
    updatedById?: IntFilter<"Patients"> | number
    deleted?: BoolFilter<"Patients"> | boolean
    deletedAt?: DateTimeNullableFilter<"Patients"> | Date | string | null
    billings?: BillingsListRelationFilter
    consultations?: ConsultationsListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id" | "id" | "email" | "mrNumber">

  export type PatientsOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    nationality?: SortOrderInput | SortOrder
    maritalStatus?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    email?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrderInput | SortOrder
    district?: SortOrderInput | SortOrder
    emirate?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    visaType?: SortOrderInput | SortOrder
    nationalID?: SortOrderInput | SortOrder
    otherID?: SortOrderInput | SortOrder
    emergencyContactNumber?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactRelationship?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    profilePicture?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    mrNumber?: SortOrder
    appointmentId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: PatientsCountOrderByAggregateInput
    _avg?: PatientsAvgOrderByAggregateInput
    _max?: PatientsMaxOrderByAggregateInput
    _min?: PatientsMinOrderByAggregateInput
    _sum?: PatientsSumOrderByAggregateInput
  }

  export type PatientsScalarWhereWithAggregatesInput = {
    AND?: PatientsScalarWhereWithAggregatesInput | PatientsScalarWhereWithAggregatesInput[]
    OR?: PatientsScalarWhereWithAggregatesInput[]
    NOT?: PatientsScalarWhereWithAggregatesInput | PatientsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Patients"> | number
    firstName?: StringWithAggregatesFilter<"Patients"> | string
    middleName?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    lastName?: StringWithAggregatesFilter<"Patients"> | string
    nationality?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    maritalStatus?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    dob?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    gender?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    source?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    email?: StringWithAggregatesFilter<"Patients"> | string
    countryCode?: StringWithAggregatesFilter<"Patients"> | string
    phoneNumber?: StringWithAggregatesFilter<"Patients"> | string
    address?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    district?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    emirate?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    country?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    visaType?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    nationalID?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    otherID?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    emergencyContactNumber?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    emergencyContactName?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    emergencyContactRelationship?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    allergies?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    profilePicture?: StringNullableWithAggregatesFilter<"Patients"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Patients"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patients"> | Date | string
    doctorId?: IntNullableWithAggregatesFilter<"Patients"> | number | null
    mrNumber?: StringWithAggregatesFilter<"Patients"> | string
    appointmentId?: IntNullableWithAggregatesFilter<"Patients"> | number | null
    createdById?: IntWithAggregatesFilter<"Patients"> | number
    updatedById?: IntWithAggregatesFilter<"Patients"> | number
    deleted?: BoolWithAggregatesFilter<"Patients"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Patients"> | Date | string | null
  }

  export type ConsultationsWhereInput = {
    AND?: ConsultationsWhereInput | ConsultationsWhereInput[]
    OR?: ConsultationsWhereInput[]
    NOT?: ConsultationsWhereInput | ConsultationsWhereInput[]
    id?: IntFilter<"Consultations"> | number
    status?: StringFilter<"Consultations"> | string
    appointmentId?: IntNullableFilter<"Consultations"> | number | null
    doctorId?: IntFilter<"Consultations"> | number
    patientId?: IntNullableFilter<"Consultations"> | number | null
    triageId?: IntNullableFilter<"Consultations"> | number | null
    patientAssessmentId?: IntNullableFilter<"Consultations"> | number | null
    patientTriageId?: IntNullableFilter<"Consultations"> | number | null
    createdById?: IntFilter<"Consultations"> | number
    updatedById?: IntFilter<"Consultations"> | number
    created_at?: DateTimeFilter<"Consultations"> | Date | string
    updated_at?: DateTimeFilter<"Consultations"> | Date | string
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    doctor?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    patient?: XOR<PatientsNullableRelationFilter, PatientsWhereInput> | null
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    patientTriage?: XOR<PatientTriageNullableRelationFilter, PatientTriageWhereInput> | null
    billings?: BillingsListRelationFilter
  }

  export type ConsultationsOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    appointmentId?: SortOrderInput | SortOrder
    doctorId?: SortOrder
    patientId?: SortOrderInput | SortOrder
    triageId?: SortOrderInput | SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    patientTriageId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
    doctor?: EmployeeOrderByWithRelationInput
    patient?: PatientsOrderByWithRelationInput
    patientAssessment?: PatientAssessmentOrderByWithRelationInput
    patientTriage?: PatientTriageOrderByWithRelationInput
    billings?: BillingsOrderByRelationAggregateInput
  }

  export type ConsultationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConsultationsWhereInput | ConsultationsWhereInput[]
    OR?: ConsultationsWhereInput[]
    NOT?: ConsultationsWhereInput | ConsultationsWhereInput[]
    status?: StringFilter<"Consultations"> | string
    appointmentId?: IntNullableFilter<"Consultations"> | number | null
    doctorId?: IntFilter<"Consultations"> | number
    patientId?: IntNullableFilter<"Consultations"> | number | null
    triageId?: IntNullableFilter<"Consultations"> | number | null
    patientAssessmentId?: IntNullableFilter<"Consultations"> | number | null
    patientTriageId?: IntNullableFilter<"Consultations"> | number | null
    createdById?: IntFilter<"Consultations"> | number
    updatedById?: IntFilter<"Consultations"> | number
    created_at?: DateTimeFilter<"Consultations"> | Date | string
    updated_at?: DateTimeFilter<"Consultations"> | Date | string
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    doctor?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    patient?: XOR<PatientsNullableRelationFilter, PatientsWhereInput> | null
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    patientTriage?: XOR<PatientTriageNullableRelationFilter, PatientTriageWhereInput> | null
    billings?: BillingsListRelationFilter
  }, "id">

  export type ConsultationsOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    appointmentId?: SortOrderInput | SortOrder
    doctorId?: SortOrder
    patientId?: SortOrderInput | SortOrder
    triageId?: SortOrderInput | SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    patientTriageId?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ConsultationsCountOrderByAggregateInput
    _avg?: ConsultationsAvgOrderByAggregateInput
    _max?: ConsultationsMaxOrderByAggregateInput
    _min?: ConsultationsMinOrderByAggregateInput
    _sum?: ConsultationsSumOrderByAggregateInput
  }

  export type ConsultationsScalarWhereWithAggregatesInput = {
    AND?: ConsultationsScalarWhereWithAggregatesInput | ConsultationsScalarWhereWithAggregatesInput[]
    OR?: ConsultationsScalarWhereWithAggregatesInput[]
    NOT?: ConsultationsScalarWhereWithAggregatesInput | ConsultationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Consultations"> | number
    status?: StringWithAggregatesFilter<"Consultations"> | string
    appointmentId?: IntNullableWithAggregatesFilter<"Consultations"> | number | null
    doctorId?: IntWithAggregatesFilter<"Consultations"> | number
    patientId?: IntNullableWithAggregatesFilter<"Consultations"> | number | null
    triageId?: IntNullableWithAggregatesFilter<"Consultations"> | number | null
    patientAssessmentId?: IntNullableWithAggregatesFilter<"Consultations"> | number | null
    patientTriageId?: IntNullableWithAggregatesFilter<"Consultations"> | number | null
    createdById?: IntWithAggregatesFilter<"Consultations"> | number
    updatedById?: IntWithAggregatesFilter<"Consultations"> | number
    created_at?: DateTimeWithAggregatesFilter<"Consultations"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Consultations"> | Date | string
  }

  export type AppointmentsWhereInput = {
    AND?: AppointmentsWhereInput | AppointmentsWhereInput[]
    OR?: AppointmentsWhereInput[]
    NOT?: AppointmentsWhereInput | AppointmentsWhereInput[]
    id?: IntFilter<"Appointments"> | number
    patientId?: IntFilter<"Appointments"> | number
    doctorId?: IntFilter<"Appointments"> | number
    date?: DateTimeFilter<"Appointments"> | Date | string
    notes?: StringFilter<"Appointments"> | string
    email?: StringFilter<"Appointments"> | string
    endTime?: StringFilter<"Appointments"> | string
    firstName?: StringFilter<"Appointments"> | string
    lastName?: StringFilter<"Appointments"> | string
    countryCode?: StringFilter<"Appointments"> | string
    phoneNumber?: StringFilter<"Appointments"> | string
    startTime?: StringFilter<"Appointments"> | string
    created_at?: DateTimeFilter<"Appointments"> | Date | string
    updated_at?: DateTimeFilter<"Appointments"> | Date | string
    createdById?: IntFilter<"Appointments"> | number
    updatedById?: IntFilter<"Appointments"> | number
    doctor?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type AppointmentsOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    email?: SortOrder
    endTime?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    startTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    doctor?: EmployeeOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type AppointmentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AppointmentsWhereInput | AppointmentsWhereInput[]
    OR?: AppointmentsWhereInput[]
    NOT?: AppointmentsWhereInput | AppointmentsWhereInput[]
    patientId?: IntFilter<"Appointments"> | number
    doctorId?: IntFilter<"Appointments"> | number
    date?: DateTimeFilter<"Appointments"> | Date | string
    notes?: StringFilter<"Appointments"> | string
    email?: StringFilter<"Appointments"> | string
    endTime?: StringFilter<"Appointments"> | string
    firstName?: StringFilter<"Appointments"> | string
    lastName?: StringFilter<"Appointments"> | string
    countryCode?: StringFilter<"Appointments"> | string
    phoneNumber?: StringFilter<"Appointments"> | string
    startTime?: StringFilter<"Appointments"> | string
    created_at?: DateTimeFilter<"Appointments"> | Date | string
    updated_at?: DateTimeFilter<"Appointments"> | Date | string
    createdById?: IntFilter<"Appointments"> | number
    updatedById?: IntFilter<"Appointments"> | number
    doctor?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type AppointmentsOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    email?: SortOrder
    endTime?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    startTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: AppointmentsCountOrderByAggregateInput
    _avg?: AppointmentsAvgOrderByAggregateInput
    _max?: AppointmentsMaxOrderByAggregateInput
    _min?: AppointmentsMinOrderByAggregateInput
    _sum?: AppointmentsSumOrderByAggregateInput
  }

  export type AppointmentsScalarWhereWithAggregatesInput = {
    AND?: AppointmentsScalarWhereWithAggregatesInput | AppointmentsScalarWhereWithAggregatesInput[]
    OR?: AppointmentsScalarWhereWithAggregatesInput[]
    NOT?: AppointmentsScalarWhereWithAggregatesInput | AppointmentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Appointments"> | number
    patientId?: IntWithAggregatesFilter<"Appointments"> | number
    doctorId?: IntWithAggregatesFilter<"Appointments"> | number
    date?: DateTimeWithAggregatesFilter<"Appointments"> | Date | string
    notes?: StringWithAggregatesFilter<"Appointments"> | string
    email?: StringWithAggregatesFilter<"Appointments"> | string
    endTime?: StringWithAggregatesFilter<"Appointments"> | string
    firstName?: StringWithAggregatesFilter<"Appointments"> | string
    lastName?: StringWithAggregatesFilter<"Appointments"> | string
    countryCode?: StringWithAggregatesFilter<"Appointments"> | string
    phoneNumber?: StringWithAggregatesFilter<"Appointments"> | string
    startTime?: StringWithAggregatesFilter<"Appointments"> | string
    created_at?: DateTimeWithAggregatesFilter<"Appointments"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Appointments"> | Date | string
    createdById?: IntWithAggregatesFilter<"Appointments"> | number
    updatedById?: IntWithAggregatesFilter<"Appointments"> | number
  }

  export type DoctorsWhereInput = {
    AND?: DoctorsWhereInput | DoctorsWhereInput[]
    OR?: DoctorsWhereInput[]
    NOT?: DoctorsWhereInput | DoctorsWhereInput[]
    id?: IntFilter<"Doctors"> | number
    firstName?: StringFilter<"Doctors"> | string
    lastName?: StringFilter<"Doctors"> | string
    email?: StringFilter<"Doctors"> | string
    phoneNumber?: StringFilter<"Doctors"> | string
    created_at?: DateTimeFilter<"Doctors"> | Date | string
    updated_at?: DateTimeFilter<"Doctors"> | Date | string
    password?: StringFilter<"Doctors"> | string
    avaialability?: AvailabilityListRelationFilter
  }

  export type DoctorsOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    password?: SortOrder
    avaialability?: AvailabilityOrderByRelationAggregateInput
  }

  export type DoctorsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: DoctorsWhereInput | DoctorsWhereInput[]
    OR?: DoctorsWhereInput[]
    NOT?: DoctorsWhereInput | DoctorsWhereInput[]
    firstName?: StringFilter<"Doctors"> | string
    lastName?: StringFilter<"Doctors"> | string
    phoneNumber?: StringFilter<"Doctors"> | string
    created_at?: DateTimeFilter<"Doctors"> | Date | string
    updated_at?: DateTimeFilter<"Doctors"> | Date | string
    password?: StringFilter<"Doctors"> | string
    avaialability?: AvailabilityListRelationFilter
  }, "id" | "email">

  export type DoctorsOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    password?: SortOrder
    _count?: DoctorsCountOrderByAggregateInput
    _avg?: DoctorsAvgOrderByAggregateInput
    _max?: DoctorsMaxOrderByAggregateInput
    _min?: DoctorsMinOrderByAggregateInput
    _sum?: DoctorsSumOrderByAggregateInput
  }

  export type DoctorsScalarWhereWithAggregatesInput = {
    AND?: DoctorsScalarWhereWithAggregatesInput | DoctorsScalarWhereWithAggregatesInput[]
    OR?: DoctorsScalarWhereWithAggregatesInput[]
    NOT?: DoctorsScalarWhereWithAggregatesInput | DoctorsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Doctors"> | number
    firstName?: StringWithAggregatesFilter<"Doctors"> | string
    lastName?: StringWithAggregatesFilter<"Doctors"> | string
    email?: StringWithAggregatesFilter<"Doctors"> | string
    phoneNumber?: StringWithAggregatesFilter<"Doctors"> | string
    created_at?: DateTimeWithAggregatesFilter<"Doctors"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Doctors"> | Date | string
    password?: StringWithAggregatesFilter<"Doctors"> | string
  }

  export type AvailabilityWhereInput = {
    AND?: AvailabilityWhereInput | AvailabilityWhereInput[]
    OR?: AvailabilityWhereInput[]
    NOT?: AvailabilityWhereInput | AvailabilityWhereInput[]
    id?: IntFilter<"Availability"> | number
    doctorId?: IntFilter<"Availability"> | number
    date?: DateTimeFilter<"Availability"> | Date | string
    startTime?: StringFilter<"Availability"> | string
    endTime?: StringFilter<"Availability"> | string
    created_at?: DateTimeFilter<"Availability"> | Date | string
    updated_at?: DateTimeFilter<"Availability"> | Date | string
    doctor?: XOR<DoctorsRelationFilter, DoctorsWhereInput>
  }

  export type AvailabilityOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    doctor?: DoctorsOrderByWithRelationInput
  }

  export type AvailabilityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AvailabilityWhereInput | AvailabilityWhereInput[]
    OR?: AvailabilityWhereInput[]
    NOT?: AvailabilityWhereInput | AvailabilityWhereInput[]
    doctorId?: IntFilter<"Availability"> | number
    date?: DateTimeFilter<"Availability"> | Date | string
    startTime?: StringFilter<"Availability"> | string
    endTime?: StringFilter<"Availability"> | string
    created_at?: DateTimeFilter<"Availability"> | Date | string
    updated_at?: DateTimeFilter<"Availability"> | Date | string
    doctor?: XOR<DoctorsRelationFilter, DoctorsWhereInput>
  }, "id">

  export type AvailabilityOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: AvailabilityCountOrderByAggregateInput
    _avg?: AvailabilityAvgOrderByAggregateInput
    _max?: AvailabilityMaxOrderByAggregateInput
    _min?: AvailabilityMinOrderByAggregateInput
    _sum?: AvailabilitySumOrderByAggregateInput
  }

  export type AvailabilityScalarWhereWithAggregatesInput = {
    AND?: AvailabilityScalarWhereWithAggregatesInput | AvailabilityScalarWhereWithAggregatesInput[]
    OR?: AvailabilityScalarWhereWithAggregatesInput[]
    NOT?: AvailabilityScalarWhereWithAggregatesInput | AvailabilityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Availability"> | number
    doctorId?: IntWithAggregatesFilter<"Availability"> | number
    date?: DateTimeWithAggregatesFilter<"Availability"> | Date | string
    startTime?: StringWithAggregatesFilter<"Availability"> | string
    endTime?: StringWithAggregatesFilter<"Availability"> | string
    created_at?: DateTimeWithAggregatesFilter<"Availability"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Availability"> | Date | string
  }

  export type AllergyWhereInput = {
    AND?: AllergyWhereInput | AllergyWhereInput[]
    OR?: AllergyWhereInput[]
    NOT?: AllergyWhereInput | AllergyWhereInput[]
    id?: IntFilter<"Allergy"> | number
    name?: StringFilter<"Allergy"> | string
    created_at?: DateTimeFilter<"Allergy"> | Date | string
    updated_at?: DateTimeFilter<"Allergy"> | Date | string
    TriageAllergy?: TriageAllergyListRelationFilter
  }

  export type AllergyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    TriageAllergy?: TriageAllergyOrderByRelationAggregateInput
  }

  export type AllergyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AllergyWhereInput | AllergyWhereInput[]
    OR?: AllergyWhereInput[]
    NOT?: AllergyWhereInput | AllergyWhereInput[]
    name?: StringFilter<"Allergy"> | string
    created_at?: DateTimeFilter<"Allergy"> | Date | string
    updated_at?: DateTimeFilter<"Allergy"> | Date | string
    TriageAllergy?: TriageAllergyListRelationFilter
  }, "id">

  export type AllergyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: AllergyCountOrderByAggregateInput
    _avg?: AllergyAvgOrderByAggregateInput
    _max?: AllergyMaxOrderByAggregateInput
    _min?: AllergyMinOrderByAggregateInput
    _sum?: AllergySumOrderByAggregateInput
  }

  export type AllergyScalarWhereWithAggregatesInput = {
    AND?: AllergyScalarWhereWithAggregatesInput | AllergyScalarWhereWithAggregatesInput[]
    OR?: AllergyScalarWhereWithAggregatesInput[]
    NOT?: AllergyScalarWhereWithAggregatesInput | AllergyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Allergy"> | number
    name?: StringWithAggregatesFilter<"Allergy"> | string
    created_at?: DateTimeWithAggregatesFilter<"Allergy"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Allergy"> | Date | string
  }

  export type TriageAllergyWhereInput = {
    AND?: TriageAllergyWhereInput | TriageAllergyWhereInput[]
    OR?: TriageAllergyWhereInput[]
    NOT?: TriageAllergyWhereInput | TriageAllergyWhereInput[]
    id?: IntFilter<"TriageAllergy"> | number
    patientTriageId?: IntNullableFilter<"TriageAllergy"> | number | null
    allergyId?: IntNullableFilter<"TriageAllergy"> | number | null
    patientTriage?: XOR<PatientTriageNullableRelationFilter, PatientTriageWhereInput> | null
    allergy?: XOR<AllergyNullableRelationFilter, AllergyWhereInput> | null
  }

  export type TriageAllergyOrderByWithRelationInput = {
    id?: SortOrder
    patientTriageId?: SortOrderInput | SortOrder
    allergyId?: SortOrderInput | SortOrder
    patientTriage?: PatientTriageOrderByWithRelationInput
    allergy?: AllergyOrderByWithRelationInput
  }

  export type TriageAllergyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TriageAllergyWhereInput | TriageAllergyWhereInput[]
    OR?: TriageAllergyWhereInput[]
    NOT?: TriageAllergyWhereInput | TriageAllergyWhereInput[]
    patientTriageId?: IntNullableFilter<"TriageAllergy"> | number | null
    allergyId?: IntNullableFilter<"TriageAllergy"> | number | null
    patientTriage?: XOR<PatientTriageNullableRelationFilter, PatientTriageWhereInput> | null
    allergy?: XOR<AllergyNullableRelationFilter, AllergyWhereInput> | null
  }, "id">

  export type TriageAllergyOrderByWithAggregationInput = {
    id?: SortOrder
    patientTriageId?: SortOrderInput | SortOrder
    allergyId?: SortOrderInput | SortOrder
    _count?: TriageAllergyCountOrderByAggregateInput
    _avg?: TriageAllergyAvgOrderByAggregateInput
    _max?: TriageAllergyMaxOrderByAggregateInput
    _min?: TriageAllergyMinOrderByAggregateInput
    _sum?: TriageAllergySumOrderByAggregateInput
  }

  export type TriageAllergyScalarWhereWithAggregatesInput = {
    AND?: TriageAllergyScalarWhereWithAggregatesInput | TriageAllergyScalarWhereWithAggregatesInput[]
    OR?: TriageAllergyScalarWhereWithAggregatesInput[]
    NOT?: TriageAllergyScalarWhereWithAggregatesInput | TriageAllergyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TriageAllergy"> | number
    patientTriageId?: IntNullableWithAggregatesFilter<"TriageAllergy"> | number | null
    allergyId?: IntNullableWithAggregatesFilter<"TriageAllergy"> | number | null
  }

  export type ProblemWhereInput = {
    AND?: ProblemWhereInput | ProblemWhereInput[]
    OR?: ProblemWhereInput[]
    NOT?: ProblemWhereInput | ProblemWhereInput[]
    id?: IntFilter<"Problem"> | number
    name?: StringFilter<"Problem"> | string
    TriageProblem?: TriageProblemListRelationFilter
  }

  export type ProblemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    TriageProblem?: TriageProblemOrderByRelationAggregateInput
  }

  export type ProblemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ProblemWhereInput | ProblemWhereInput[]
    OR?: ProblemWhereInput[]
    NOT?: ProblemWhereInput | ProblemWhereInput[]
    TriageProblem?: TriageProblemListRelationFilter
  }, "id" | "name">

  export type ProblemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ProblemCountOrderByAggregateInput
    _avg?: ProblemAvgOrderByAggregateInput
    _max?: ProblemMaxOrderByAggregateInput
    _min?: ProblemMinOrderByAggregateInput
    _sum?: ProblemSumOrderByAggregateInput
  }

  export type ProblemScalarWhereWithAggregatesInput = {
    AND?: ProblemScalarWhereWithAggregatesInput | ProblemScalarWhereWithAggregatesInput[]
    OR?: ProblemScalarWhereWithAggregatesInput[]
    NOT?: ProblemScalarWhereWithAggregatesInput | ProblemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Problem"> | number
    name?: StringWithAggregatesFilter<"Problem"> | string
  }

  export type TriageProblemWhereInput = {
    AND?: TriageProblemWhereInput | TriageProblemWhereInput[]
    OR?: TriageProblemWhereInput[]
    NOT?: TriageProblemWhereInput | TriageProblemWhereInput[]
    id?: IntFilter<"TriageProblem"> | number
    patientTriageId?: IntNullableFilter<"TriageProblem"> | number | null
    problemId?: IntNullableFilter<"TriageProblem"> | number | null
    patientTriage?: XOR<PatientTriageNullableRelationFilter, PatientTriageWhereInput> | null
    problem?: XOR<ProblemNullableRelationFilter, ProblemWhereInput> | null
  }

  export type TriageProblemOrderByWithRelationInput = {
    id?: SortOrder
    patientTriageId?: SortOrderInput | SortOrder
    problemId?: SortOrderInput | SortOrder
    patientTriage?: PatientTriageOrderByWithRelationInput
    problem?: ProblemOrderByWithRelationInput
  }

  export type TriageProblemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TriageProblemWhereInput | TriageProblemWhereInput[]
    OR?: TriageProblemWhereInput[]
    NOT?: TriageProblemWhereInput | TriageProblemWhereInput[]
    patientTriageId?: IntNullableFilter<"TriageProblem"> | number | null
    problemId?: IntNullableFilter<"TriageProblem"> | number | null
    patientTriage?: XOR<PatientTriageNullableRelationFilter, PatientTriageWhereInput> | null
    problem?: XOR<ProblemNullableRelationFilter, ProblemWhereInput> | null
  }, "id">

  export type TriageProblemOrderByWithAggregationInput = {
    id?: SortOrder
    patientTriageId?: SortOrderInput | SortOrder
    problemId?: SortOrderInput | SortOrder
    _count?: TriageProblemCountOrderByAggregateInput
    _avg?: TriageProblemAvgOrderByAggregateInput
    _max?: TriageProblemMaxOrderByAggregateInput
    _min?: TriageProblemMinOrderByAggregateInput
    _sum?: TriageProblemSumOrderByAggregateInput
  }

  export type TriageProblemScalarWhereWithAggregatesInput = {
    AND?: TriageProblemScalarWhereWithAggregatesInput | TriageProblemScalarWhereWithAggregatesInput[]
    OR?: TriageProblemScalarWhereWithAggregatesInput[]
    NOT?: TriageProblemScalarWhereWithAggregatesInput | TriageProblemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TriageProblem"> | number
    patientTriageId?: IntNullableWithAggregatesFilter<"TriageProblem"> | number | null
    problemId?: IntNullableWithAggregatesFilter<"TriageProblem"> | number | null
  }

  export type PatientTriageWhereInput = {
    AND?: PatientTriageWhereInput | PatientTriageWhereInput[]
    OR?: PatientTriageWhereInput[]
    NOT?: PatientTriageWhereInput | PatientTriageWhereInput[]
    id?: IntFilter<"PatientTriage"> | number
    status?: StringNullableFilter<"PatientTriage"> | string | null
    priority?: StringNullableFilter<"PatientTriage"> | string | null
    immunizationUpToDate?: StringNullableFilter<"PatientTriage"> | string | null
    immunizationRemarks?: StringNullableFilter<"PatientTriage"> | string | null
    allergenHistory?: StringNullableFilter<"PatientTriage"> | string | null
    systolic?: StringNullableFilter<"PatientTriage"> | string | null
    diastolic?: StringNullableFilter<"PatientTriage"> | string | null
    temperature?: StringNullableFilter<"PatientTriage"> | string | null
    height?: StringNullableFilter<"PatientTriage"> | string | null
    weight?: StringNullableFilter<"PatientTriage"> | string | null
    spO2?: StringNullableFilter<"PatientTriage"> | string | null
    bmi?: StringNullableFilter<"PatientTriage"> | string | null
    pulse?: StringNullableFilter<"PatientTriage"> | string | null
    pastMedicalHistory?: StringNullableFilter<"PatientTriage"> | string | null
    familyHistory?: StringNullableFilter<"PatientTriage"> | string | null
    socialHistory?: StringNullableFilter<"PatientTriage"> | string | null
    surgicalHistory?: StringNullableFilter<"PatientTriage"> | string | null
    creams?: StringNullableFilter<"PatientTriage"> | string | null
    nurseAssessment?: StringNullableFilter<"PatientTriage"> | string | null
    medications?: StringNullableFilter<"PatientTriage"> | string | null
    otherNotes?: StringNullableFilter<"PatientTriage"> | string | null
    created_at?: DateTimeFilter<"PatientTriage"> | Date | string
    updated_at?: DateTimeFilter<"PatientTriage"> | Date | string
    painScale?: IntNullableFilter<"PatientTriage"> | number | null
    currentHistory?: StringNullableFilter<"PatientTriage"> | string | null
    createdById?: IntFilter<"PatientTriage"> | number
    updatedById?: IntFilter<"PatientTriage"> | number
    problems?: TriageProblemListRelationFilter
    allergies?: TriageAllergyListRelationFilter
    consultations?: ConsultationsListRelationFilter
    notes?: NoteListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PatientTriageOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    immunizationUpToDate?: SortOrderInput | SortOrder
    immunizationRemarks?: SortOrderInput | SortOrder
    allergenHistory?: SortOrderInput | SortOrder
    systolic?: SortOrderInput | SortOrder
    diastolic?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    spO2?: SortOrderInput | SortOrder
    bmi?: SortOrderInput | SortOrder
    pulse?: SortOrderInput | SortOrder
    pastMedicalHistory?: SortOrderInput | SortOrder
    familyHistory?: SortOrderInput | SortOrder
    socialHistory?: SortOrderInput | SortOrder
    surgicalHistory?: SortOrderInput | SortOrder
    creams?: SortOrderInput | SortOrder
    nurseAssessment?: SortOrderInput | SortOrder
    medications?: SortOrderInput | SortOrder
    otherNotes?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    painScale?: SortOrderInput | SortOrder
    currentHistory?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    problems?: TriageProblemOrderByRelationAggregateInput
    allergies?: TriageAllergyOrderByRelationAggregateInput
    consultations?: ConsultationsOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type PatientTriageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientTriageWhereInput | PatientTriageWhereInput[]
    OR?: PatientTriageWhereInput[]
    NOT?: PatientTriageWhereInput | PatientTriageWhereInput[]
    status?: StringNullableFilter<"PatientTriage"> | string | null
    priority?: StringNullableFilter<"PatientTriage"> | string | null
    immunizationUpToDate?: StringNullableFilter<"PatientTriage"> | string | null
    immunizationRemarks?: StringNullableFilter<"PatientTriage"> | string | null
    allergenHistory?: StringNullableFilter<"PatientTriage"> | string | null
    systolic?: StringNullableFilter<"PatientTriage"> | string | null
    diastolic?: StringNullableFilter<"PatientTriage"> | string | null
    temperature?: StringNullableFilter<"PatientTriage"> | string | null
    height?: StringNullableFilter<"PatientTriage"> | string | null
    weight?: StringNullableFilter<"PatientTriage"> | string | null
    spO2?: StringNullableFilter<"PatientTriage"> | string | null
    bmi?: StringNullableFilter<"PatientTriage"> | string | null
    pulse?: StringNullableFilter<"PatientTriage"> | string | null
    pastMedicalHistory?: StringNullableFilter<"PatientTriage"> | string | null
    familyHistory?: StringNullableFilter<"PatientTriage"> | string | null
    socialHistory?: StringNullableFilter<"PatientTriage"> | string | null
    surgicalHistory?: StringNullableFilter<"PatientTriage"> | string | null
    creams?: StringNullableFilter<"PatientTriage"> | string | null
    nurseAssessment?: StringNullableFilter<"PatientTriage"> | string | null
    medications?: StringNullableFilter<"PatientTriage"> | string | null
    otherNotes?: StringNullableFilter<"PatientTriage"> | string | null
    created_at?: DateTimeFilter<"PatientTriage"> | Date | string
    updated_at?: DateTimeFilter<"PatientTriage"> | Date | string
    painScale?: IntNullableFilter<"PatientTriage"> | number | null
    currentHistory?: StringNullableFilter<"PatientTriage"> | string | null
    createdById?: IntFilter<"PatientTriage"> | number
    updatedById?: IntFilter<"PatientTriage"> | number
    problems?: TriageProblemListRelationFilter
    allergies?: TriageAllergyListRelationFilter
    consultations?: ConsultationsListRelationFilter
    notes?: NoteListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type PatientTriageOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    immunizationUpToDate?: SortOrderInput | SortOrder
    immunizationRemarks?: SortOrderInput | SortOrder
    allergenHistory?: SortOrderInput | SortOrder
    systolic?: SortOrderInput | SortOrder
    diastolic?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    spO2?: SortOrderInput | SortOrder
    bmi?: SortOrderInput | SortOrder
    pulse?: SortOrderInput | SortOrder
    pastMedicalHistory?: SortOrderInput | SortOrder
    familyHistory?: SortOrderInput | SortOrder
    socialHistory?: SortOrderInput | SortOrder
    surgicalHistory?: SortOrderInput | SortOrder
    creams?: SortOrderInput | SortOrder
    nurseAssessment?: SortOrderInput | SortOrder
    medications?: SortOrderInput | SortOrder
    otherNotes?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    painScale?: SortOrderInput | SortOrder
    currentHistory?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: PatientTriageCountOrderByAggregateInput
    _avg?: PatientTriageAvgOrderByAggregateInput
    _max?: PatientTriageMaxOrderByAggregateInput
    _min?: PatientTriageMinOrderByAggregateInput
    _sum?: PatientTriageSumOrderByAggregateInput
  }

  export type PatientTriageScalarWhereWithAggregatesInput = {
    AND?: PatientTriageScalarWhereWithAggregatesInput | PatientTriageScalarWhereWithAggregatesInput[]
    OR?: PatientTriageScalarWhereWithAggregatesInput[]
    NOT?: PatientTriageScalarWhereWithAggregatesInput | PatientTriageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientTriage"> | number
    status?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    priority?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    immunizationUpToDate?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    immunizationRemarks?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    allergenHistory?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    systolic?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    diastolic?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    temperature?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    height?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    weight?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    spO2?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    bmi?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    pulse?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    pastMedicalHistory?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    familyHistory?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    socialHistory?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    surgicalHistory?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    creams?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    nurseAssessment?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    medications?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    otherNotes?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"PatientTriage"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"PatientTriage"> | Date | string
    painScale?: IntNullableWithAggregatesFilter<"PatientTriage"> | number | null
    currentHistory?: StringNullableWithAggregatesFilter<"PatientTriage"> | string | null
    createdById?: IntWithAggregatesFilter<"PatientTriage"> | number
    updatedById?: IntWithAggregatesFilter<"PatientTriage"> | number
  }

  export type PatientAssessmentWhereInput = {
    AND?: PatientAssessmentWhereInput | PatientAssessmentWhereInput[]
    OR?: PatientAssessmentWhereInput[]
    NOT?: PatientAssessmentWhereInput | PatientAssessmentWhereInput[]
    id?: IntFilter<"PatientAssessment"> | number
    visitType?: StringNullableFilter<"PatientAssessment"> | string | null
    consultationType?: StringNullableFilter<"PatientAssessment"> | string | null
    status?: StringNullableFilter<"PatientAssessment"> | string | null
    createdAt?: DateTimeFilter<"PatientAssessment"> | Date | string
    complaints?: StringNullableFilter<"PatientAssessment"> | string | null
    facial_dermapen_prp?: StringNullableFilter<"PatientAssessment"> | string | null
    instructions?: StringNullableFilter<"PatientAssessment"> | string | null
    laser_q_note?: StringNullableFilter<"PatientAssessment"> | string | null
    prescription?: StringNullableFilter<"PatientAssessment"> | string | null
    provider_notes?: StringNullableFilter<"PatientAssessment"> | string | null
    recommendations?: StringNullableFilter<"PatientAssessment"> | string | null
    slimming_note?: StringNullableFilter<"PatientAssessment"> | string | null
    images?: StringNullableListFilter<"PatientAssessment">
    createdById?: IntFilter<"PatientAssessment"> | number
    updatedById?: IntFilter<"PatientAssessment"> | number
    consultations?: ConsultationsListRelationFilter
    patientMedications?: PatientMedicationListRelationFilter
    patientTreatments?: PatientTreatmentListRelationFilter
    patientPackages?: PatientPackageListRelationFilter
    patientItems?: PatientItemListRelationFilter
    notes?: NoteListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PatientAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    visitType?: SortOrderInput | SortOrder
    consultationType?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    complaints?: SortOrderInput | SortOrder
    facial_dermapen_prp?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    laser_q_note?: SortOrderInput | SortOrder
    prescription?: SortOrderInput | SortOrder
    provider_notes?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    slimming_note?: SortOrderInput | SortOrder
    images?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    consultations?: ConsultationsOrderByRelationAggregateInput
    patientMedications?: PatientMedicationOrderByRelationAggregateInput
    patientTreatments?: PatientTreatmentOrderByRelationAggregateInput
    patientPackages?: PatientPackageOrderByRelationAggregateInput
    patientItems?: PatientItemOrderByRelationAggregateInput
    notes?: NoteOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type PatientAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientAssessmentWhereInput | PatientAssessmentWhereInput[]
    OR?: PatientAssessmentWhereInput[]
    NOT?: PatientAssessmentWhereInput | PatientAssessmentWhereInput[]
    visitType?: StringNullableFilter<"PatientAssessment"> | string | null
    consultationType?: StringNullableFilter<"PatientAssessment"> | string | null
    status?: StringNullableFilter<"PatientAssessment"> | string | null
    createdAt?: DateTimeFilter<"PatientAssessment"> | Date | string
    complaints?: StringNullableFilter<"PatientAssessment"> | string | null
    facial_dermapen_prp?: StringNullableFilter<"PatientAssessment"> | string | null
    instructions?: StringNullableFilter<"PatientAssessment"> | string | null
    laser_q_note?: StringNullableFilter<"PatientAssessment"> | string | null
    prescription?: StringNullableFilter<"PatientAssessment"> | string | null
    provider_notes?: StringNullableFilter<"PatientAssessment"> | string | null
    recommendations?: StringNullableFilter<"PatientAssessment"> | string | null
    slimming_note?: StringNullableFilter<"PatientAssessment"> | string | null
    images?: StringNullableListFilter<"PatientAssessment">
    createdById?: IntFilter<"PatientAssessment"> | number
    updatedById?: IntFilter<"PatientAssessment"> | number
    consultations?: ConsultationsListRelationFilter
    patientMedications?: PatientMedicationListRelationFilter
    patientTreatments?: PatientTreatmentListRelationFilter
    patientPackages?: PatientPackageListRelationFilter
    patientItems?: PatientItemListRelationFilter
    notes?: NoteListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type PatientAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    visitType?: SortOrderInput | SortOrder
    consultationType?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    complaints?: SortOrderInput | SortOrder
    facial_dermapen_prp?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    laser_q_note?: SortOrderInput | SortOrder
    prescription?: SortOrderInput | SortOrder
    provider_notes?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    slimming_note?: SortOrderInput | SortOrder
    images?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: PatientAssessmentCountOrderByAggregateInput
    _avg?: PatientAssessmentAvgOrderByAggregateInput
    _max?: PatientAssessmentMaxOrderByAggregateInput
    _min?: PatientAssessmentMinOrderByAggregateInput
    _sum?: PatientAssessmentSumOrderByAggregateInput
  }

  export type PatientAssessmentScalarWhereWithAggregatesInput = {
    AND?: PatientAssessmentScalarWhereWithAggregatesInput | PatientAssessmentScalarWhereWithAggregatesInput[]
    OR?: PatientAssessmentScalarWhereWithAggregatesInput[]
    NOT?: PatientAssessmentScalarWhereWithAggregatesInput | PatientAssessmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientAssessment"> | number
    visitType?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    consultationType?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    status?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientAssessment"> | Date | string
    complaints?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    facial_dermapen_prp?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    instructions?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    laser_q_note?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    prescription?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    provider_notes?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    recommendations?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    slimming_note?: StringNullableWithAggregatesFilter<"PatientAssessment"> | string | null
    images?: StringNullableListFilter<"PatientAssessment">
    createdById?: IntWithAggregatesFilter<"PatientAssessment"> | number
    updatedById?: IntWithAggregatesFilter<"PatientAssessment"> | number
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: IntFilter<"Note"> | number
    content?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    updatedAt?: DateTimeFilter<"Note"> | Date | string
    createdBy?: IntFilter<"Note"> | number
    noteType?: StringFilter<"Note"> | string
    patientTriageId?: IntNullableFilter<"Note"> | number | null
    patientAssessmentId?: IntNullableFilter<"Note"> | number | null
    patientTriage?: XOR<PatientTriageNullableRelationFilter, PatientTriageWhereInput> | null
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    noteType?: SortOrder
    patientTriageId?: SortOrderInput | SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    patientTriage?: PatientTriageOrderByWithRelationInput
    patientAssessment?: PatientAssessmentOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    content?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    updatedAt?: DateTimeFilter<"Note"> | Date | string
    createdBy?: IntFilter<"Note"> | number
    noteType?: StringFilter<"Note"> | string
    patientTriageId?: IntNullableFilter<"Note"> | number | null
    patientAssessmentId?: IntNullableFilter<"Note"> | number | null
    patientTriage?: XOR<PatientTriageNullableRelationFilter, PatientTriageWhereInput> | null
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    noteType?: SortOrder
    patientTriageId?: SortOrderInput | SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    _count?: NoteCountOrderByAggregateInput
    _avg?: NoteAvgOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
    _sum?: NoteSumOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Note"> | number
    content?: StringWithAggregatesFilter<"Note"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
    createdBy?: IntWithAggregatesFilter<"Note"> | number
    noteType?: StringWithAggregatesFilter<"Note"> | string
    patientTriageId?: IntNullableWithAggregatesFilter<"Note"> | number | null
    patientAssessmentId?: IntNullableWithAggregatesFilter<"Note"> | number | null
  }

  export type PatientTreatmentWhereInput = {
    AND?: PatientTreatmentWhereInput | PatientTreatmentWhereInput[]
    OR?: PatientTreatmentWhereInput[]
    NOT?: PatientTreatmentWhereInput | PatientTreatmentWhereInput[]
    id?: IntFilter<"PatientTreatment"> | number
    quantity?: IntFilter<"PatientTreatment"> | number
    notes?: StringNullableFilter<"PatientTreatment"> | string | null
    treatmentId?: IntFilter<"PatientTreatment"> | number
    patientAssessmentId?: IntNullableFilter<"PatientTreatment"> | number | null
    billingId?: IntNullableFilter<"PatientTreatment"> | number | null
    createdAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    updatedAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    createdById?: IntFilter<"PatientTreatment"> | number
    updatedById?: IntFilter<"PatientTreatment"> | number
    treatment?: XOR<TreatmentRelationFilter, TreatmentWhereInput>
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    billing?: XOR<BillingsNullableRelationFilter, BillingsWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PatientTreatmentOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    treatmentId?: SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    billingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    treatment?: TreatmentOrderByWithRelationInput
    patientAssessment?: PatientAssessmentOrderByWithRelationInput
    billing?: BillingsOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type PatientTreatmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientTreatmentWhereInput | PatientTreatmentWhereInput[]
    OR?: PatientTreatmentWhereInput[]
    NOT?: PatientTreatmentWhereInput | PatientTreatmentWhereInput[]
    quantity?: IntFilter<"PatientTreatment"> | number
    notes?: StringNullableFilter<"PatientTreatment"> | string | null
    treatmentId?: IntFilter<"PatientTreatment"> | number
    patientAssessmentId?: IntNullableFilter<"PatientTreatment"> | number | null
    billingId?: IntNullableFilter<"PatientTreatment"> | number | null
    createdAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    updatedAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    createdById?: IntFilter<"PatientTreatment"> | number
    updatedById?: IntFilter<"PatientTreatment"> | number
    treatment?: XOR<TreatmentRelationFilter, TreatmentWhereInput>
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    billing?: XOR<BillingsNullableRelationFilter, BillingsWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type PatientTreatmentOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    treatmentId?: SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    billingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: PatientTreatmentCountOrderByAggregateInput
    _avg?: PatientTreatmentAvgOrderByAggregateInput
    _max?: PatientTreatmentMaxOrderByAggregateInput
    _min?: PatientTreatmentMinOrderByAggregateInput
    _sum?: PatientTreatmentSumOrderByAggregateInput
  }

  export type PatientTreatmentScalarWhereWithAggregatesInput = {
    AND?: PatientTreatmentScalarWhereWithAggregatesInput | PatientTreatmentScalarWhereWithAggregatesInput[]
    OR?: PatientTreatmentScalarWhereWithAggregatesInput[]
    NOT?: PatientTreatmentScalarWhereWithAggregatesInput | PatientTreatmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientTreatment"> | number
    quantity?: IntWithAggregatesFilter<"PatientTreatment"> | number
    notes?: StringNullableWithAggregatesFilter<"PatientTreatment"> | string | null
    treatmentId?: IntWithAggregatesFilter<"PatientTreatment"> | number
    patientAssessmentId?: IntNullableWithAggregatesFilter<"PatientTreatment"> | number | null
    billingId?: IntNullableWithAggregatesFilter<"PatientTreatment"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientTreatment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientTreatment"> | Date | string
    createdById?: IntWithAggregatesFilter<"PatientTreatment"> | number
    updatedById?: IntWithAggregatesFilter<"PatientTreatment"> | number
  }

  export type PatientMedicationWhereInput = {
    AND?: PatientMedicationWhereInput | PatientMedicationWhereInput[]
    OR?: PatientMedicationWhereInput[]
    NOT?: PatientMedicationWhereInput | PatientMedicationWhereInput[]
    id?: IntFilter<"PatientMedication"> | number
    quantity?: IntFilter<"PatientMedication"> | number
    notes?: StringNullableFilter<"PatientMedication"> | string | null
    medicineId?: IntFilter<"PatientMedication"> | number
    patientAssessmentId?: IntNullableFilter<"PatientMedication"> | number | null
    billingId?: IntNullableFilter<"PatientMedication"> | number | null
    createdAt?: DateTimeFilter<"PatientMedication"> | Date | string
    updatedAt?: DateTimeFilter<"PatientMedication"> | Date | string
    createdById?: IntFilter<"PatientMedication"> | number
    updatedById?: IntFilter<"PatientMedication"> | number
    medicine?: XOR<MedicineRelationFilter, MedicineWhereInput>
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    billing?: XOR<BillingsNullableRelationFilter, BillingsWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PatientMedicationOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    medicineId?: SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    billingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    medicine?: MedicineOrderByWithRelationInput
    patientAssessment?: PatientAssessmentOrderByWithRelationInput
    billing?: BillingsOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type PatientMedicationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientMedicationWhereInput | PatientMedicationWhereInput[]
    OR?: PatientMedicationWhereInput[]
    NOT?: PatientMedicationWhereInput | PatientMedicationWhereInput[]
    quantity?: IntFilter<"PatientMedication"> | number
    notes?: StringNullableFilter<"PatientMedication"> | string | null
    medicineId?: IntFilter<"PatientMedication"> | number
    patientAssessmentId?: IntNullableFilter<"PatientMedication"> | number | null
    billingId?: IntNullableFilter<"PatientMedication"> | number | null
    createdAt?: DateTimeFilter<"PatientMedication"> | Date | string
    updatedAt?: DateTimeFilter<"PatientMedication"> | Date | string
    createdById?: IntFilter<"PatientMedication"> | number
    updatedById?: IntFilter<"PatientMedication"> | number
    medicine?: XOR<MedicineRelationFilter, MedicineWhereInput>
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    billing?: XOR<BillingsNullableRelationFilter, BillingsWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type PatientMedicationOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    medicineId?: SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    billingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: PatientMedicationCountOrderByAggregateInput
    _avg?: PatientMedicationAvgOrderByAggregateInput
    _max?: PatientMedicationMaxOrderByAggregateInput
    _min?: PatientMedicationMinOrderByAggregateInput
    _sum?: PatientMedicationSumOrderByAggregateInput
  }

  export type PatientMedicationScalarWhereWithAggregatesInput = {
    AND?: PatientMedicationScalarWhereWithAggregatesInput | PatientMedicationScalarWhereWithAggregatesInput[]
    OR?: PatientMedicationScalarWhereWithAggregatesInput[]
    NOT?: PatientMedicationScalarWhereWithAggregatesInput | PatientMedicationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientMedication"> | number
    quantity?: IntWithAggregatesFilter<"PatientMedication"> | number
    notes?: StringNullableWithAggregatesFilter<"PatientMedication"> | string | null
    medicineId?: IntWithAggregatesFilter<"PatientMedication"> | number
    patientAssessmentId?: IntNullableWithAggregatesFilter<"PatientMedication"> | number | null
    billingId?: IntNullableWithAggregatesFilter<"PatientMedication"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientMedication"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientMedication"> | Date | string
    createdById?: IntWithAggregatesFilter<"PatientMedication"> | number
    updatedById?: IntWithAggregatesFilter<"PatientMedication"> | number
  }

  export type PatientPackageWhereInput = {
    AND?: PatientPackageWhereInput | PatientPackageWhereInput[]
    OR?: PatientPackageWhereInput[]
    NOT?: PatientPackageWhereInput | PatientPackageWhereInput[]
    id?: IntFilter<"PatientPackage"> | number
    packageId?: IntFilter<"PatientPackage"> | number
    quantity?: IntFilter<"PatientPackage"> | number
    notes?: StringNullableFilter<"PatientPackage"> | string | null
    patientAssessmentId?: IntNullableFilter<"PatientPackage"> | number | null
    billingId?: IntNullableFilter<"PatientPackage"> | number | null
    createdAt?: DateTimeFilter<"PatientPackage"> | Date | string
    updatedAt?: DateTimeFilter<"PatientPackage"> | Date | string
    createdById?: IntFilter<"PatientPackage"> | number
    updatedById?: IntFilter<"PatientPackage"> | number
    package?: XOR<PackageRelationFilter, PackageWhereInput>
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    billing?: XOR<BillingsNullableRelationFilter, BillingsWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PatientPackageOrderByWithRelationInput = {
    id?: SortOrder
    packageId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    billingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    package?: PackageOrderByWithRelationInput
    patientAssessment?: PatientAssessmentOrderByWithRelationInput
    billing?: BillingsOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type PatientPackageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientPackageWhereInput | PatientPackageWhereInput[]
    OR?: PatientPackageWhereInput[]
    NOT?: PatientPackageWhereInput | PatientPackageWhereInput[]
    packageId?: IntFilter<"PatientPackage"> | number
    quantity?: IntFilter<"PatientPackage"> | number
    notes?: StringNullableFilter<"PatientPackage"> | string | null
    patientAssessmentId?: IntNullableFilter<"PatientPackage"> | number | null
    billingId?: IntNullableFilter<"PatientPackage"> | number | null
    createdAt?: DateTimeFilter<"PatientPackage"> | Date | string
    updatedAt?: DateTimeFilter<"PatientPackage"> | Date | string
    createdById?: IntFilter<"PatientPackage"> | number
    updatedById?: IntFilter<"PatientPackage"> | number
    package?: XOR<PackageRelationFilter, PackageWhereInput>
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    billing?: XOR<BillingsNullableRelationFilter, BillingsWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type PatientPackageOrderByWithAggregationInput = {
    id?: SortOrder
    packageId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    billingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: PatientPackageCountOrderByAggregateInput
    _avg?: PatientPackageAvgOrderByAggregateInput
    _max?: PatientPackageMaxOrderByAggregateInput
    _min?: PatientPackageMinOrderByAggregateInput
    _sum?: PatientPackageSumOrderByAggregateInput
  }

  export type PatientPackageScalarWhereWithAggregatesInput = {
    AND?: PatientPackageScalarWhereWithAggregatesInput | PatientPackageScalarWhereWithAggregatesInput[]
    OR?: PatientPackageScalarWhereWithAggregatesInput[]
    NOT?: PatientPackageScalarWhereWithAggregatesInput | PatientPackageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientPackage"> | number
    packageId?: IntWithAggregatesFilter<"PatientPackage"> | number
    quantity?: IntWithAggregatesFilter<"PatientPackage"> | number
    notes?: StringNullableWithAggregatesFilter<"PatientPackage"> | string | null
    patientAssessmentId?: IntNullableWithAggregatesFilter<"PatientPackage"> | number | null
    billingId?: IntNullableWithAggregatesFilter<"PatientPackage"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientPackage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientPackage"> | Date | string
    createdById?: IntWithAggregatesFilter<"PatientPackage"> | number
    updatedById?: IntWithAggregatesFilter<"PatientPackage"> | number
  }

  export type PatientItemWhereInput = {
    AND?: PatientItemWhereInput | PatientItemWhereInput[]
    OR?: PatientItemWhereInput[]
    NOT?: PatientItemWhereInput | PatientItemWhereInput[]
    id?: IntFilter<"PatientItem"> | number
    itemId?: IntFilter<"PatientItem"> | number
    quantity?: IntFilter<"PatientItem"> | number
    notes?: StringNullableFilter<"PatientItem"> | string | null
    patientAssessmentId?: IntNullableFilter<"PatientItem"> | number | null
    billingId?: IntNullableFilter<"PatientItem"> | number | null
    createdAt?: DateTimeFilter<"PatientItem"> | Date | string
    updatedAt?: DateTimeFilter<"PatientItem"> | Date | string
    createdById?: IntFilter<"PatientItem"> | number
    updatedById?: IntFilter<"PatientItem"> | number
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    billing?: XOR<BillingsNullableRelationFilter, BillingsWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PatientItemOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    billingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    item?: ItemOrderByWithRelationInput
    patientAssessment?: PatientAssessmentOrderByWithRelationInput
    billing?: BillingsOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type PatientItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientItemWhereInput | PatientItemWhereInput[]
    OR?: PatientItemWhereInput[]
    NOT?: PatientItemWhereInput | PatientItemWhereInput[]
    itemId?: IntFilter<"PatientItem"> | number
    quantity?: IntFilter<"PatientItem"> | number
    notes?: StringNullableFilter<"PatientItem"> | string | null
    patientAssessmentId?: IntNullableFilter<"PatientItem"> | number | null
    billingId?: IntNullableFilter<"PatientItem"> | number | null
    createdAt?: DateTimeFilter<"PatientItem"> | Date | string
    updatedAt?: DateTimeFilter<"PatientItem"> | Date | string
    createdById?: IntFilter<"PatientItem"> | number
    updatedById?: IntFilter<"PatientItem"> | number
    item?: XOR<ItemRelationFilter, ItemWhereInput>
    patientAssessment?: XOR<PatientAssessmentNullableRelationFilter, PatientAssessmentWhereInput> | null
    billing?: XOR<BillingsNullableRelationFilter, BillingsWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type PatientItemOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    patientAssessmentId?: SortOrderInput | SortOrder
    billingId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: PatientItemCountOrderByAggregateInput
    _avg?: PatientItemAvgOrderByAggregateInput
    _max?: PatientItemMaxOrderByAggregateInput
    _min?: PatientItemMinOrderByAggregateInput
    _sum?: PatientItemSumOrderByAggregateInput
  }

  export type PatientItemScalarWhereWithAggregatesInput = {
    AND?: PatientItemScalarWhereWithAggregatesInput | PatientItemScalarWhereWithAggregatesInput[]
    OR?: PatientItemScalarWhereWithAggregatesInput[]
    NOT?: PatientItemScalarWhereWithAggregatesInput | PatientItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientItem"> | number
    itemId?: IntWithAggregatesFilter<"PatientItem"> | number
    quantity?: IntWithAggregatesFilter<"PatientItem"> | number
    notes?: StringNullableWithAggregatesFilter<"PatientItem"> | string | null
    patientAssessmentId?: IntNullableWithAggregatesFilter<"PatientItem"> | number | null
    billingId?: IntNullableWithAggregatesFilter<"PatientItem"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientItem"> | Date | string
    createdById?: IntWithAggregatesFilter<"PatientItem"> | number
    updatedById?: IntWithAggregatesFilter<"PatientItem"> | number
  }

  export type MedicineWhereInput = {
    AND?: MedicineWhereInput | MedicineWhereInput[]
    OR?: MedicineWhereInput[]
    NOT?: MedicineWhereInput | MedicineWhereInput[]
    id?: IntFilter<"Medicine"> | number
    code?: StringFilter<"Medicine"> | string
    name?: StringFilter<"Medicine"> | string
    description?: StringNullableFilter<"Medicine"> | string | null
    cost?: FloatFilter<"Medicine"> | number
    price?: FloatFilter<"Medicine"> | number
    quantity?: IntFilter<"Medicine"> | number
    reorderPoint?: IntFilter<"Medicine"> | number
    unit?: StringFilter<"Medicine"> | string
    expirationDate?: DateTimeNullableFilter<"Medicine"> | Date | string | null
    categoryId?: IntFilter<"Medicine"> | number
    supplierId?: IntFilter<"Medicine"> | number
    createdAt?: DateTimeFilter<"Medicine"> | Date | string
    updatedAt?: DateTimeFilter<"Medicine"> | Date | string
    createdById?: IntFilter<"Medicine"> | number
    updatedById?: IntFilter<"Medicine"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    patientMedications?: PatientMedicationListRelationFilter
    inventoryTransactions?: InventoryTransactionListRelationFilter
    inventoryCountItems?: InventoryCountItemListRelationFilter
    purchaseOrderItems?: PurchaseOrderItemListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type MedicineOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    category?: CategoryOrderByWithRelationInput
    supplier?: SupplierOrderByWithRelationInput
    patientMedications?: PatientMedicationOrderByRelationAggregateInput
    inventoryTransactions?: InventoryTransactionOrderByRelationAggregateInput
    inventoryCountItems?: InventoryCountItemOrderByRelationAggregateInput
    purchaseOrderItems?: PurchaseOrderItemOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type MedicineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: MedicineWhereInput | MedicineWhereInput[]
    OR?: MedicineWhereInput[]
    NOT?: MedicineWhereInput | MedicineWhereInput[]
    name?: StringFilter<"Medicine"> | string
    description?: StringNullableFilter<"Medicine"> | string | null
    cost?: FloatFilter<"Medicine"> | number
    price?: FloatFilter<"Medicine"> | number
    quantity?: IntFilter<"Medicine"> | number
    reorderPoint?: IntFilter<"Medicine"> | number
    unit?: StringFilter<"Medicine"> | string
    expirationDate?: DateTimeNullableFilter<"Medicine"> | Date | string | null
    categoryId?: IntFilter<"Medicine"> | number
    supplierId?: IntFilter<"Medicine"> | number
    createdAt?: DateTimeFilter<"Medicine"> | Date | string
    updatedAt?: DateTimeFilter<"Medicine"> | Date | string
    createdById?: IntFilter<"Medicine"> | number
    updatedById?: IntFilter<"Medicine"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    patientMedications?: PatientMedicationListRelationFilter
    inventoryTransactions?: InventoryTransactionListRelationFilter
    inventoryCountItems?: InventoryCountItemListRelationFilter
    purchaseOrderItems?: PurchaseOrderItemListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id" | "code">

  export type MedicineOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: MedicineCountOrderByAggregateInput
    _avg?: MedicineAvgOrderByAggregateInput
    _max?: MedicineMaxOrderByAggregateInput
    _min?: MedicineMinOrderByAggregateInput
    _sum?: MedicineSumOrderByAggregateInput
  }

  export type MedicineScalarWhereWithAggregatesInput = {
    AND?: MedicineScalarWhereWithAggregatesInput | MedicineScalarWhereWithAggregatesInput[]
    OR?: MedicineScalarWhereWithAggregatesInput[]
    NOT?: MedicineScalarWhereWithAggregatesInput | MedicineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Medicine"> | number
    code?: StringWithAggregatesFilter<"Medicine"> | string
    name?: StringWithAggregatesFilter<"Medicine"> | string
    description?: StringNullableWithAggregatesFilter<"Medicine"> | string | null
    cost?: FloatWithAggregatesFilter<"Medicine"> | number
    price?: FloatWithAggregatesFilter<"Medicine"> | number
    quantity?: IntWithAggregatesFilter<"Medicine"> | number
    reorderPoint?: IntWithAggregatesFilter<"Medicine"> | number
    unit?: StringWithAggregatesFilter<"Medicine"> | string
    expirationDate?: DateTimeNullableWithAggregatesFilter<"Medicine"> | Date | string | null
    categoryId?: IntWithAggregatesFilter<"Medicine"> | number
    supplierId?: IntWithAggregatesFilter<"Medicine"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Medicine"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Medicine"> | Date | string
    createdById?: IntWithAggregatesFilter<"Medicine"> | number
    updatedById?: IntWithAggregatesFilter<"Medicine"> | number
  }

  export type ItemWhereInput = {
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    id?: IntFilter<"Item"> | number
    code?: StringFilter<"Item"> | string
    name?: StringFilter<"Item"> | string
    description?: StringNullableFilter<"Item"> | string | null
    cost?: FloatFilter<"Item"> | number
    price?: FloatFilter<"Item"> | number
    quantity?: IntFilter<"Item"> | number
    reorderPoint?: IntFilter<"Item"> | number
    unit?: StringFilter<"Item"> | string
    categoryId?: IntFilter<"Item"> | number
    supplierId?: IntFilter<"Item"> | number
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    createdById?: IntFilter<"Item"> | number
    updatedById?: IntFilter<"Item"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    patientItems?: PatientItemListRelationFilter
    inventoryTransactions?: InventoryTransactionListRelationFilter
    inventoryCountItems?: InventoryCountItemListRelationFilter
    purchaseOrderItems?: PurchaseOrderItemListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type ItemOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    category?: CategoryOrderByWithRelationInput
    supplier?: SupplierOrderByWithRelationInput
    patientItems?: PatientItemOrderByRelationAggregateInput
    inventoryTransactions?: InventoryTransactionOrderByRelationAggregateInput
    inventoryCountItems?: InventoryCountItemOrderByRelationAggregateInput
    purchaseOrderItems?: PurchaseOrderItemOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type ItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: ItemWhereInput | ItemWhereInput[]
    OR?: ItemWhereInput[]
    NOT?: ItemWhereInput | ItemWhereInput[]
    name?: StringFilter<"Item"> | string
    description?: StringNullableFilter<"Item"> | string | null
    cost?: FloatFilter<"Item"> | number
    price?: FloatFilter<"Item"> | number
    quantity?: IntFilter<"Item"> | number
    reorderPoint?: IntFilter<"Item"> | number
    unit?: StringFilter<"Item"> | string
    categoryId?: IntFilter<"Item"> | number
    supplierId?: IntFilter<"Item"> | number
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    createdById?: IntFilter<"Item"> | number
    updatedById?: IntFilter<"Item"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    patientItems?: PatientItemListRelationFilter
    inventoryTransactions?: InventoryTransactionListRelationFilter
    inventoryCountItems?: InventoryCountItemListRelationFilter
    purchaseOrderItems?: PurchaseOrderItemListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id" | "code">

  export type ItemOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: ItemCountOrderByAggregateInput
    _avg?: ItemAvgOrderByAggregateInput
    _max?: ItemMaxOrderByAggregateInput
    _min?: ItemMinOrderByAggregateInput
    _sum?: ItemSumOrderByAggregateInput
  }

  export type ItemScalarWhereWithAggregatesInput = {
    AND?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    OR?: ItemScalarWhereWithAggregatesInput[]
    NOT?: ItemScalarWhereWithAggregatesInput | ItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Item"> | number
    code?: StringWithAggregatesFilter<"Item"> | string
    name?: StringWithAggregatesFilter<"Item"> | string
    description?: StringNullableWithAggregatesFilter<"Item"> | string | null
    cost?: FloatWithAggregatesFilter<"Item"> | number
    price?: FloatWithAggregatesFilter<"Item"> | number
    quantity?: IntWithAggregatesFilter<"Item"> | number
    reorderPoint?: IntWithAggregatesFilter<"Item"> | number
    unit?: StringWithAggregatesFilter<"Item"> | string
    categoryId?: IntWithAggregatesFilter<"Item"> | number
    supplierId?: IntWithAggregatesFilter<"Item"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Item"> | Date | string
    createdById?: IntWithAggregatesFilter<"Item"> | number
    updatedById?: IntWithAggregatesFilter<"Item"> | number
  }

  export type TreatmentWhereInput = {
    AND?: TreatmentWhereInput | TreatmentWhereInput[]
    OR?: TreatmentWhereInput[]
    NOT?: TreatmentWhereInput | TreatmentWhereInput[]
    id?: IntFilter<"Treatment"> | number
    code?: StringFilter<"Treatment"> | string
    name?: StringFilter<"Treatment"> | string
    description?: StringNullableFilter<"Treatment"> | string | null
    cost?: FloatFilter<"Treatment"> | number
    price?: FloatFilter<"Treatment"> | number
    categoryId?: IntFilter<"Treatment"> | number
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeFilter<"Treatment"> | Date | string
    createdById?: IntFilter<"Treatment"> | number
    updatedById?: IntFilter<"Treatment"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    patientTreatments?: PatientTreatmentListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type TreatmentOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cost?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    category?: CategoryOrderByWithRelationInput
    patientTreatments?: PatientTreatmentOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type TreatmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: TreatmentWhereInput | TreatmentWhereInput[]
    OR?: TreatmentWhereInput[]
    NOT?: TreatmentWhereInput | TreatmentWhereInput[]
    name?: StringFilter<"Treatment"> | string
    description?: StringNullableFilter<"Treatment"> | string | null
    cost?: FloatFilter<"Treatment"> | number
    price?: FloatFilter<"Treatment"> | number
    categoryId?: IntFilter<"Treatment"> | number
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeFilter<"Treatment"> | Date | string
    createdById?: IntFilter<"Treatment"> | number
    updatedById?: IntFilter<"Treatment"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    patientTreatments?: PatientTreatmentListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id" | "code">

  export type TreatmentOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cost?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: TreatmentCountOrderByAggregateInput
    _avg?: TreatmentAvgOrderByAggregateInput
    _max?: TreatmentMaxOrderByAggregateInput
    _min?: TreatmentMinOrderByAggregateInput
    _sum?: TreatmentSumOrderByAggregateInput
  }

  export type TreatmentScalarWhereWithAggregatesInput = {
    AND?: TreatmentScalarWhereWithAggregatesInput | TreatmentScalarWhereWithAggregatesInput[]
    OR?: TreatmentScalarWhereWithAggregatesInput[]
    NOT?: TreatmentScalarWhereWithAggregatesInput | TreatmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Treatment"> | number
    code?: StringWithAggregatesFilter<"Treatment"> | string
    name?: StringWithAggregatesFilter<"Treatment"> | string
    description?: StringNullableWithAggregatesFilter<"Treatment"> | string | null
    cost?: FloatWithAggregatesFilter<"Treatment"> | number
    price?: FloatWithAggregatesFilter<"Treatment"> | number
    categoryId?: IntWithAggregatesFilter<"Treatment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Treatment"> | Date | string
    createdById?: IntWithAggregatesFilter<"Treatment"> | number
    updatedById?: IntWithAggregatesFilter<"Treatment"> | number
  }

  export type PackageWhereInput = {
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    id?: IntFilter<"Package"> | number
    code?: StringFilter<"Package"> | string
    name?: StringFilter<"Package"> | string
    description?: StringNullableFilter<"Package"> | string | null
    cost?: FloatFilter<"Package"> | number
    price?: FloatFilter<"Package"> | number
    duration?: StringFilter<"Package"> | string
    categoryId?: IntFilter<"Package"> | number
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    createdById?: IntFilter<"Package"> | number
    updatedById?: IntFilter<"Package"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    patientPackages?: PatientPackageListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PackageOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cost?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    category?: CategoryOrderByWithRelationInput
    patientPackages?: PatientPackageOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type PackageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    name?: StringFilter<"Package"> | string
    description?: StringNullableFilter<"Package"> | string | null
    cost?: FloatFilter<"Package"> | number
    price?: FloatFilter<"Package"> | number
    duration?: StringFilter<"Package"> | string
    categoryId?: IntFilter<"Package"> | number
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    createdById?: IntFilter<"Package"> | number
    updatedById?: IntFilter<"Package"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    patientPackages?: PatientPackageListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id" | "code">

  export type PackageOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    cost?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: PackageCountOrderByAggregateInput
    _avg?: PackageAvgOrderByAggregateInput
    _max?: PackageMaxOrderByAggregateInput
    _min?: PackageMinOrderByAggregateInput
    _sum?: PackageSumOrderByAggregateInput
  }

  export type PackageScalarWhereWithAggregatesInput = {
    AND?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    OR?: PackageScalarWhereWithAggregatesInput[]
    NOT?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Package"> | number
    code?: StringWithAggregatesFilter<"Package"> | string
    name?: StringWithAggregatesFilter<"Package"> | string
    description?: StringNullableWithAggregatesFilter<"Package"> | string | null
    cost?: FloatWithAggregatesFilter<"Package"> | number
    price?: FloatWithAggregatesFilter<"Package"> | number
    duration?: StringWithAggregatesFilter<"Package"> | string
    categoryId?: IntWithAggregatesFilter<"Package"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
    createdById?: IntWithAggregatesFilter<"Package"> | number
    updatedById?: IntWithAggregatesFilter<"Package"> | number
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    createdById?: IntFilter<"Category"> | number
    updatedById?: IntFilter<"Category"> | number
    medicines?: MedicineListRelationFilter
    items?: ItemListRelationFilter
    treatments?: TreatmentListRelationFilter
    packages?: PackageListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    medicines?: MedicineOrderByRelationAggregateInput
    items?: ItemOrderByRelationAggregateInput
    treatments?: TreatmentOrderByRelationAggregateInput
    packages?: PackageOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    createdById?: IntFilter<"Category"> | number
    updatedById?: IntFilter<"Category"> | number
    medicines?: MedicineListRelationFilter
    items?: ItemListRelationFilter
    treatments?: TreatmentListRelationFilter
    packages?: PackageListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringNullableWithAggregatesFilter<"Category"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    createdById?: IntWithAggregatesFilter<"Category"> | number
    updatedById?: IntWithAggregatesFilter<"Category"> | number
  }

  export type SupplierWhereInput = {
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    id?: IntFilter<"Supplier"> | number
    name?: StringFilter<"Supplier"> | string
    contactName?: StringNullableFilter<"Supplier"> | string | null
    email?: StringNullableFilter<"Supplier"> | string | null
    phone?: StringNullableFilter<"Supplier"> | string | null
    address?: StringNullableFilter<"Supplier"> | string | null
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    createdById?: IntFilter<"Supplier"> | number
    updatedById?: IntFilter<"Supplier"> | number
    medicines?: MedicineListRelationFilter
    items?: ItemListRelationFilter
    purchaseOrders?: PurchaseOrderListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type SupplierOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    medicines?: MedicineOrderByRelationAggregateInput
    items?: ItemOrderByRelationAggregateInput
    purchaseOrders?: PurchaseOrderOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type SupplierWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SupplierWhereInput | SupplierWhereInput[]
    OR?: SupplierWhereInput[]
    NOT?: SupplierWhereInput | SupplierWhereInput[]
    name?: StringFilter<"Supplier"> | string
    contactName?: StringNullableFilter<"Supplier"> | string | null
    email?: StringNullableFilter<"Supplier"> | string | null
    phone?: StringNullableFilter<"Supplier"> | string | null
    address?: StringNullableFilter<"Supplier"> | string | null
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    createdById?: IntFilter<"Supplier"> | number
    updatedById?: IntFilter<"Supplier"> | number
    medicines?: MedicineListRelationFilter
    items?: ItemListRelationFilter
    purchaseOrders?: PurchaseOrderListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type SupplierOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: SupplierCountOrderByAggregateInput
    _avg?: SupplierAvgOrderByAggregateInput
    _max?: SupplierMaxOrderByAggregateInput
    _min?: SupplierMinOrderByAggregateInput
    _sum?: SupplierSumOrderByAggregateInput
  }

  export type SupplierScalarWhereWithAggregatesInput = {
    AND?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    OR?: SupplierScalarWhereWithAggregatesInput[]
    NOT?: SupplierScalarWhereWithAggregatesInput | SupplierScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Supplier"> | number
    name?: StringWithAggregatesFilter<"Supplier"> | string
    contactName?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    email?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    address?: StringNullableWithAggregatesFilter<"Supplier"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Supplier"> | Date | string
    createdById?: IntWithAggregatesFilter<"Supplier"> | number
    updatedById?: IntWithAggregatesFilter<"Supplier"> | number
  }

  export type InventoryTransactionWhereInput = {
    AND?: InventoryTransactionWhereInput | InventoryTransactionWhereInput[]
    OR?: InventoryTransactionWhereInput[]
    NOT?: InventoryTransactionWhereInput | InventoryTransactionWhereInput[]
    id?: IntFilter<"InventoryTransaction"> | number
    itemId?: IntNullableFilter<"InventoryTransaction"> | number | null
    medicineId?: IntNullableFilter<"InventoryTransaction"> | number | null
    type?: StringFilter<"InventoryTransaction"> | string
    quantity?: IntFilter<"InventoryTransaction"> | number
    date?: DateTimeFilter<"InventoryTransaction"> | Date | string
    employeeId?: IntFilter<"InventoryTransaction"> | number
    createdAt?: DateTimeFilter<"InventoryTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryTransaction"> | Date | string
    createdById?: IntFilter<"InventoryTransaction"> | number
    updatedById?: IntFilter<"InventoryTransaction"> | number
    item?: XOR<ItemNullableRelationFilter, ItemWhereInput> | null
    medicine?: XOR<MedicineNullableRelationFilter, MedicineWhereInput> | null
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type InventoryTransactionOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrderInput | SortOrder
    medicineId?: SortOrderInput | SortOrder
    type?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    item?: ItemOrderByWithRelationInput
    medicine?: MedicineOrderByWithRelationInput
    employee?: EmployeeOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type InventoryTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InventoryTransactionWhereInput | InventoryTransactionWhereInput[]
    OR?: InventoryTransactionWhereInput[]
    NOT?: InventoryTransactionWhereInput | InventoryTransactionWhereInput[]
    itemId?: IntNullableFilter<"InventoryTransaction"> | number | null
    medicineId?: IntNullableFilter<"InventoryTransaction"> | number | null
    type?: StringFilter<"InventoryTransaction"> | string
    quantity?: IntFilter<"InventoryTransaction"> | number
    date?: DateTimeFilter<"InventoryTransaction"> | Date | string
    employeeId?: IntFilter<"InventoryTransaction"> | number
    createdAt?: DateTimeFilter<"InventoryTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryTransaction"> | Date | string
    createdById?: IntFilter<"InventoryTransaction"> | number
    updatedById?: IntFilter<"InventoryTransaction"> | number
    item?: XOR<ItemNullableRelationFilter, ItemWhereInput> | null
    medicine?: XOR<MedicineNullableRelationFilter, MedicineWhereInput> | null
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type InventoryTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrderInput | SortOrder
    medicineId?: SortOrderInput | SortOrder
    type?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: InventoryTransactionCountOrderByAggregateInput
    _avg?: InventoryTransactionAvgOrderByAggregateInput
    _max?: InventoryTransactionMaxOrderByAggregateInput
    _min?: InventoryTransactionMinOrderByAggregateInput
    _sum?: InventoryTransactionSumOrderByAggregateInput
  }

  export type InventoryTransactionScalarWhereWithAggregatesInput = {
    AND?: InventoryTransactionScalarWhereWithAggregatesInput | InventoryTransactionScalarWhereWithAggregatesInput[]
    OR?: InventoryTransactionScalarWhereWithAggregatesInput[]
    NOT?: InventoryTransactionScalarWhereWithAggregatesInput | InventoryTransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InventoryTransaction"> | number
    itemId?: IntNullableWithAggregatesFilter<"InventoryTransaction"> | number | null
    medicineId?: IntNullableWithAggregatesFilter<"InventoryTransaction"> | number | null
    type?: StringWithAggregatesFilter<"InventoryTransaction"> | string
    quantity?: IntWithAggregatesFilter<"InventoryTransaction"> | number
    date?: DateTimeWithAggregatesFilter<"InventoryTransaction"> | Date | string
    employeeId?: IntWithAggregatesFilter<"InventoryTransaction"> | number
    createdAt?: DateTimeWithAggregatesFilter<"InventoryTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryTransaction"> | Date | string
    createdById?: IntWithAggregatesFilter<"InventoryTransaction"> | number
    updatedById?: IntWithAggregatesFilter<"InventoryTransaction"> | number
  }

  export type InventoryCountWhereInput = {
    AND?: InventoryCountWhereInput | InventoryCountWhereInput[]
    OR?: InventoryCountWhereInput[]
    NOT?: InventoryCountWhereInput | InventoryCountWhereInput[]
    id?: IntFilter<"InventoryCount"> | number
    date?: DateTimeFilter<"InventoryCount"> | Date | string
    status?: StringFilter<"InventoryCount"> | string
    employeeId?: IntFilter<"InventoryCount"> | number
    createdAt?: DateTimeFilter<"InventoryCount"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryCount"> | Date | string
    createdById?: IntFilter<"InventoryCount"> | number
    updatedById?: IntFilter<"InventoryCount"> | number
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    items?: InventoryCountItemListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type InventoryCountOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    employee?: EmployeeOrderByWithRelationInput
    items?: InventoryCountItemOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type InventoryCountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InventoryCountWhereInput | InventoryCountWhereInput[]
    OR?: InventoryCountWhereInput[]
    NOT?: InventoryCountWhereInput | InventoryCountWhereInput[]
    date?: DateTimeFilter<"InventoryCount"> | Date | string
    status?: StringFilter<"InventoryCount"> | string
    employeeId?: IntFilter<"InventoryCount"> | number
    createdAt?: DateTimeFilter<"InventoryCount"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryCount"> | Date | string
    createdById?: IntFilter<"InventoryCount"> | number
    updatedById?: IntFilter<"InventoryCount"> | number
    employee?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    items?: InventoryCountItemListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type InventoryCountOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: InventoryCountCountOrderByAggregateInput
    _avg?: InventoryCountAvgOrderByAggregateInput
    _max?: InventoryCountMaxOrderByAggregateInput
    _min?: InventoryCountMinOrderByAggregateInput
    _sum?: InventoryCountSumOrderByAggregateInput
  }

  export type InventoryCountScalarWhereWithAggregatesInput = {
    AND?: InventoryCountScalarWhereWithAggregatesInput | InventoryCountScalarWhereWithAggregatesInput[]
    OR?: InventoryCountScalarWhereWithAggregatesInput[]
    NOT?: InventoryCountScalarWhereWithAggregatesInput | InventoryCountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InventoryCount"> | number
    date?: DateTimeWithAggregatesFilter<"InventoryCount"> | Date | string
    status?: StringWithAggregatesFilter<"InventoryCount"> | string
    employeeId?: IntWithAggregatesFilter<"InventoryCount"> | number
    createdAt?: DateTimeWithAggregatesFilter<"InventoryCount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryCount"> | Date | string
    createdById?: IntWithAggregatesFilter<"InventoryCount"> | number
    updatedById?: IntWithAggregatesFilter<"InventoryCount"> | number
  }

  export type InventoryCountItemWhereInput = {
    AND?: InventoryCountItemWhereInput | InventoryCountItemWhereInput[]
    OR?: InventoryCountItemWhereInput[]
    NOT?: InventoryCountItemWhereInput | InventoryCountItemWhereInput[]
    id?: IntFilter<"InventoryCountItem"> | number
    inventoryCountId?: IntFilter<"InventoryCountItem"> | number
    itemId?: IntNullableFilter<"InventoryCountItem"> | number | null
    medicineId?: IntNullableFilter<"InventoryCountItem"> | number | null
    expectedQuantity?: IntFilter<"InventoryCountItem"> | number
    actualQuantity?: IntFilter<"InventoryCountItem"> | number
    notes?: StringNullableFilter<"InventoryCountItem"> | string | null
    createdAt?: DateTimeFilter<"InventoryCountItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryCountItem"> | Date | string
    createdById?: IntFilter<"InventoryCountItem"> | number
    updatedById?: IntFilter<"InventoryCountItem"> | number
    inventoryCount?: XOR<InventoryCountRelationFilter, InventoryCountWhereInput>
    item?: XOR<ItemNullableRelationFilter, ItemWhereInput> | null
    medicine?: XOR<MedicineNullableRelationFilter, MedicineWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type InventoryCountItemOrderByWithRelationInput = {
    id?: SortOrder
    inventoryCountId?: SortOrder
    itemId?: SortOrderInput | SortOrder
    medicineId?: SortOrderInput | SortOrder
    expectedQuantity?: SortOrder
    actualQuantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    inventoryCount?: InventoryCountOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
    medicine?: MedicineOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type InventoryCountItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InventoryCountItemWhereInput | InventoryCountItemWhereInput[]
    OR?: InventoryCountItemWhereInput[]
    NOT?: InventoryCountItemWhereInput | InventoryCountItemWhereInput[]
    inventoryCountId?: IntFilter<"InventoryCountItem"> | number
    itemId?: IntNullableFilter<"InventoryCountItem"> | number | null
    medicineId?: IntNullableFilter<"InventoryCountItem"> | number | null
    expectedQuantity?: IntFilter<"InventoryCountItem"> | number
    actualQuantity?: IntFilter<"InventoryCountItem"> | number
    notes?: StringNullableFilter<"InventoryCountItem"> | string | null
    createdAt?: DateTimeFilter<"InventoryCountItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryCountItem"> | Date | string
    createdById?: IntFilter<"InventoryCountItem"> | number
    updatedById?: IntFilter<"InventoryCountItem"> | number
    inventoryCount?: XOR<InventoryCountRelationFilter, InventoryCountWhereInput>
    item?: XOR<ItemNullableRelationFilter, ItemWhereInput> | null
    medicine?: XOR<MedicineNullableRelationFilter, MedicineWhereInput> | null
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type InventoryCountItemOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryCountId?: SortOrder
    itemId?: SortOrderInput | SortOrder
    medicineId?: SortOrderInput | SortOrder
    expectedQuantity?: SortOrder
    actualQuantity?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: InventoryCountItemCountOrderByAggregateInput
    _avg?: InventoryCountItemAvgOrderByAggregateInput
    _max?: InventoryCountItemMaxOrderByAggregateInput
    _min?: InventoryCountItemMinOrderByAggregateInput
    _sum?: InventoryCountItemSumOrderByAggregateInput
  }

  export type InventoryCountItemScalarWhereWithAggregatesInput = {
    AND?: InventoryCountItemScalarWhereWithAggregatesInput | InventoryCountItemScalarWhereWithAggregatesInput[]
    OR?: InventoryCountItemScalarWhereWithAggregatesInput[]
    NOT?: InventoryCountItemScalarWhereWithAggregatesInput | InventoryCountItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InventoryCountItem"> | number
    inventoryCountId?: IntWithAggregatesFilter<"InventoryCountItem"> | number
    itemId?: IntNullableWithAggregatesFilter<"InventoryCountItem"> | number | null
    medicineId?: IntNullableWithAggregatesFilter<"InventoryCountItem"> | number | null
    expectedQuantity?: IntWithAggregatesFilter<"InventoryCountItem"> | number
    actualQuantity?: IntWithAggregatesFilter<"InventoryCountItem"> | number
    notes?: StringNullableWithAggregatesFilter<"InventoryCountItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InventoryCountItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryCountItem"> | Date | string
    createdById?: IntWithAggregatesFilter<"InventoryCountItem"> | number
    updatedById?: IntWithAggregatesFilter<"InventoryCountItem"> | number
  }

  export type PurchaseOrderWhereInput = {
    AND?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    OR?: PurchaseOrderWhereInput[]
    NOT?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    id?: IntFilter<"PurchaseOrder"> | number
    orderNumber?: StringFilter<"PurchaseOrder"> | string
    supplierId?: IntFilter<"PurchaseOrder"> | number
    orderDate?: DateTimeFilter<"PurchaseOrder"> | Date | string
    status?: StringFilter<"PurchaseOrder"> | string
    totalAmount?: FloatFilter<"PurchaseOrder"> | number
    notes?: StringNullableFilter<"PurchaseOrder"> | string | null
    createdById?: IntFilter<"PurchaseOrder"> | number
    updatedById?: IntFilter<"PurchaseOrder"> | number
    createdAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    employeeId?: IntNullableFilter<"PurchaseOrder"> | number | null
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    items?: PurchaseOrderItemListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    Employee?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
  }

  export type PurchaseOrderOrderByWithRelationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    supplierId?: SortOrder
    orderDate?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    supplier?: SupplierOrderByWithRelationInput
    items?: PurchaseOrderItemOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
    Employee?: EmployeeOrderByWithRelationInput
  }

  export type PurchaseOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    orderNumber?: string
    AND?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    OR?: PurchaseOrderWhereInput[]
    NOT?: PurchaseOrderWhereInput | PurchaseOrderWhereInput[]
    supplierId?: IntFilter<"PurchaseOrder"> | number
    orderDate?: DateTimeFilter<"PurchaseOrder"> | Date | string
    status?: StringFilter<"PurchaseOrder"> | string
    totalAmount?: FloatFilter<"PurchaseOrder"> | number
    notes?: StringNullableFilter<"PurchaseOrder"> | string | null
    createdById?: IntFilter<"PurchaseOrder"> | number
    updatedById?: IntFilter<"PurchaseOrder"> | number
    createdAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    employeeId?: IntNullableFilter<"PurchaseOrder"> | number | null
    supplier?: XOR<SupplierRelationFilter, SupplierWhereInput>
    items?: PurchaseOrderItemListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    Employee?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
  }, "id" | "orderNumber">

  export type PurchaseOrderOrderByWithAggregationInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    supplierId?: SortOrder
    orderDate?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    _count?: PurchaseOrderCountOrderByAggregateInput
    _avg?: PurchaseOrderAvgOrderByAggregateInput
    _max?: PurchaseOrderMaxOrderByAggregateInput
    _min?: PurchaseOrderMinOrderByAggregateInput
    _sum?: PurchaseOrderSumOrderByAggregateInput
  }

  export type PurchaseOrderScalarWhereWithAggregatesInput = {
    AND?: PurchaseOrderScalarWhereWithAggregatesInput | PurchaseOrderScalarWhereWithAggregatesInput[]
    OR?: PurchaseOrderScalarWhereWithAggregatesInput[]
    NOT?: PurchaseOrderScalarWhereWithAggregatesInput | PurchaseOrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PurchaseOrder"> | number
    orderNumber?: StringWithAggregatesFilter<"PurchaseOrder"> | string
    supplierId?: IntWithAggregatesFilter<"PurchaseOrder"> | number
    orderDate?: DateTimeWithAggregatesFilter<"PurchaseOrder"> | Date | string
    status?: StringWithAggregatesFilter<"PurchaseOrder"> | string
    totalAmount?: FloatWithAggregatesFilter<"PurchaseOrder"> | number
    notes?: StringNullableWithAggregatesFilter<"PurchaseOrder"> | string | null
    createdById?: IntWithAggregatesFilter<"PurchaseOrder"> | number
    updatedById?: IntWithAggregatesFilter<"PurchaseOrder"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PurchaseOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PurchaseOrder"> | Date | string
    employeeId?: IntNullableWithAggregatesFilter<"PurchaseOrder"> | number | null
  }

  export type PurchaseOrderItemWhereInput = {
    AND?: PurchaseOrderItemWhereInput | PurchaseOrderItemWhereInput[]
    OR?: PurchaseOrderItemWhereInput[]
    NOT?: PurchaseOrderItemWhereInput | PurchaseOrderItemWhereInput[]
    id?: IntFilter<"PurchaseOrderItem"> | number
    purchaseOrderId?: IntFilter<"PurchaseOrderItem"> | number
    itemId?: IntNullableFilter<"PurchaseOrderItem"> | number | null
    medicineId?: IntNullableFilter<"PurchaseOrderItem"> | number | null
    quantity?: IntFilter<"PurchaseOrderItem"> | number
    unitPrice?: FloatFilter<"PurchaseOrderItem"> | number
    totalPrice?: FloatFilter<"PurchaseOrderItem"> | number
    createdAt?: DateTimeFilter<"PurchaseOrderItem"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseOrderItem"> | Date | string
    purchaseOrder?: XOR<PurchaseOrderRelationFilter, PurchaseOrderWhereInput>
    item?: XOR<ItemNullableRelationFilter, ItemWhereInput> | null
    medicine?: XOR<MedicineNullableRelationFilter, MedicineWhereInput> | null
  }

  export type PurchaseOrderItemOrderByWithRelationInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    itemId?: SortOrderInput | SortOrder
    medicineId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    purchaseOrder?: PurchaseOrderOrderByWithRelationInput
    item?: ItemOrderByWithRelationInput
    medicine?: MedicineOrderByWithRelationInput
  }

  export type PurchaseOrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PurchaseOrderItemWhereInput | PurchaseOrderItemWhereInput[]
    OR?: PurchaseOrderItemWhereInput[]
    NOT?: PurchaseOrderItemWhereInput | PurchaseOrderItemWhereInput[]
    purchaseOrderId?: IntFilter<"PurchaseOrderItem"> | number
    itemId?: IntNullableFilter<"PurchaseOrderItem"> | number | null
    medicineId?: IntNullableFilter<"PurchaseOrderItem"> | number | null
    quantity?: IntFilter<"PurchaseOrderItem"> | number
    unitPrice?: FloatFilter<"PurchaseOrderItem"> | number
    totalPrice?: FloatFilter<"PurchaseOrderItem"> | number
    createdAt?: DateTimeFilter<"PurchaseOrderItem"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseOrderItem"> | Date | string
    purchaseOrder?: XOR<PurchaseOrderRelationFilter, PurchaseOrderWhereInput>
    item?: XOR<ItemNullableRelationFilter, ItemWhereInput> | null
    medicine?: XOR<MedicineNullableRelationFilter, MedicineWhereInput> | null
  }, "id">

  export type PurchaseOrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    itemId?: SortOrderInput | SortOrder
    medicineId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PurchaseOrderItemCountOrderByAggregateInput
    _avg?: PurchaseOrderItemAvgOrderByAggregateInput
    _max?: PurchaseOrderItemMaxOrderByAggregateInput
    _min?: PurchaseOrderItemMinOrderByAggregateInput
    _sum?: PurchaseOrderItemSumOrderByAggregateInput
  }

  export type PurchaseOrderItemScalarWhereWithAggregatesInput = {
    AND?: PurchaseOrderItemScalarWhereWithAggregatesInput | PurchaseOrderItemScalarWhereWithAggregatesInput[]
    OR?: PurchaseOrderItemScalarWhereWithAggregatesInput[]
    NOT?: PurchaseOrderItemScalarWhereWithAggregatesInput | PurchaseOrderItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PurchaseOrderItem"> | number
    purchaseOrderId?: IntWithAggregatesFilter<"PurchaseOrderItem"> | number
    itemId?: IntNullableWithAggregatesFilter<"PurchaseOrderItem"> | number | null
    medicineId?: IntNullableWithAggregatesFilter<"PurchaseOrderItem"> | number | null
    quantity?: IntWithAggregatesFilter<"PurchaseOrderItem"> | number
    unitPrice?: FloatWithAggregatesFilter<"PurchaseOrderItem"> | number
    totalPrice?: FloatWithAggregatesFilter<"PurchaseOrderItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PurchaseOrderItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PurchaseOrderItem"> | Date | string
  }

  export type BillingsWhereInput = {
    AND?: BillingsWhereInput | BillingsWhereInput[]
    OR?: BillingsWhereInput[]
    NOT?: BillingsWhereInput | BillingsWhereInput[]
    id?: IntFilter<"Billings"> | number
    patientId?: IntNullableFilter<"Billings"> | number | null
    doctorId?: IntNullableFilter<"Billings"> | number | null
    consultationId?: IntFilter<"Billings"> | number
    total?: FloatNullableFilter<"Billings"> | number | null
    tax?: FloatNullableFilter<"Billings"> | number | null
    discount?: FloatNullableFilter<"Billings"> | number | null
    previousBalance?: FloatNullableFilter<"Billings"> | number | null
    paymentMade?: StringNullableFilter<"Billings"> | string | null
    subtotal?: FloatNullableFilter<"Billings"> | number | null
    status?: StringFilter<"Billings"> | string
    createdAt?: DateTimeFilter<"Billings"> | Date | string
    updatedAt?: DateTimeFilter<"Billings"> | Date | string
    createdById?: IntFilter<"Billings"> | number
    updatedById?: IntFilter<"Billings"> | number
    doctor?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    patient?: XOR<PatientsNullableRelationFilter, PatientsWhereInput> | null
    patientTreatments?: PatientTreatmentListRelationFilter
    patientMedications?: PatientMedicationListRelationFilter
    patientPackages?: PatientPackageListRelationFilter
    patientItems?: PatientItemListRelationFilter
    consultation?: XOR<ConsultationsRelationFilter, ConsultationsWhereInput>
    payments?: PaymentListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type BillingsOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrderInput | SortOrder
    doctorId?: SortOrderInput | SortOrder
    consultationId?: SortOrder
    total?: SortOrderInput | SortOrder
    tax?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    previousBalance?: SortOrderInput | SortOrder
    paymentMade?: SortOrderInput | SortOrder
    subtotal?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    doctor?: EmployeeOrderByWithRelationInput
    patient?: PatientsOrderByWithRelationInput
    patientTreatments?: PatientTreatmentOrderByRelationAggregateInput
    patientMedications?: PatientMedicationOrderByRelationAggregateInput
    patientPackages?: PatientPackageOrderByRelationAggregateInput
    patientItems?: PatientItemOrderByRelationAggregateInput
    consultation?: ConsultationsOrderByWithRelationInput
    payments?: PaymentOrderByRelationAggregateInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type BillingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BillingsWhereInput | BillingsWhereInput[]
    OR?: BillingsWhereInput[]
    NOT?: BillingsWhereInput | BillingsWhereInput[]
    patientId?: IntNullableFilter<"Billings"> | number | null
    doctorId?: IntNullableFilter<"Billings"> | number | null
    consultationId?: IntFilter<"Billings"> | number
    total?: FloatNullableFilter<"Billings"> | number | null
    tax?: FloatNullableFilter<"Billings"> | number | null
    discount?: FloatNullableFilter<"Billings"> | number | null
    previousBalance?: FloatNullableFilter<"Billings"> | number | null
    paymentMade?: StringNullableFilter<"Billings"> | string | null
    subtotal?: FloatNullableFilter<"Billings"> | number | null
    status?: StringFilter<"Billings"> | string
    createdAt?: DateTimeFilter<"Billings"> | Date | string
    updatedAt?: DateTimeFilter<"Billings"> | Date | string
    createdById?: IntFilter<"Billings"> | number
    updatedById?: IntFilter<"Billings"> | number
    doctor?: XOR<EmployeeNullableRelationFilter, EmployeeWhereInput> | null
    patient?: XOR<PatientsNullableRelationFilter, PatientsWhereInput> | null
    patientTreatments?: PatientTreatmentListRelationFilter
    patientMedications?: PatientMedicationListRelationFilter
    patientPackages?: PatientPackageListRelationFilter
    patientItems?: PatientItemListRelationFilter
    consultation?: XOR<ConsultationsRelationFilter, ConsultationsWhereInput>
    payments?: PaymentListRelationFilter
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type BillingsOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrderInput | SortOrder
    doctorId?: SortOrderInput | SortOrder
    consultationId?: SortOrder
    total?: SortOrderInput | SortOrder
    tax?: SortOrderInput | SortOrder
    discount?: SortOrderInput | SortOrder
    previousBalance?: SortOrderInput | SortOrder
    paymentMade?: SortOrderInput | SortOrder
    subtotal?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: BillingsCountOrderByAggregateInput
    _avg?: BillingsAvgOrderByAggregateInput
    _max?: BillingsMaxOrderByAggregateInput
    _min?: BillingsMinOrderByAggregateInput
    _sum?: BillingsSumOrderByAggregateInput
  }

  export type BillingsScalarWhereWithAggregatesInput = {
    AND?: BillingsScalarWhereWithAggregatesInput | BillingsScalarWhereWithAggregatesInput[]
    OR?: BillingsScalarWhereWithAggregatesInput[]
    NOT?: BillingsScalarWhereWithAggregatesInput | BillingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Billings"> | number
    patientId?: IntNullableWithAggregatesFilter<"Billings"> | number | null
    doctorId?: IntNullableWithAggregatesFilter<"Billings"> | number | null
    consultationId?: IntWithAggregatesFilter<"Billings"> | number
    total?: FloatNullableWithAggregatesFilter<"Billings"> | number | null
    tax?: FloatNullableWithAggregatesFilter<"Billings"> | number | null
    discount?: FloatNullableWithAggregatesFilter<"Billings"> | number | null
    previousBalance?: FloatNullableWithAggregatesFilter<"Billings"> | number | null
    paymentMade?: StringNullableWithAggregatesFilter<"Billings"> | string | null
    subtotal?: FloatNullableWithAggregatesFilter<"Billings"> | number | null
    status?: StringWithAggregatesFilter<"Billings"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Billings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Billings"> | Date | string
    createdById?: IntWithAggregatesFilter<"Billings"> | number
    updatedById?: IntWithAggregatesFilter<"Billings"> | number
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: IntFilter<"Payment"> | number
    paymentType?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    billingId?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    createdById?: IntFilter<"Payment"> | number
    updatedById?: IntFilter<"Payment"> | number
    billing?: XOR<BillingsRelationFilter, BillingsWhereInput>
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    billing?: BillingsOrderByWithRelationInput
    createdBy?: EmployeeOrderByWithRelationInput
    updatedBy?: EmployeeOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    paymentType?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    billingId?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    createdById?: IntFilter<"Payment"> | number
    updatedById?: IntFilter<"Payment"> | number
    billing?: XOR<BillingsRelationFilter, BillingsWhereInput>
    createdBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
    updatedBy?: XOR<EmployeeRelationFilter, EmployeeWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Payment"> | number
    paymentType?: StringWithAggregatesFilter<"Payment"> | string
    amount?: FloatWithAggregatesFilter<"Payment"> | number
    billingId?: IntWithAggregatesFilter<"Payment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    createdById?: IntWithAggregatesFilter<"Payment"> | number
    updatedById?: IntWithAggregatesFilter<"Payment"> | number
  }

  export type UserCreateInput = {
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    employee?: EmployeeCreateNestedOneWithoutUserInput
    createdEmployees?: EmployeeCreateNestedManyWithoutCreatedByInput
    updatedEmployees?: EmployeeCreateNestedManyWithoutUpdatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    createdEmployees?: EmployeeUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEmployees?: EmployeeUncheckedCreateNestedManyWithoutUpdatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    createdEmployees?: EmployeeUpdateManyWithoutCreatedByNestedInput
    updatedEmployees?: EmployeeUpdateManyWithoutUpdatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    createdEmployees?: EmployeeUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEmployees?: EmployeeUncheckedUpdateManyWithoutUpdatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmployeeCreateInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeCreateManyInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type EmployeeUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogCreateInput = {
    entityId?: number | null
    entityType?: string | null
    action: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: number
    entityId?: number | null
    entityType?: string | null
    userId: number
    action: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: number
    entityId?: number | null
    entityType?: string | null
    userId: number
    action: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateInput = {
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutSchedulesInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedSchedulesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedSchedulesInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: number
    employeeId: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type ScheduleUpdateInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutSchedulesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedSchedulesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleCreateManyInput = {
    id?: number
    employeeId: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type ScheduleUpdateManyMutationInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientsCreateInput = {
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    deleted?: boolean
    deletedAt?: Date | string | null
    billings?: BillingsCreateNestedManyWithoutPatientInput
    consultations?: ConsultationsCreateNestedManyWithoutPatientInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientsInput
  }

  export type PatientsUncheckedCreateInput = {
    id?: number
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    billings?: BillingsUncheckedCreateNestedManyWithoutPatientInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientsUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billings?: BillingsUpdateManyWithoutPatientNestedInput
    consultations?: ConsultationsUpdateManyWithoutPatientNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientsNestedInput
  }

  export type PatientsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billings?: BillingsUncheckedUpdateManyWithoutPatientNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientsCreateManyInput = {
    id?: number
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type PatientsUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConsultationsCreateInput = {
    status: string
    appointmentId?: number | null
    triageId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedConsultationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedConsultationsInput
    doctor: EmployeeCreateNestedOneWithoutConsultationsInput
    patient?: PatientsCreateNestedOneWithoutConsultationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutConsultationsInput
    patientTriage?: PatientTriageCreateNestedOneWithoutConsultationsInput
    billings?: BillingsCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsUncheckedCreateInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
    billings?: BillingsUncheckedCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedConsultationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedConsultationsNestedInput
    doctor?: EmployeeUpdateOneRequiredWithoutConsultationsNestedInput
    patient?: PatientsUpdateOneWithoutConsultationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutConsultationsNestedInput
    patientTriage?: PatientTriageUpdateOneWithoutConsultationsNestedInput
    billings?: BillingsUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billings?: BillingsUncheckedUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsCreateManyInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ConsultationsUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentsCreateInput = {
    patientId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    doctor: EmployeeCreateNestedOneWithoutAppointmentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedAppointmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedAppointmentsInput
  }

  export type AppointmentsUncheckedCreateInput = {
    id?: number
    patientId: number
    doctorId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    createdById: number
    updatedById: number
  }

  export type AppointmentsUpdateInput = {
    patientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneRequiredWithoutAppointmentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput
  }

  export type AppointmentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsCreateManyInput = {
    id?: number
    patientId: number
    doctorId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    createdById: number
    updatedById: number
  }

  export type AppointmentsUpdateManyMutationInput = {
    patientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type DoctorsCreateInput = {
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    created_at?: Date | string
    updated_at?: Date | string
    password: string
    avaialability?: AvailabilityCreateNestedManyWithoutDoctorInput
  }

  export type DoctorsUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    created_at?: Date | string
    updated_at?: Date | string
    password: string
    avaialability?: AvailabilityUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorsUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    avaialability?: AvailabilityUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    avaialability?: AvailabilityUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorsCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    created_at?: Date | string
    updated_at?: Date | string
    password: string
  }

  export type DoctorsUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AvailabilityCreateInput = {
    date: Date | string
    startTime: string
    endTime: string
    created_at?: Date | string
    updated_at?: Date | string
    doctor: DoctorsCreateNestedOneWithoutAvaialabilityInput
  }

  export type AvailabilityUncheckedCreateInput = {
    id?: number
    doctorId: number
    date: Date | string
    startTime: string
    endTime: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AvailabilityUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorsUpdateOneRequiredWithoutAvaialabilityNestedInput
  }

  export type AvailabilityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvailabilityCreateManyInput = {
    id?: number
    doctorId: number
    date: Date | string
    startTime: string
    endTime: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AvailabilityUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvailabilityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllergyCreateInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    TriageAllergy?: TriageAllergyCreateNestedManyWithoutAllergyInput
  }

  export type AllergyUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    TriageAllergy?: TriageAllergyUncheckedCreateNestedManyWithoutAllergyInput
  }

  export type AllergyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    TriageAllergy?: TriageAllergyUpdateManyWithoutAllergyNestedInput
  }

  export type AllergyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    TriageAllergy?: TriageAllergyUncheckedUpdateManyWithoutAllergyNestedInput
  }

  export type AllergyCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AllergyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllergyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriageAllergyCreateInput = {
    patientTriage?: PatientTriageCreateNestedOneWithoutAllergiesInput
    allergy?: AllergyCreateNestedOneWithoutTriageAllergyInput
  }

  export type TriageAllergyUncheckedCreateInput = {
    id?: number
    patientTriageId?: number | null
    allergyId?: number | null
  }

  export type TriageAllergyUpdateInput = {
    patientTriage?: PatientTriageUpdateOneWithoutAllergiesNestedInput
    allergy?: AllergyUpdateOneWithoutTriageAllergyNestedInput
  }

  export type TriageAllergyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    allergyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TriageAllergyCreateManyInput = {
    id?: number
    patientTriageId?: number | null
    allergyId?: number | null
  }

  export type TriageAllergyUpdateManyMutationInput = {

  }

  export type TriageAllergyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    allergyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProblemCreateInput = {
    name: string
    TriageProblem?: TriageProblemCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateInput = {
    id?: number
    name: string
    TriageProblem?: TriageProblemUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    TriageProblem?: TriageProblemUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    TriageProblem?: TriageProblemUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemCreateManyInput = {
    id?: number
    name: string
  }

  export type ProblemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TriageProblemCreateInput = {
    patientTriage?: PatientTriageCreateNestedOneWithoutProblemsInput
    problem?: ProblemCreateNestedOneWithoutTriageProblemInput
  }

  export type TriageProblemUncheckedCreateInput = {
    id?: number
    patientTriageId?: number | null
    problemId?: number | null
  }

  export type TriageProblemUpdateInput = {
    patientTriage?: PatientTriageUpdateOneWithoutProblemsNestedInput
    problem?: ProblemUpdateOneWithoutTriageProblemNestedInput
  }

  export type TriageProblemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    problemId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TriageProblemCreateManyInput = {
    id?: number
    patientTriageId?: number | null
    problemId?: number | null
  }

  export type TriageProblemUpdateManyMutationInput = {

  }

  export type TriageProblemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    problemId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PatientTriageCreateInput = {
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    problems?: TriageProblemCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsCreateNestedManyWithoutPatientTriageInput
    notes?: NoteCreateNestedManyWithoutPatientTriageInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTriagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTriagesInput
  }

  export type PatientTriageUncheckedCreateInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    createdById: number
    updatedById: number
    problems?: TriageProblemUncheckedCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyUncheckedCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientTriageInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientTriageInput
  }

  export type PatientTriageUpdateInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    problems?: TriageProblemUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUpdateManyWithoutPatientTriageNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTriagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTriagesNestedInput
  }

  export type PatientTriageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    problems?: TriageProblemUncheckedUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUncheckedUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientTriageNestedInput
  }

  export type PatientTriageCreateManyInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    createdById: number
    updatedById: number
  }

  export type PatientTriageUpdateManyMutationInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientTriageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientAssessmentCreateInput = {
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    consultations?: ConsultationsCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteCreateNestedManyWithoutPatientAssessmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientAssessmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientAssessmentsInput
  }

  export type PatientAssessmentUncheckedCreateInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
    updatedById: number
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientAssessmentInput
  }

  export type PatientAssessmentUpdateInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    consultations?: ConsultationsUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUpdateManyWithoutPatientAssessmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientAssessmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientAssessmentsNestedInput
  }

  export type PatientAssessmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientAssessmentNestedInput
  }

  export type PatientAssessmentCreateManyInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
    updatedById: number
  }

  export type PatientAssessmentUpdateManyMutationInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
  }

  export type PatientAssessmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type NoteCreateInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    noteType: string
    patientTriage?: PatientTriageCreateNestedOneWithoutNotesInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutNotesInput
    employee: EmployeeCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    noteType: string
    patientTriageId?: number | null
    patientAssessmentId?: number | null
  }

  export type NoteUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noteType?: StringFieldUpdateOperationsInput | string
    patientTriage?: PatientTriageUpdateOneWithoutNotesNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutNotesNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    noteType?: StringFieldUpdateOperationsInput | string
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NoteCreateManyInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    noteType: string
    patientTriageId?: number | null
    patientAssessmentId?: number | null
  }

  export type NoteUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noteType?: StringFieldUpdateOperationsInput | string
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    noteType?: StringFieldUpdateOperationsInput | string
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PatientTreatmentCreateInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    treatment: TreatmentCreateNestedOneWithoutPatientTreatmentsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientTreatmentsInput
    billing?: BillingsCreateNestedOneWithoutPatientTreatmentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTreatmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientTreatmentUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatment?: TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientTreatmentsNestedInput
    billing?: BillingsUpdateOneWithoutPatientTreatmentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTreatmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTreatmentCreateManyInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientTreatmentUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientTreatmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationCreateInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicine: MedicineCreateNestedOneWithoutPatientMedicationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientMedicationsInput
    billing?: BillingsCreateNestedOneWithoutPatientMedicationsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientMedicationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientMedicationsInput
  }

  export type PatientMedicationUncheckedCreateInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientMedicationUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine?: MedicineUpdateOneRequiredWithoutPatientMedicationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientMedicationsNestedInput
    billing?: BillingsUpdateOneWithoutPatientMedicationsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientMedicationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientMedicationsNestedInput
  }

  export type PatientMedicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationCreateManyInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientMedicationUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMedicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageCreateInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    package: PackageCreateNestedOneWithoutPatientPackagesInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientPackagesInput
    billing?: BillingsCreateNestedOneWithoutPatientPackagesInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientPackagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientPackagesInput
  }

  export type PatientPackageUncheckedCreateInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientPackageUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneRequiredWithoutPatientPackagesNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientPackagesNestedInput
    billing?: BillingsUpdateOneWithoutPatientPackagesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientPackagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientPackagesNestedInput
  }

  export type PatientPackageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageCreateManyInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientPackageUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientPackageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemCreateInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    item: ItemCreateNestedOneWithoutPatientItemsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientItemsInput
    billing?: BillingsCreateNestedOneWithoutPatientItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientItemsInput
  }

  export type PatientItemUncheckedCreateInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutPatientItemsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientItemsNestedInput
    billing?: BillingsUpdateOneWithoutPatientItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientItemsNestedInput
  }

  export type PatientItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemCreateManyInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type MedicineCreateInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutMedicinesInput
    supplier: SupplierCreateNestedOneWithoutMedicinesInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutMedicineInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedMedicinesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedMedicinesInput
  }

  export type MedicineUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicineUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutMedicinesNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutMedicineNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedMedicinesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicineCreateManyInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type MedicineUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ItemCreateInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutItemsInput
    supplier: SupplierCreateNestedOneWithoutItemsInput
    patientItems?: PatientItemCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutItemInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedItemsInput
  }

  export type ItemUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutItemsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutItemsNestedInput
    patientItems?: PatientItemUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutItemNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedItemsNestedInput
  }

  export type ItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientItems?: PatientItemUncheckedUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemCreateManyInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type ItemUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type TreatmentCreateInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutTreatmentsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutTreatmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedTreatmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedTreatmentsInput
  }

  export type TreatmentUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutTreatmentsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutTreatmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedTreatmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedTreatmentsNestedInput
  }

  export type TreatmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentCreateManyInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type TreatmentUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PackageCreateInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutPackagesInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPackageInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPackagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPackagesInput
  }

  export type PackageUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutPackagesNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPackageNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPackagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPackagesNestedInput
  }

  export type PackageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageCreateManyInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PackageUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutCategoryInput
    items?: ItemCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentCreateNestedManyWithoutCategoryInput
    packages?: PackageCreateNestedManyWithoutCategoryInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutCategoryInput
    items?: ItemUncheckedCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutCategoryInput
    packages?: PackageUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutCategoryNestedInput
    items?: ItemUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUpdateManyWithoutCategoryNestedInput
    packages?: PackageUpdateManyWithoutCategoryNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedCategoriesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutCategoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutCategoryNestedInput
    packages?: PackageUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type SupplierCreateInput = {
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutSupplierInput
    items?: ItemCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutSupplierInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedSuppliersInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedSuppliersInput
  }

  export type SupplierUncheckedCreateInput = {
    id?: number
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutSupplierInput
    items?: ItemUncheckedCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutSupplierNestedInput
    items?: ItemUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutSupplierNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedSuppliersNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedSuppliersNestedInput
  }

  export type SupplierUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutSupplierNestedInput
    items?: ItemUncheckedUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierCreateManyInput = {
    id?: number
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type SupplierUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupplierUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionCreateInput = {
    type: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    item?: ItemCreateNestedOneWithoutInventoryTransactionsInput
    medicine?: MedicineCreateNestedOneWithoutInventoryTransactionsInput
    employee: EmployeeCreateNestedOneWithoutInventoryTransactionInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryTransactionsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryTransactionsInput
  }

  export type InventoryTransactionUncheckedCreateInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryTransactionUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneWithoutInventoryTransactionsNestedInput
    medicine?: MedicineUpdateOneWithoutInventoryTransactionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutInventoryTransactionNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryTransactionsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryTransactionsNestedInput
  }

  export type InventoryTransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionCreateManyInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryTransactionUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryTransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountCreateInput = {
    date: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutInventoryCountInput
    items?: InventoryCountItemCreateNestedManyWithoutInventoryCountInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryCountsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryCountsInput
  }

  export type InventoryCountUncheckedCreateInput = {
    id?: number
    date: Date | string
    status: string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    items?: InventoryCountItemUncheckedCreateNestedManyWithoutInventoryCountInput
  }

  export type InventoryCountUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutInventoryCountNestedInput
    items?: InventoryCountItemUpdateManyWithoutInventoryCountNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryCountsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountsNestedInput
  }

  export type InventoryCountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    items?: InventoryCountItemUncheckedUpdateManyWithoutInventoryCountNestedInput
  }

  export type InventoryCountCreateManyInput = {
    id?: number
    date: Date | string
    status: string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryCountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemCreateInput = {
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryCount: InventoryCountCreateNestedOneWithoutItemsInput
    item?: ItemCreateNestedOneWithoutInventoryCountItemsInput
    medicine?: MedicineCreateNestedOneWithoutInventoryCountItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryCountItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryCountItemsInput
  }

  export type InventoryCountItemUncheckedCreateInput = {
    id?: number
    inventoryCountId: number
    itemId?: number | null
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountItemUpdateInput = {
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryCount?: InventoryCountUpdateOneRequiredWithoutItemsNestedInput
    item?: ItemUpdateOneWithoutInventoryCountItemsNestedInput
    medicine?: MedicineUpdateOneWithoutInventoryCountItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryCountItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountItemsNestedInput
  }

  export type InventoryCountItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemCreateManyInput = {
    id?: number
    inventoryCountId: number
    itemId?: number | null
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountItemUpdateManyMutationInput = {
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryCountItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseOrderCreateInput = {
    orderNumber: string
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutPurchaseOrdersInput
    items?: PurchaseOrderItemCreateNestedManyWithoutPurchaseOrderInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPOsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPOsInput
    Employee?: EmployeeCreateNestedOneWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUncheckedCreateInput = {
    id?: number
    orderNumber: string
    supplierId: number
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: number | null
    items?: PurchaseOrderItemUncheckedCreateNestedManyWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUpdateInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutPurchaseOrdersNestedInput
    items?: PurchaseOrderItemUpdateManyWithoutPurchaseOrderNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPOsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPOsNestedInput
    Employee?: EmployeeUpdateOneWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: PurchaseOrderItemUncheckedUpdateManyWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderCreateManyInput = {
    id?: number
    orderNumber: string
    supplierId: number
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: number | null
  }

  export type PurchaseOrderUpdateManyMutationInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PurchaseOrderItemCreateInput = {
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    purchaseOrder: PurchaseOrderCreateNestedOneWithoutItemsInput
    item?: ItemCreateNestedOneWithoutPurchaseOrderItemsInput
    medicine?: MedicineCreateNestedOneWithoutPurchaseOrderItemsInput
  }

  export type PurchaseOrderItemUncheckedCreateInput = {
    id?: number
    purchaseOrderId: number
    itemId?: number | null
    medicineId?: number | null
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseOrder?: PurchaseOrderUpdateOneRequiredWithoutItemsNestedInput
    item?: ItemUpdateOneWithoutPurchaseOrderItemsNestedInput
    medicine?: MedicineUpdateOneWithoutPurchaseOrderItemsNestedInput
  }

  export type PurchaseOrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemCreateManyInput = {
    id?: number
    purchaseOrderId: number
    itemId?: number | null
    medicineId?: number | null
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingsCreateInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsUpdateInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type BillingsCreateManyInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type BillingsUpdateManyMutationInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentCreateInput = {
    paymentType: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    billing: BillingsCreateNestedOneWithoutPaymentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPaymentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    paymentType: string
    amount: number
    billingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PaymentUpdateInput = {
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing?: BillingsUpdateOneRequiredWithoutPaymentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPaymentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    billingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentCreateManyInput = {
    id?: number
    paymentType: string
    amount: number
    billingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PaymentUpdateManyMutationInput = {
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    billingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EmployeeNullableRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumPositionFilter<$PrismaModel = never> = {
    equals?: $Enums.Position | EnumPositionFieldRefInput<$PrismaModel>
    in?: $Enums.Position[] | ListEnumPositionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Position[] | ListEnumPositionFieldRefInput<$PrismaModel>
    not?: NestedEnumPositionFilter<$PrismaModel> | $Enums.Position
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type AppointmentsListRelationFilter = {
    every?: AppointmentsWhereInput
    some?: AppointmentsWhereInput
    none?: AppointmentsWhereInput
  }

  export type ConsultationsListRelationFilter = {
    every?: ConsultationsWhereInput
    some?: ConsultationsWhereInput
    none?: ConsultationsWhereInput
  }

  export type BillingsListRelationFilter = {
    every?: BillingsWhereInput
    some?: BillingsWhereInput
    none?: BillingsWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type InventoryTransactionListRelationFilter = {
    every?: InventoryTransactionWhereInput
    some?: InventoryTransactionWhereInput
    none?: InventoryTransactionWhereInput
  }

  export type InventoryCountListRelationFilter = {
    every?: InventoryCountWhereInput
    some?: InventoryCountWhereInput
    none?: InventoryCountWhereInput
  }

  export type PurchaseOrderListRelationFilter = {
    every?: PurchaseOrderWhereInput
    some?: PurchaseOrderWhereInput
    none?: PurchaseOrderWhereInput
  }

  export type PatientsListRelationFilter = {
    every?: PatientsWhereInput
    some?: PatientsWhereInput
    none?: PatientsWhereInput
  }

  export type PatientTriageListRelationFilter = {
    every?: PatientTriageWhereInput
    some?: PatientTriageWhereInput
    none?: PatientTriageWhereInput
  }

  export type PatientAssessmentListRelationFilter = {
    every?: PatientAssessmentWhereInput
    some?: PatientAssessmentWhereInput
    none?: PatientAssessmentWhereInput
  }

  export type PatientTreatmentListRelationFilter = {
    every?: PatientTreatmentWhereInput
    some?: PatientTreatmentWhereInput
    none?: PatientTreatmentWhereInput
  }

  export type PatientMedicationListRelationFilter = {
    every?: PatientMedicationWhereInput
    some?: PatientMedicationWhereInput
    none?: PatientMedicationWhereInput
  }

  export type PatientPackageListRelationFilter = {
    every?: PatientPackageWhereInput
    some?: PatientPackageWhereInput
    none?: PatientPackageWhereInput
  }

  export type PatientItemListRelationFilter = {
    every?: PatientItemWhereInput
    some?: PatientItemWhereInput
    none?: PatientItemWhereInput
  }

  export type MedicineListRelationFilter = {
    every?: MedicineWhereInput
    some?: MedicineWhereInput
    none?: MedicineWhereInput
  }

  export type ItemListRelationFilter = {
    every?: ItemWhereInput
    some?: ItemWhereInput
    none?: ItemWhereInput
  }

  export type TreatmentListRelationFilter = {
    every?: TreatmentWhereInput
    some?: TreatmentWhereInput
    none?: TreatmentWhereInput
  }

  export type PackageListRelationFilter = {
    every?: PackageWhereInput
    some?: PackageWhereInput
    none?: PackageWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type SupplierListRelationFilter = {
    every?: SupplierWhereInput
    some?: SupplierWhereInput
    none?: SupplierWhereInput
  }

  export type InventoryCountItemListRelationFilter = {
    every?: InventoryCountItemWhereInput
    some?: InventoryCountItemWhereInput
    none?: InventoryCountItemWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsultationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BillingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryCountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PurchaseOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientTriageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientAssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientTreatmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientMedicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientPackageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TreatmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PackageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupplierOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryCountItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    department?: SortOrder
    position?: SortOrder
    hireDate?: SortOrder
    salary?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type EmployeeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    salary?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    position?: SortOrder
    hireDate?: SortOrder
    salary?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    position?: SortOrder
    hireDate?: SortOrder
    salary?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type EmployeeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    salary?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EnumPositionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Position | EnumPositionFieldRefInput<$PrismaModel>
    in?: $Enums.Position[] | ListEnumPositionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Position[] | ListEnumPositionFieldRefInput<$PrismaModel>
    not?: NestedEnumPositionWithAggregatesFilter<$PrismaModel> | $Enums.Position
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPositionFilter<$PrismaModel>
    _max?: NestedEnumPositionFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    entityType?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EmployeeRelationFilter = {
    is?: EmployeeWhereInput
    isNot?: EmployeeWhereInput
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientsCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    nationality?: SortOrder
    maritalStatus?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
    source?: SortOrder
    email?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    district?: SortOrder
    emirate?: SortOrder
    country?: SortOrder
    visaType?: SortOrder
    nationalID?: SortOrder
    otherID?: SortOrder
    emergencyContactNumber?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactRelationship?: SortOrder
    allergies?: SortOrder
    profilePicture?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrder
    mrNumber?: SortOrder
    appointmentId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientsAvgOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    appointmentId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientsMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    nationality?: SortOrder
    maritalStatus?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
    source?: SortOrder
    email?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    district?: SortOrder
    emirate?: SortOrder
    country?: SortOrder
    visaType?: SortOrder
    nationalID?: SortOrder
    otherID?: SortOrder
    emergencyContactNumber?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactRelationship?: SortOrder
    allergies?: SortOrder
    profilePicture?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrder
    mrNumber?: SortOrder
    appointmentId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientsMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    nationality?: SortOrder
    maritalStatus?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
    source?: SortOrder
    email?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    district?: SortOrder
    emirate?: SortOrder
    country?: SortOrder
    visaType?: SortOrder
    nationalID?: SortOrder
    otherID?: SortOrder
    emergencyContactNumber?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactRelationship?: SortOrder
    allergies?: SortOrder
    profilePicture?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctorId?: SortOrder
    mrNumber?: SortOrder
    appointmentId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientsSumOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    appointmentId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientsNullableRelationFilter = {
    is?: PatientsWhereInput | null
    isNot?: PatientsWhereInput | null
  }

  export type PatientAssessmentNullableRelationFilter = {
    is?: PatientAssessmentWhereInput | null
    isNot?: PatientAssessmentWhereInput | null
  }

  export type PatientTriageNullableRelationFilter = {
    is?: PatientTriageWhereInput | null
    isNot?: PatientTriageWhereInput | null
  }

  export type ConsultationsCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    appointmentId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    triageId?: SortOrder
    patientAssessmentId?: SortOrder
    patientTriageId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ConsultationsAvgOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    triageId?: SortOrder
    patientAssessmentId?: SortOrder
    patientTriageId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ConsultationsMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    appointmentId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    triageId?: SortOrder
    patientAssessmentId?: SortOrder
    patientTriageId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ConsultationsMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    appointmentId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    triageId?: SortOrder
    patientAssessmentId?: SortOrder
    patientTriageId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ConsultationsSumOrderByAggregateInput = {
    id?: SortOrder
    appointmentId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    triageId?: SortOrder
    patientAssessmentId?: SortOrder
    patientTriageId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type AppointmentsCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    email?: SortOrder
    endTime?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    startTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type AppointmentsAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type AppointmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    email?: SortOrder
    endTime?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    startTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type AppointmentsMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    notes?: SortOrder
    email?: SortOrder
    endTime?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    countryCode?: SortOrder
    phoneNumber?: SortOrder
    startTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type AppointmentsSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type AvailabilityListRelationFilter = {
    every?: AvailabilityWhereInput
    some?: AvailabilityWhereInput
    none?: AvailabilityWhereInput
  }

  export type AvailabilityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorsCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    password?: SortOrder
  }

  export type DoctorsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DoctorsMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    password?: SortOrder
  }

  export type DoctorsMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    password?: SortOrder
  }

  export type DoctorsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DoctorsRelationFilter = {
    is?: DoctorsWhereInput
    isNot?: DoctorsWhereInput
  }

  export type AvailabilityCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AvailabilityAvgOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
  }

  export type AvailabilityMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AvailabilityMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    date?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AvailabilitySumOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
  }

  export type TriageAllergyListRelationFilter = {
    every?: TriageAllergyWhereInput
    some?: TriageAllergyWhereInput
    none?: TriageAllergyWhereInput
  }

  export type TriageAllergyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AllergyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AllergyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AllergyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AllergyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type AllergySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AllergyNullableRelationFilter = {
    is?: AllergyWhereInput | null
    isNot?: AllergyWhereInput | null
  }

  export type TriageAllergyCountOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    allergyId?: SortOrder
  }

  export type TriageAllergyAvgOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    allergyId?: SortOrder
  }

  export type TriageAllergyMaxOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    allergyId?: SortOrder
  }

  export type TriageAllergyMinOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    allergyId?: SortOrder
  }

  export type TriageAllergySumOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    allergyId?: SortOrder
  }

  export type TriageProblemListRelationFilter = {
    every?: TriageProblemWhereInput
    some?: TriageProblemWhereInput
    none?: TriageProblemWhereInput
  }

  export type TriageProblemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProblemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProblemAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProblemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProblemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProblemSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProblemNullableRelationFilter = {
    is?: ProblemWhereInput | null
    isNot?: ProblemWhereInput | null
  }

  export type TriageProblemCountOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    problemId?: SortOrder
  }

  export type TriageProblemAvgOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    problemId?: SortOrder
  }

  export type TriageProblemMaxOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    problemId?: SortOrder
  }

  export type TriageProblemMinOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    problemId?: SortOrder
  }

  export type TriageProblemSumOrderByAggregateInput = {
    id?: SortOrder
    patientTriageId?: SortOrder
    problemId?: SortOrder
  }

  export type PatientTriageCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    immunizationUpToDate?: SortOrder
    immunizationRemarks?: SortOrder
    allergenHistory?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    temperature?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    spO2?: SortOrder
    bmi?: SortOrder
    pulse?: SortOrder
    pastMedicalHistory?: SortOrder
    familyHistory?: SortOrder
    socialHistory?: SortOrder
    surgicalHistory?: SortOrder
    creams?: SortOrder
    nurseAssessment?: SortOrder
    medications?: SortOrder
    otherNotes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    painScale?: SortOrder
    currentHistory?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientTriageAvgOrderByAggregateInput = {
    id?: SortOrder
    painScale?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientTriageMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    immunizationUpToDate?: SortOrder
    immunizationRemarks?: SortOrder
    allergenHistory?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    temperature?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    spO2?: SortOrder
    bmi?: SortOrder
    pulse?: SortOrder
    pastMedicalHistory?: SortOrder
    familyHistory?: SortOrder
    socialHistory?: SortOrder
    surgicalHistory?: SortOrder
    creams?: SortOrder
    nurseAssessment?: SortOrder
    medications?: SortOrder
    otherNotes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    painScale?: SortOrder
    currentHistory?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientTriageMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    immunizationUpToDate?: SortOrder
    immunizationRemarks?: SortOrder
    allergenHistory?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    temperature?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    spO2?: SortOrder
    bmi?: SortOrder
    pulse?: SortOrder
    pastMedicalHistory?: SortOrder
    familyHistory?: SortOrder
    socialHistory?: SortOrder
    surgicalHistory?: SortOrder
    creams?: SortOrder
    nurseAssessment?: SortOrder
    medications?: SortOrder
    otherNotes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    painScale?: SortOrder
    currentHistory?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientTriageSumOrderByAggregateInput = {
    id?: SortOrder
    painScale?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    visitType?: SortOrder
    consultationType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    complaints?: SortOrder
    facial_dermapen_prp?: SortOrder
    instructions?: SortOrder
    laser_q_note?: SortOrder
    prescription?: SortOrder
    provider_notes?: SortOrder
    recommendations?: SortOrder
    slimming_note?: SortOrder
    images?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientAssessmentAvgOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    visitType?: SortOrder
    consultationType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    complaints?: SortOrder
    facial_dermapen_prp?: SortOrder
    instructions?: SortOrder
    laser_q_note?: SortOrder
    prescription?: SortOrder
    provider_notes?: SortOrder
    recommendations?: SortOrder
    slimming_note?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    visitType?: SortOrder
    consultationType?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    complaints?: SortOrder
    facial_dermapen_prp?: SortOrder
    instructions?: SortOrder
    laser_q_note?: SortOrder
    prescription?: SortOrder
    provider_notes?: SortOrder
    recommendations?: SortOrder
    slimming_note?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientAssessmentSumOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    noteType?: SortOrder
    patientTriageId?: SortOrder
    patientAssessmentId?: SortOrder
  }

  export type NoteAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    patientTriageId?: SortOrder
    patientAssessmentId?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    noteType?: SortOrder
    patientTriageId?: SortOrder
    patientAssessmentId?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    noteType?: SortOrder
    patientTriageId?: SortOrder
    patientAssessmentId?: SortOrder
  }

  export type NoteSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
    patientTriageId?: SortOrder
    patientAssessmentId?: SortOrder
  }

  export type TreatmentRelationFilter = {
    is?: TreatmentWhereInput
    isNot?: TreatmentWhereInput
  }

  export type BillingsNullableRelationFilter = {
    is?: BillingsWhereInput | null
    isNot?: BillingsWhereInput | null
  }

  export type PatientTreatmentCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    treatmentId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientTreatmentAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    treatmentId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientTreatmentMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    treatmentId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientTreatmentMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    treatmentId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientTreatmentSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    treatmentId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type MedicineRelationFilter = {
    is?: MedicineWhereInput
    isNot?: MedicineWhereInput
  }

  export type PatientMedicationCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    medicineId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientMedicationAvgOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    medicineId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientMedicationMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    medicineId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientMedicationMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    medicineId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientMedicationSumOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    medicineId?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PackageRelationFilter = {
    is?: PackageWhereInput
    isNot?: PackageWhereInput
  }

  export type PatientPackageCountOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientPackageAvgOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    quantity?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientPackageMaxOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientPackageMinOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientPackageSumOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    quantity?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ItemRelationFilter = {
    is?: ItemWhereInput
    isNot?: ItemWhereInput
  }

  export type PatientItemCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientItemAvgOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientItemMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientItemMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    notes?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PatientItemSumOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    quantity?: SortOrder
    patientAssessmentId?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type SupplierRelationFilter = {
    is?: SupplierWhereInput
    isNot?: SupplierWhereInput
  }

  export type PurchaseOrderItemListRelationFilter = {
    every?: PurchaseOrderItemWhereInput
    some?: PurchaseOrderItemWhereInput
    none?: PurchaseOrderItemWhereInput
  }

  export type PurchaseOrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicineCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type MedicineAvgOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type MedicineMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type MedicineMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    expirationDate?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type MedicineSumOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ItemCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ItemAvgOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ItemMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ItemMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    unit?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ItemSumOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    quantity?: SortOrder
    reorderPoint?: SortOrder
    categoryId?: SortOrder
    supplierId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type TreatmentCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type TreatmentAvgOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type TreatmentMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type TreatmentMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type TreatmentSumOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PackageCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PackageAvgOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PackageMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PackageMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    duration?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PackageSumOrderByAggregateInput = {
    id?: SortOrder
    cost?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type SupplierCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type SupplierAvgOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type SupplierMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type SupplierMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type SupplierSumOrderByAggregateInput = {
    id?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ItemNullableRelationFilter = {
    is?: ItemWhereInput | null
    isNot?: ItemWhereInput | null
  }

  export type MedicineNullableRelationFilter = {
    is?: MedicineWhereInput | null
    isNot?: MedicineWhereInput | null
  }

  export type InventoryTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryTransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    quantity?: SortOrder
    employeeId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    type?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryTransactionSumOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    quantity?: SortOrder
    employeeId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    status?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountSumOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountRelationFilter = {
    is?: InventoryCountWhereInput
    isNot?: InventoryCountWhereInput
  }

  export type InventoryCountItemCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryCountId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    expectedQuantity?: SortOrder
    actualQuantity?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountItemAvgOrderByAggregateInput = {
    id?: SortOrder
    inventoryCountId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    expectedQuantity?: SortOrder
    actualQuantity?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountItemMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryCountId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    expectedQuantity?: SortOrder
    actualQuantity?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountItemMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryCountId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    expectedQuantity?: SortOrder
    actualQuantity?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type InventoryCountItemSumOrderByAggregateInput = {
    id?: SortOrder
    inventoryCountId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    expectedQuantity?: SortOrder
    actualQuantity?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PurchaseOrderCountOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    supplierId?: SortOrder
    orderDate?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    notes?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeId?: SortOrder
  }

  export type PurchaseOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    supplierId?: SortOrder
    totalAmount?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    employeeId?: SortOrder
  }

  export type PurchaseOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    supplierId?: SortOrder
    orderDate?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    notes?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeId?: SortOrder
  }

  export type PurchaseOrderMinOrderByAggregateInput = {
    id?: SortOrder
    orderNumber?: SortOrder
    supplierId?: SortOrder
    orderDate?: SortOrder
    status?: SortOrder
    totalAmount?: SortOrder
    notes?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employeeId?: SortOrder
  }

  export type PurchaseOrderSumOrderByAggregateInput = {
    id?: SortOrder
    supplierId?: SortOrder
    totalAmount?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    employeeId?: SortOrder
  }

  export type PurchaseOrderRelationFilter = {
    is?: PurchaseOrderWhereInput
    isNot?: PurchaseOrderWhereInput
  }

  export type PurchaseOrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseOrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type PurchaseOrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseOrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseOrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    itemId?: SortOrder
    medicineId?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    totalPrice?: SortOrder
  }

  export type ConsultationsRelationFilter = {
    is?: ConsultationsWhereInput
    isNot?: ConsultationsWhereInput
  }

  export type BillingsCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    consultationId?: SortOrder
    total?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
    previousBalance?: SortOrder
    paymentMade?: SortOrder
    subtotal?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type BillingsAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    consultationId?: SortOrder
    total?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
    previousBalance?: SortOrder
    subtotal?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type BillingsMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    consultationId?: SortOrder
    total?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
    previousBalance?: SortOrder
    paymentMade?: SortOrder
    subtotal?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type BillingsMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    consultationId?: SortOrder
    total?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
    previousBalance?: SortOrder
    paymentMade?: SortOrder
    subtotal?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type BillingsSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    consultationId?: SortOrder
    total?: SortOrder
    tax?: SortOrder
    discount?: SortOrder
    previousBalance?: SortOrder
    subtotal?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type BillingsRelationFilter = {
    is?: BillingsWhereInput
    isNot?: BillingsWhereInput
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    paymentType?: SortOrder
    amount?: SortOrder
    billingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    billingId?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EmployeeCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EmployeeCreateWithoutCreatedByInput, EmployeeUncheckedCreateWithoutCreatedByInput> | EmployeeCreateWithoutCreatedByInput[] | EmployeeUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedByInput | EmployeeCreateOrConnectWithoutCreatedByInput[]
    createMany?: EmployeeCreateManyCreatedByInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type EmployeeCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedByInput, EmployeeUncheckedCreateWithoutUpdatedByInput> | EmployeeCreateWithoutUpdatedByInput[] | EmployeeUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedByInput | EmployeeCreateOrConnectWithoutUpdatedByInput[]
    createMany?: EmployeeCreateManyUpdatedByInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<EmployeeCreateWithoutCreatedByInput, EmployeeUncheckedCreateWithoutCreatedByInput> | EmployeeCreateWithoutCreatedByInput[] | EmployeeUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedByInput | EmployeeCreateOrConnectWithoutCreatedByInput[]
    createMany?: EmployeeCreateManyCreatedByInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedByInput, EmployeeUncheckedCreateWithoutUpdatedByInput> | EmployeeCreateWithoutUpdatedByInput[] | EmployeeUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedByInput | EmployeeCreateOrConnectWithoutUpdatedByInput[]
    createMany?: EmployeeCreateManyUpdatedByInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EmployeeUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedByInput, EmployeeUncheckedCreateWithoutCreatedByInput> | EmployeeCreateWithoutCreatedByInput[] | EmployeeUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedByInput | EmployeeCreateOrConnectWithoutCreatedByInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCreatedByInput | EmployeeUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EmployeeCreateManyCreatedByInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCreatedByInput | EmployeeUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCreatedByInput | EmployeeUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type EmployeeUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedByInput, EmployeeUncheckedCreateWithoutUpdatedByInput> | EmployeeCreateWithoutUpdatedByInput[] | EmployeeUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedByInput | EmployeeCreateOrConnectWithoutUpdatedByInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutUpdatedByInput | EmployeeUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: EmployeeCreateManyUpdatedByInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutUpdatedByInput | EmployeeUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutUpdatedByInput | EmployeeUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EmployeeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedByInput, EmployeeUncheckedCreateWithoutCreatedByInput> | EmployeeCreateWithoutCreatedByInput[] | EmployeeUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedByInput | EmployeeCreateOrConnectWithoutCreatedByInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCreatedByInput | EmployeeUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: EmployeeCreateManyCreatedByInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCreatedByInput | EmployeeUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCreatedByInput | EmployeeUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedByInput, EmployeeUncheckedCreateWithoutUpdatedByInput> | EmployeeCreateWithoutUpdatedByInput[] | EmployeeUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedByInput | EmployeeCreateOrConnectWithoutUpdatedByInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutUpdatedByInput | EmployeeUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: EmployeeCreateManyUpdatedByInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutUpdatedByInput | EmployeeUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutUpdatedByInput | EmployeeUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type EmployeeCreatedepartmentInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedEmployeesInput = {
    create?: XOR<UserCreateWithoutCreatedEmployeesInput, UserUncheckedCreateWithoutCreatedEmployeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEmployeesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedEmployeesInput = {
    create?: XOR<UserCreateWithoutUpdatedEmployeesInput, UserUncheckedCreateWithoutUpdatedEmployeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedEmployeesInput
    connect?: UserWhereUniqueInput
  }

  export type ScheduleCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput> | ScheduleCreateWithoutEmployeeInput[] | ScheduleUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutEmployeeInput | ScheduleCreateOrConnectWithoutEmployeeInput[]
    createMany?: ScheduleCreateManyEmployeeInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type AppointmentsCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AppointmentsCreateWithoutDoctorInput, AppointmentsUncheckedCreateWithoutDoctorInput> | AppointmentsCreateWithoutDoctorInput[] | AppointmentsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutDoctorInput | AppointmentsCreateOrConnectWithoutDoctorInput[]
    createMany?: AppointmentsCreateManyDoctorInputEnvelope
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
  }

  export type ConsultationsCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ConsultationsCreateWithoutDoctorInput, ConsultationsUncheckedCreateWithoutDoctorInput> | ConsultationsCreateWithoutDoctorInput[] | ConsultationsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutDoctorInput | ConsultationsCreateOrConnectWithoutDoctorInput[]
    createMany?: ConsultationsCreateManyDoctorInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type BillingsCreateNestedManyWithoutDoctorInput = {
    create?: XOR<BillingsCreateWithoutDoctorInput, BillingsUncheckedCreateWithoutDoctorInput> | BillingsCreateWithoutDoctorInput[] | BillingsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutDoctorInput | BillingsCreateOrConnectWithoutDoctorInput[]
    createMany?: BillingsCreateManyDoctorInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<NoteCreateWithoutEmployeeInput, NoteUncheckedCreateWithoutEmployeeInput> | NoteCreateWithoutEmployeeInput[] | NoteUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutEmployeeInput | NoteCreateOrConnectWithoutEmployeeInput[]
    createMany?: NoteCreateManyEmployeeInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type InventoryTransactionCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<InventoryTransactionCreateWithoutEmployeeInput, InventoryTransactionUncheckedCreateWithoutEmployeeInput> | InventoryTransactionCreateWithoutEmployeeInput[] | InventoryTransactionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutEmployeeInput | InventoryTransactionCreateOrConnectWithoutEmployeeInput[]
    createMany?: InventoryTransactionCreateManyEmployeeInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryCountCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<InventoryCountCreateWithoutEmployeeInput, InventoryCountUncheckedCreateWithoutEmployeeInput> | InventoryCountCreateWithoutEmployeeInput[] | InventoryCountUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutEmployeeInput | InventoryCountCreateOrConnectWithoutEmployeeInput[]
    createMany?: InventoryCountCreateManyEmployeeInputEnvelope
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
  }

  export type PurchaseOrderCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PurchaseOrderCreateWithoutCreatedByInput, PurchaseOrderUncheckedCreateWithoutCreatedByInput> | PurchaseOrderCreateWithoutCreatedByInput[] | PurchaseOrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutCreatedByInput | PurchaseOrderCreateOrConnectWithoutCreatedByInput[]
    createMany?: PurchaseOrderCreateManyCreatedByInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type PurchaseOrderCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PurchaseOrderCreateWithoutUpdatedByInput, PurchaseOrderUncheckedCreateWithoutUpdatedByInput> | PurchaseOrderCreateWithoutUpdatedByInput[] | PurchaseOrderUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutUpdatedByInput | PurchaseOrderCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PurchaseOrderCreateManyUpdatedByInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type PurchaseOrderCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PurchaseOrderCreateWithoutEmployeeInput, PurchaseOrderUncheckedCreateWithoutEmployeeInput> | PurchaseOrderCreateWithoutEmployeeInput[] | PurchaseOrderUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutEmployeeInput | PurchaseOrderCreateOrConnectWithoutEmployeeInput[]
    createMany?: PurchaseOrderCreateManyEmployeeInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type ConsultationsCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ConsultationsCreateWithoutCreatedByInput, ConsultationsUncheckedCreateWithoutCreatedByInput> | ConsultationsCreateWithoutCreatedByInput[] | ConsultationsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutCreatedByInput | ConsultationsCreateOrConnectWithoutCreatedByInput[]
    createMany?: ConsultationsCreateManyCreatedByInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type ConsultationsCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ConsultationsCreateWithoutUpdatedByInput, ConsultationsUncheckedCreateWithoutUpdatedByInput> | ConsultationsCreateWithoutUpdatedByInput[] | ConsultationsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutUpdatedByInput | ConsultationsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ConsultationsCreateManyUpdatedByInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type AppointmentsCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AppointmentsCreateWithoutCreatedByInput, AppointmentsUncheckedCreateWithoutCreatedByInput> | AppointmentsCreateWithoutCreatedByInput[] | AppointmentsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutCreatedByInput | AppointmentsCreateOrConnectWithoutCreatedByInput[]
    createMany?: AppointmentsCreateManyCreatedByInputEnvelope
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
  }

  export type AppointmentsCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<AppointmentsCreateWithoutUpdatedByInput, AppointmentsUncheckedCreateWithoutUpdatedByInput> | AppointmentsCreateWithoutUpdatedByInput[] | AppointmentsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutUpdatedByInput | AppointmentsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: AppointmentsCreateManyUpdatedByInputEnvelope
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
  }

  export type PatientsCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientsCreateWithoutCreatedByInput, PatientsUncheckedCreateWithoutCreatedByInput> | PatientsCreateWithoutCreatedByInput[] | PatientsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientsCreateOrConnectWithoutCreatedByInput | PatientsCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientsCreateManyCreatedByInputEnvelope
    connect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
  }

  export type PatientsCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientsCreateWithoutUpdatedByInput, PatientsUncheckedCreateWithoutUpdatedByInput> | PatientsCreateWithoutUpdatedByInput[] | PatientsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientsCreateOrConnectWithoutUpdatedByInput | PatientsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientsCreateManyUpdatedByInputEnvelope
    connect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
  }

  export type PatientTriageCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientTriageCreateWithoutCreatedByInput, PatientTriageUncheckedCreateWithoutCreatedByInput> | PatientTriageCreateWithoutCreatedByInput[] | PatientTriageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientTriageCreateOrConnectWithoutCreatedByInput | PatientTriageCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientTriageCreateManyCreatedByInputEnvelope
    connect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
  }

  export type PatientTriageCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientTriageCreateWithoutUpdatedByInput, PatientTriageUncheckedCreateWithoutUpdatedByInput> | PatientTriageCreateWithoutUpdatedByInput[] | PatientTriageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientTriageCreateOrConnectWithoutUpdatedByInput | PatientTriageCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientTriageCreateManyUpdatedByInputEnvelope
    connect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
  }

  export type PatientAssessmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientAssessmentCreateWithoutCreatedByInput, PatientAssessmentUncheckedCreateWithoutCreatedByInput> | PatientAssessmentCreateWithoutCreatedByInput[] | PatientAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutCreatedByInput | PatientAssessmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientAssessmentCreateManyCreatedByInputEnvelope
    connect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
  }

  export type PatientAssessmentCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientAssessmentCreateWithoutUpdatedByInput, PatientAssessmentUncheckedCreateWithoutUpdatedByInput> | PatientAssessmentCreateWithoutUpdatedByInput[] | PatientAssessmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutUpdatedByInput | PatientAssessmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientAssessmentCreateManyUpdatedByInputEnvelope
    connect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
  }

  export type PatientTreatmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientTreatmentCreateWithoutCreatedByInput, PatientTreatmentUncheckedCreateWithoutCreatedByInput> | PatientTreatmentCreateWithoutCreatedByInput[] | PatientTreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutCreatedByInput | PatientTreatmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientTreatmentCreateManyCreatedByInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientTreatmentCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientTreatmentCreateWithoutUpdatedByInput, PatientTreatmentUncheckedCreateWithoutUpdatedByInput> | PatientTreatmentCreateWithoutUpdatedByInput[] | PatientTreatmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutUpdatedByInput | PatientTreatmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientTreatmentCreateManyUpdatedByInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientMedicationCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientMedicationCreateWithoutUpdatedByInput, PatientMedicationUncheckedCreateWithoutUpdatedByInput> | PatientMedicationCreateWithoutUpdatedByInput[] | PatientMedicationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutUpdatedByInput | PatientMedicationCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientMedicationCreateManyUpdatedByInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type PatientMedicationCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientMedicationCreateWithoutCreatedByInput, PatientMedicationUncheckedCreateWithoutCreatedByInput> | PatientMedicationCreateWithoutCreatedByInput[] | PatientMedicationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutCreatedByInput | PatientMedicationCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientMedicationCreateManyCreatedByInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type PatientPackageCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientPackageCreateWithoutUpdatedByInput, PatientPackageUncheckedCreateWithoutUpdatedByInput> | PatientPackageCreateWithoutUpdatedByInput[] | PatientPackageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutUpdatedByInput | PatientPackageCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientPackageCreateManyUpdatedByInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type PatientPackageCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientPackageCreateWithoutCreatedByInput, PatientPackageUncheckedCreateWithoutCreatedByInput> | PatientPackageCreateWithoutCreatedByInput[] | PatientPackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutCreatedByInput | PatientPackageCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientPackageCreateManyCreatedByInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type PatientItemCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientItemCreateWithoutCreatedByInput, PatientItemUncheckedCreateWithoutCreatedByInput> | PatientItemCreateWithoutCreatedByInput[] | PatientItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutCreatedByInput | PatientItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientItemCreateManyCreatedByInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type PatientItemCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientItemCreateWithoutUpdatedByInput, PatientItemUncheckedCreateWithoutUpdatedByInput> | PatientItemCreateWithoutUpdatedByInput[] | PatientItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutUpdatedByInput | PatientItemCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientItemCreateManyUpdatedByInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type MedicineCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MedicineCreateWithoutCreatedByInput, MedicineUncheckedCreateWithoutCreatedByInput> | MedicineCreateWithoutCreatedByInput[] | MedicineUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutCreatedByInput | MedicineCreateOrConnectWithoutCreatedByInput[]
    createMany?: MedicineCreateManyCreatedByInputEnvelope
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type MedicineCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<MedicineCreateWithoutUpdatedByInput, MedicineUncheckedCreateWithoutUpdatedByInput> | MedicineCreateWithoutUpdatedByInput[] | MedicineUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutUpdatedByInput | MedicineCreateOrConnectWithoutUpdatedByInput[]
    createMany?: MedicineCreateManyUpdatedByInputEnvelope
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type ItemCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput> | ItemCreateWithoutCreatedByInput[] | ItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCreatedByInput | ItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: ItemCreateManyCreatedByInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type ItemCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ItemCreateWithoutUpdatedByInput, ItemUncheckedCreateWithoutUpdatedByInput> | ItemCreateWithoutUpdatedByInput[] | ItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUpdatedByInput | ItemCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ItemCreateManyUpdatedByInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type TreatmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput> | TreatmentCreateWithoutCreatedByInput[] | TreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCreatedByInput | TreatmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: TreatmentCreateManyCreatedByInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type TreatmentCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<TreatmentCreateWithoutUpdatedByInput, TreatmentUncheckedCreateWithoutUpdatedByInput> | TreatmentCreateWithoutUpdatedByInput[] | TreatmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutUpdatedByInput | TreatmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: TreatmentCreateManyUpdatedByInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type PackageCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput> | PackageCreateWithoutCreatedByInput[] | PackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCreatedByInput | PackageCreateOrConnectWithoutCreatedByInput[]
    createMany?: PackageCreateManyCreatedByInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type PackageCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PackageCreateWithoutUpdatedByInput, PackageUncheckedCreateWithoutUpdatedByInput> | PackageCreateWithoutUpdatedByInput[] | PackageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutUpdatedByInput | PackageCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PackageCreateManyUpdatedByInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput> | CategoryCreateWithoutCreatedByInput[] | CategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByInput | CategoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: CategoryCreateManyCreatedByInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CategoryCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput> | CategoryCreateWithoutUpdatedByInput[] | CategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByInput | CategoryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CategoryCreateManyUpdatedByInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SupplierCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SupplierCreateWithoutCreatedByInput, SupplierUncheckedCreateWithoutCreatedByInput> | SupplierCreateWithoutCreatedByInput[] | SupplierUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutCreatedByInput | SupplierCreateOrConnectWithoutCreatedByInput[]
    createMany?: SupplierCreateManyCreatedByInputEnvelope
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
  }

  export type SupplierCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SupplierCreateWithoutUpdatedByInput, SupplierUncheckedCreateWithoutUpdatedByInput> | SupplierCreateWithoutUpdatedByInput[] | SupplierUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutUpdatedByInput | SupplierCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SupplierCreateManyUpdatedByInputEnvelope
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
  }

  export type InventoryTransactionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<InventoryTransactionCreateWithoutCreatedByInput, InventoryTransactionUncheckedCreateWithoutCreatedByInput> | InventoryTransactionCreateWithoutCreatedByInput[] | InventoryTransactionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutCreatedByInput | InventoryTransactionCreateOrConnectWithoutCreatedByInput[]
    createMany?: InventoryTransactionCreateManyCreatedByInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryTransactionCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<InventoryTransactionCreateWithoutUpdatedByInput, InventoryTransactionUncheckedCreateWithoutUpdatedByInput> | InventoryTransactionCreateWithoutUpdatedByInput[] | InventoryTransactionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutUpdatedByInput | InventoryTransactionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: InventoryTransactionCreateManyUpdatedByInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryCountCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<InventoryCountCreateWithoutCreatedByInput, InventoryCountUncheckedCreateWithoutCreatedByInput> | InventoryCountCreateWithoutCreatedByInput[] | InventoryCountUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutCreatedByInput | InventoryCountCreateOrConnectWithoutCreatedByInput[]
    createMany?: InventoryCountCreateManyCreatedByInputEnvelope
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
  }

  export type InventoryCountCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<InventoryCountCreateWithoutUpdatedByInput, InventoryCountUncheckedCreateWithoutUpdatedByInput> | InventoryCountCreateWithoutUpdatedByInput[] | InventoryCountUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutUpdatedByInput | InventoryCountCreateOrConnectWithoutUpdatedByInput[]
    createMany?: InventoryCountCreateManyUpdatedByInputEnvelope
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
  }

  export type InventoryCountItemCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<InventoryCountItemCreateWithoutCreatedByInput, InventoryCountItemUncheckedCreateWithoutCreatedByInput> | InventoryCountItemCreateWithoutCreatedByInput[] | InventoryCountItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutCreatedByInput | InventoryCountItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: InventoryCountItemCreateManyCreatedByInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type InventoryCountItemCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<InventoryCountItemCreateWithoutUpdatedByInput, InventoryCountItemUncheckedCreateWithoutUpdatedByInput> | InventoryCountItemCreateWithoutUpdatedByInput[] | InventoryCountItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutUpdatedByInput | InventoryCountItemCreateOrConnectWithoutUpdatedByInput[]
    createMany?: InventoryCountItemCreateManyUpdatedByInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type BillingsCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BillingsCreateWithoutCreatedByInput, BillingsUncheckedCreateWithoutCreatedByInput> | BillingsCreateWithoutCreatedByInput[] | BillingsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutCreatedByInput | BillingsCreateOrConnectWithoutCreatedByInput[]
    createMany?: BillingsCreateManyCreatedByInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type BillingsCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<BillingsCreateWithoutUpdatedByInput, BillingsUncheckedCreateWithoutUpdatedByInput> | BillingsCreateWithoutUpdatedByInput[] | BillingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutUpdatedByInput | BillingsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: BillingsCreateManyUpdatedByInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput> | PaymentCreateWithoutCreatedByInput[] | PaymentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatedByInput | PaymentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PaymentCreateManyCreatedByInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PaymentCreateWithoutUpdatedByInput, PaymentUncheckedCreateWithoutUpdatedByInput> | PaymentCreateWithoutUpdatedByInput[] | PaymentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUpdatedByInput | PaymentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PaymentCreateManyUpdatedByInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ScheduleCreateWithoutCreatedByInput, ScheduleUncheckedCreateWithoutCreatedByInput> | ScheduleCreateWithoutCreatedByInput[] | ScheduleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutCreatedByInput | ScheduleCreateOrConnectWithoutCreatedByInput[]
    createMany?: ScheduleCreateManyCreatedByInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ScheduleCreateWithoutUpdatedByInput, ScheduleUncheckedCreateWithoutUpdatedByInput> | ScheduleCreateWithoutUpdatedByInput[] | ScheduleUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutUpdatedByInput | ScheduleCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ScheduleCreateManyUpdatedByInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput> | ScheduleCreateWithoutEmployeeInput[] | ScheduleUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutEmployeeInput | ScheduleCreateOrConnectWithoutEmployeeInput[]
    createMany?: ScheduleCreateManyEmployeeInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type AppointmentsUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AppointmentsCreateWithoutDoctorInput, AppointmentsUncheckedCreateWithoutDoctorInput> | AppointmentsCreateWithoutDoctorInput[] | AppointmentsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutDoctorInput | AppointmentsCreateOrConnectWithoutDoctorInput[]
    createMany?: AppointmentsCreateManyDoctorInputEnvelope
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
  }

  export type ConsultationsUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<ConsultationsCreateWithoutDoctorInput, ConsultationsUncheckedCreateWithoutDoctorInput> | ConsultationsCreateWithoutDoctorInput[] | ConsultationsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutDoctorInput | ConsultationsCreateOrConnectWithoutDoctorInput[]
    createMany?: ConsultationsCreateManyDoctorInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type BillingsUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<BillingsCreateWithoutDoctorInput, BillingsUncheckedCreateWithoutDoctorInput> | BillingsCreateWithoutDoctorInput[] | BillingsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutDoctorInput | BillingsCreateOrConnectWithoutDoctorInput[]
    createMany?: BillingsCreateManyDoctorInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<NoteCreateWithoutEmployeeInput, NoteUncheckedCreateWithoutEmployeeInput> | NoteCreateWithoutEmployeeInput[] | NoteUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutEmployeeInput | NoteCreateOrConnectWithoutEmployeeInput[]
    createMany?: NoteCreateManyEmployeeInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<InventoryTransactionCreateWithoutEmployeeInput, InventoryTransactionUncheckedCreateWithoutEmployeeInput> | InventoryTransactionCreateWithoutEmployeeInput[] | InventoryTransactionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutEmployeeInput | InventoryTransactionCreateOrConnectWithoutEmployeeInput[]
    createMany?: InventoryTransactionCreateManyEmployeeInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<InventoryCountCreateWithoutEmployeeInput, InventoryCountUncheckedCreateWithoutEmployeeInput> | InventoryCountCreateWithoutEmployeeInput[] | InventoryCountUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutEmployeeInput | InventoryCountCreateOrConnectWithoutEmployeeInput[]
    createMany?: InventoryCountCreateManyEmployeeInputEnvelope
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
  }

  export type PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PurchaseOrderCreateWithoutCreatedByInput, PurchaseOrderUncheckedCreateWithoutCreatedByInput> | PurchaseOrderCreateWithoutCreatedByInput[] | PurchaseOrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutCreatedByInput | PurchaseOrderCreateOrConnectWithoutCreatedByInput[]
    createMany?: PurchaseOrderCreateManyCreatedByInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PurchaseOrderCreateWithoutUpdatedByInput, PurchaseOrderUncheckedCreateWithoutUpdatedByInput> | PurchaseOrderCreateWithoutUpdatedByInput[] | PurchaseOrderUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutUpdatedByInput | PurchaseOrderCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PurchaseOrderCreateManyUpdatedByInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<PurchaseOrderCreateWithoutEmployeeInput, PurchaseOrderUncheckedCreateWithoutEmployeeInput> | PurchaseOrderCreateWithoutEmployeeInput[] | PurchaseOrderUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutEmployeeInput | PurchaseOrderCreateOrConnectWithoutEmployeeInput[]
    createMany?: PurchaseOrderCreateManyEmployeeInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ConsultationsCreateWithoutCreatedByInput, ConsultationsUncheckedCreateWithoutCreatedByInput> | ConsultationsCreateWithoutCreatedByInput[] | ConsultationsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutCreatedByInput | ConsultationsCreateOrConnectWithoutCreatedByInput[]
    createMany?: ConsultationsCreateManyCreatedByInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ConsultationsCreateWithoutUpdatedByInput, ConsultationsUncheckedCreateWithoutUpdatedByInput> | ConsultationsCreateWithoutUpdatedByInput[] | ConsultationsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutUpdatedByInput | ConsultationsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ConsultationsCreateManyUpdatedByInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AppointmentsCreateWithoutCreatedByInput, AppointmentsUncheckedCreateWithoutCreatedByInput> | AppointmentsCreateWithoutCreatedByInput[] | AppointmentsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutCreatedByInput | AppointmentsCreateOrConnectWithoutCreatedByInput[]
    createMany?: AppointmentsCreateManyCreatedByInputEnvelope
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
  }

  export type AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<AppointmentsCreateWithoutUpdatedByInput, AppointmentsUncheckedCreateWithoutUpdatedByInput> | AppointmentsCreateWithoutUpdatedByInput[] | AppointmentsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutUpdatedByInput | AppointmentsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: AppointmentsCreateManyUpdatedByInputEnvelope
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
  }

  export type PatientsUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientsCreateWithoutCreatedByInput, PatientsUncheckedCreateWithoutCreatedByInput> | PatientsCreateWithoutCreatedByInput[] | PatientsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientsCreateOrConnectWithoutCreatedByInput | PatientsCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientsCreateManyCreatedByInputEnvelope
    connect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
  }

  export type PatientsUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientsCreateWithoutUpdatedByInput, PatientsUncheckedCreateWithoutUpdatedByInput> | PatientsCreateWithoutUpdatedByInput[] | PatientsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientsCreateOrConnectWithoutUpdatedByInput | PatientsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientsCreateManyUpdatedByInputEnvelope
    connect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
  }

  export type PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientTriageCreateWithoutCreatedByInput, PatientTriageUncheckedCreateWithoutCreatedByInput> | PatientTriageCreateWithoutCreatedByInput[] | PatientTriageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientTriageCreateOrConnectWithoutCreatedByInput | PatientTriageCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientTriageCreateManyCreatedByInputEnvelope
    connect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
  }

  export type PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientTriageCreateWithoutUpdatedByInput, PatientTriageUncheckedCreateWithoutUpdatedByInput> | PatientTriageCreateWithoutUpdatedByInput[] | PatientTriageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientTriageCreateOrConnectWithoutUpdatedByInput | PatientTriageCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientTriageCreateManyUpdatedByInputEnvelope
    connect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
  }

  export type PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientAssessmentCreateWithoutCreatedByInput, PatientAssessmentUncheckedCreateWithoutCreatedByInput> | PatientAssessmentCreateWithoutCreatedByInput[] | PatientAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutCreatedByInput | PatientAssessmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientAssessmentCreateManyCreatedByInputEnvelope
    connect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
  }

  export type PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientAssessmentCreateWithoutUpdatedByInput, PatientAssessmentUncheckedCreateWithoutUpdatedByInput> | PatientAssessmentCreateWithoutUpdatedByInput[] | PatientAssessmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutUpdatedByInput | PatientAssessmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientAssessmentCreateManyUpdatedByInputEnvelope
    connect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
  }

  export type PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientTreatmentCreateWithoutCreatedByInput, PatientTreatmentUncheckedCreateWithoutCreatedByInput> | PatientTreatmentCreateWithoutCreatedByInput[] | PatientTreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutCreatedByInput | PatientTreatmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientTreatmentCreateManyCreatedByInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientTreatmentCreateWithoutUpdatedByInput, PatientTreatmentUncheckedCreateWithoutUpdatedByInput> | PatientTreatmentCreateWithoutUpdatedByInput[] | PatientTreatmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutUpdatedByInput | PatientTreatmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientTreatmentCreateManyUpdatedByInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientMedicationCreateWithoutUpdatedByInput, PatientMedicationUncheckedCreateWithoutUpdatedByInput> | PatientMedicationCreateWithoutUpdatedByInput[] | PatientMedicationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutUpdatedByInput | PatientMedicationCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientMedicationCreateManyUpdatedByInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientMedicationCreateWithoutCreatedByInput, PatientMedicationUncheckedCreateWithoutCreatedByInput> | PatientMedicationCreateWithoutCreatedByInput[] | PatientMedicationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutCreatedByInput | PatientMedicationCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientMedicationCreateManyCreatedByInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientPackageCreateWithoutUpdatedByInput, PatientPackageUncheckedCreateWithoutUpdatedByInput> | PatientPackageCreateWithoutUpdatedByInput[] | PatientPackageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutUpdatedByInput | PatientPackageCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientPackageCreateManyUpdatedByInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientPackageCreateWithoutCreatedByInput, PatientPackageUncheckedCreateWithoutCreatedByInput> | PatientPackageCreateWithoutCreatedByInput[] | PatientPackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutCreatedByInput | PatientPackageCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientPackageCreateManyCreatedByInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type PatientItemUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientItemCreateWithoutCreatedByInput, PatientItemUncheckedCreateWithoutCreatedByInput> | PatientItemCreateWithoutCreatedByInput[] | PatientItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutCreatedByInput | PatientItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientItemCreateManyCreatedByInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PatientItemCreateWithoutUpdatedByInput, PatientItemUncheckedCreateWithoutUpdatedByInput> | PatientItemCreateWithoutUpdatedByInput[] | PatientItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutUpdatedByInput | PatientItemCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PatientItemCreateManyUpdatedByInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type MedicineUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<MedicineCreateWithoutCreatedByInput, MedicineUncheckedCreateWithoutCreatedByInput> | MedicineCreateWithoutCreatedByInput[] | MedicineUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutCreatedByInput | MedicineCreateOrConnectWithoutCreatedByInput[]
    createMany?: MedicineCreateManyCreatedByInputEnvelope
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type MedicineUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<MedicineCreateWithoutUpdatedByInput, MedicineUncheckedCreateWithoutUpdatedByInput> | MedicineCreateWithoutUpdatedByInput[] | MedicineUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutUpdatedByInput | MedicineCreateOrConnectWithoutUpdatedByInput[]
    createMany?: MedicineCreateManyUpdatedByInputEnvelope
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput> | ItemCreateWithoutCreatedByInput[] | ItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCreatedByInput | ItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: ItemCreateManyCreatedByInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ItemCreateWithoutUpdatedByInput, ItemUncheckedCreateWithoutUpdatedByInput> | ItemCreateWithoutUpdatedByInput[] | ItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUpdatedByInput | ItemCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ItemCreateManyUpdatedByInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type TreatmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput> | TreatmentCreateWithoutCreatedByInput[] | TreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCreatedByInput | TreatmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: TreatmentCreateManyCreatedByInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<TreatmentCreateWithoutUpdatedByInput, TreatmentUncheckedCreateWithoutUpdatedByInput> | TreatmentCreateWithoutUpdatedByInput[] | TreatmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutUpdatedByInput | TreatmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: TreatmentCreateManyUpdatedByInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type PackageUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput> | PackageCreateWithoutCreatedByInput[] | PackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCreatedByInput | PackageCreateOrConnectWithoutCreatedByInput[]
    createMany?: PackageCreateManyCreatedByInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type PackageUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PackageCreateWithoutUpdatedByInput, PackageUncheckedCreateWithoutUpdatedByInput> | PackageCreateWithoutUpdatedByInput[] | PackageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutUpdatedByInput | PackageCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PackageCreateManyUpdatedByInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput> | CategoryCreateWithoutCreatedByInput[] | CategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByInput | CategoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: CategoryCreateManyCreatedByInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput> | CategoryCreateWithoutUpdatedByInput[] | CategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByInput | CategoryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: CategoryCreateManyUpdatedByInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SupplierUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SupplierCreateWithoutCreatedByInput, SupplierUncheckedCreateWithoutCreatedByInput> | SupplierCreateWithoutCreatedByInput[] | SupplierUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutCreatedByInput | SupplierCreateOrConnectWithoutCreatedByInput[]
    createMany?: SupplierCreateManyCreatedByInputEnvelope
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
  }

  export type SupplierUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SupplierCreateWithoutUpdatedByInput, SupplierUncheckedCreateWithoutUpdatedByInput> | SupplierCreateWithoutUpdatedByInput[] | SupplierUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutUpdatedByInput | SupplierCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SupplierCreateManyUpdatedByInputEnvelope
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
  }

  export type InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<InventoryTransactionCreateWithoutCreatedByInput, InventoryTransactionUncheckedCreateWithoutCreatedByInput> | InventoryTransactionCreateWithoutCreatedByInput[] | InventoryTransactionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutCreatedByInput | InventoryTransactionCreateOrConnectWithoutCreatedByInput[]
    createMany?: InventoryTransactionCreateManyCreatedByInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<InventoryTransactionCreateWithoutUpdatedByInput, InventoryTransactionUncheckedCreateWithoutUpdatedByInput> | InventoryTransactionCreateWithoutUpdatedByInput[] | InventoryTransactionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutUpdatedByInput | InventoryTransactionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: InventoryTransactionCreateManyUpdatedByInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<InventoryCountCreateWithoutCreatedByInput, InventoryCountUncheckedCreateWithoutCreatedByInput> | InventoryCountCreateWithoutCreatedByInput[] | InventoryCountUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutCreatedByInput | InventoryCountCreateOrConnectWithoutCreatedByInput[]
    createMany?: InventoryCountCreateManyCreatedByInputEnvelope
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
  }

  export type InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<InventoryCountCreateWithoutUpdatedByInput, InventoryCountUncheckedCreateWithoutUpdatedByInput> | InventoryCountCreateWithoutUpdatedByInput[] | InventoryCountUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutUpdatedByInput | InventoryCountCreateOrConnectWithoutUpdatedByInput[]
    createMany?: InventoryCountCreateManyUpdatedByInputEnvelope
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
  }

  export type InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<InventoryCountItemCreateWithoutCreatedByInput, InventoryCountItemUncheckedCreateWithoutCreatedByInput> | InventoryCountItemCreateWithoutCreatedByInput[] | InventoryCountItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutCreatedByInput | InventoryCountItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: InventoryCountItemCreateManyCreatedByInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<InventoryCountItemCreateWithoutUpdatedByInput, InventoryCountItemUncheckedCreateWithoutUpdatedByInput> | InventoryCountItemCreateWithoutUpdatedByInput[] | InventoryCountItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutUpdatedByInput | InventoryCountItemCreateOrConnectWithoutUpdatedByInput[]
    createMany?: InventoryCountItemCreateManyUpdatedByInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type BillingsUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<BillingsCreateWithoutCreatedByInput, BillingsUncheckedCreateWithoutCreatedByInput> | BillingsCreateWithoutCreatedByInput[] | BillingsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutCreatedByInput | BillingsCreateOrConnectWithoutCreatedByInput[]
    createMany?: BillingsCreateManyCreatedByInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type BillingsUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<BillingsCreateWithoutUpdatedByInput, BillingsUncheckedCreateWithoutUpdatedByInput> | BillingsCreateWithoutUpdatedByInput[] | BillingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutUpdatedByInput | BillingsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: BillingsCreateManyUpdatedByInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput> | PaymentCreateWithoutCreatedByInput[] | PaymentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatedByInput | PaymentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PaymentCreateManyCreatedByInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PaymentCreateWithoutUpdatedByInput, PaymentUncheckedCreateWithoutUpdatedByInput> | PaymentCreateWithoutUpdatedByInput[] | PaymentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUpdatedByInput | PaymentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PaymentCreateManyUpdatedByInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ScheduleCreateWithoutCreatedByInput, ScheduleUncheckedCreateWithoutCreatedByInput> | ScheduleCreateWithoutCreatedByInput[] | ScheduleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutCreatedByInput | ScheduleCreateOrConnectWithoutCreatedByInput[]
    createMany?: ScheduleCreateManyCreatedByInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ScheduleCreateWithoutUpdatedByInput, ScheduleUncheckedCreateWithoutUpdatedByInput> | ScheduleCreateWithoutUpdatedByInput[] | ScheduleUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutUpdatedByInput | ScheduleCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ScheduleCreateManyUpdatedByInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type EmployeeUpdatedepartmentInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumPositionFieldUpdateOperationsInput = {
    set?: $Enums.Position
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutEmployeeNestedInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    upsert?: UserUpsertWithoutEmployeeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeeInput, UserUpdateWithoutEmployeeInput>, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedEmployeesInput, UserUncheckedCreateWithoutCreatedEmployeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedEmployeesInput
    upsert?: UserUpsertWithoutCreatedEmployeesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedEmployeesInput, UserUpdateWithoutCreatedEmployeesInput>, UserUncheckedUpdateWithoutCreatedEmployeesInput>
  }

  export type UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedEmployeesInput, UserUncheckedCreateWithoutUpdatedEmployeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedEmployeesInput
    upsert?: UserUpsertWithoutUpdatedEmployeesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedEmployeesInput, UserUpdateWithoutUpdatedEmployeesInput>, UserUncheckedUpdateWithoutUpdatedEmployeesInput>
  }

  export type ScheduleUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput> | ScheduleCreateWithoutEmployeeInput[] | ScheduleUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutEmployeeInput | ScheduleCreateOrConnectWithoutEmployeeInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutEmployeeInput | ScheduleUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ScheduleCreateManyEmployeeInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutEmployeeInput | ScheduleUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutEmployeeInput | ScheduleUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type AppointmentsUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AppointmentsCreateWithoutDoctorInput, AppointmentsUncheckedCreateWithoutDoctorInput> | AppointmentsCreateWithoutDoctorInput[] | AppointmentsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutDoctorInput | AppointmentsCreateOrConnectWithoutDoctorInput[]
    upsert?: AppointmentsUpsertWithWhereUniqueWithoutDoctorInput | AppointmentsUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AppointmentsCreateManyDoctorInputEnvelope
    set?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    disconnect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    delete?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    update?: AppointmentsUpdateWithWhereUniqueWithoutDoctorInput | AppointmentsUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AppointmentsUpdateManyWithWhereWithoutDoctorInput | AppointmentsUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AppointmentsScalarWhereInput | AppointmentsScalarWhereInput[]
  }

  export type ConsultationsUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ConsultationsCreateWithoutDoctorInput, ConsultationsUncheckedCreateWithoutDoctorInput> | ConsultationsCreateWithoutDoctorInput[] | ConsultationsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutDoctorInput | ConsultationsCreateOrConnectWithoutDoctorInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutDoctorInput | ConsultationsUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ConsultationsCreateManyDoctorInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutDoctorInput | ConsultationsUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutDoctorInput | ConsultationsUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type BillingsUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<BillingsCreateWithoutDoctorInput, BillingsUncheckedCreateWithoutDoctorInput> | BillingsCreateWithoutDoctorInput[] | BillingsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutDoctorInput | BillingsCreateOrConnectWithoutDoctorInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutDoctorInput | BillingsUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: BillingsCreateManyDoctorInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutDoctorInput | BillingsUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutDoctorInput | BillingsUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<NoteCreateWithoutEmployeeInput, NoteUncheckedCreateWithoutEmployeeInput> | NoteCreateWithoutEmployeeInput[] | NoteUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutEmployeeInput | NoteCreateOrConnectWithoutEmployeeInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutEmployeeInput | NoteUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: NoteCreateManyEmployeeInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutEmployeeInput | NoteUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutEmployeeInput | NoteUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type InventoryTransactionUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutEmployeeInput, InventoryTransactionUncheckedCreateWithoutEmployeeInput> | InventoryTransactionCreateWithoutEmployeeInput[] | InventoryTransactionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutEmployeeInput | InventoryTransactionCreateOrConnectWithoutEmployeeInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutEmployeeInput | InventoryTransactionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: InventoryTransactionCreateManyEmployeeInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutEmployeeInput | InventoryTransactionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutEmployeeInput | InventoryTransactionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryCountUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<InventoryCountCreateWithoutEmployeeInput, InventoryCountUncheckedCreateWithoutEmployeeInput> | InventoryCountCreateWithoutEmployeeInput[] | InventoryCountUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutEmployeeInput | InventoryCountCreateOrConnectWithoutEmployeeInput[]
    upsert?: InventoryCountUpsertWithWhereUniqueWithoutEmployeeInput | InventoryCountUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: InventoryCountCreateManyEmployeeInputEnvelope
    set?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    disconnect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    delete?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    update?: InventoryCountUpdateWithWhereUniqueWithoutEmployeeInput | InventoryCountUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: InventoryCountUpdateManyWithWhereWithoutEmployeeInput | InventoryCountUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: InventoryCountScalarWhereInput | InventoryCountScalarWhereInput[]
  }

  export type PurchaseOrderUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutCreatedByInput, PurchaseOrderUncheckedCreateWithoutCreatedByInput> | PurchaseOrderCreateWithoutCreatedByInput[] | PurchaseOrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutCreatedByInput | PurchaseOrderCreateOrConnectWithoutCreatedByInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutCreatedByInput | PurchaseOrderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PurchaseOrderCreateManyCreatedByInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutCreatedByInput | PurchaseOrderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutCreatedByInput | PurchaseOrderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type PurchaseOrderUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutUpdatedByInput, PurchaseOrderUncheckedCreateWithoutUpdatedByInput> | PurchaseOrderCreateWithoutUpdatedByInput[] | PurchaseOrderUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutUpdatedByInput | PurchaseOrderCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutUpdatedByInput | PurchaseOrderUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PurchaseOrderCreateManyUpdatedByInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutUpdatedByInput | PurchaseOrderUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutUpdatedByInput | PurchaseOrderUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type PurchaseOrderUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutEmployeeInput, PurchaseOrderUncheckedCreateWithoutEmployeeInput> | PurchaseOrderCreateWithoutEmployeeInput[] | PurchaseOrderUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutEmployeeInput | PurchaseOrderCreateOrConnectWithoutEmployeeInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutEmployeeInput | PurchaseOrderUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PurchaseOrderCreateManyEmployeeInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutEmployeeInput | PurchaseOrderUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutEmployeeInput | PurchaseOrderUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type ConsultationsUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ConsultationsCreateWithoutCreatedByInput, ConsultationsUncheckedCreateWithoutCreatedByInput> | ConsultationsCreateWithoutCreatedByInput[] | ConsultationsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutCreatedByInput | ConsultationsCreateOrConnectWithoutCreatedByInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutCreatedByInput | ConsultationsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ConsultationsCreateManyCreatedByInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutCreatedByInput | ConsultationsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutCreatedByInput | ConsultationsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type ConsultationsUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ConsultationsCreateWithoutUpdatedByInput, ConsultationsUncheckedCreateWithoutUpdatedByInput> | ConsultationsCreateWithoutUpdatedByInput[] | ConsultationsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutUpdatedByInput | ConsultationsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutUpdatedByInput | ConsultationsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ConsultationsCreateManyUpdatedByInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutUpdatedByInput | ConsultationsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutUpdatedByInput | ConsultationsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type AppointmentsUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AppointmentsCreateWithoutCreatedByInput, AppointmentsUncheckedCreateWithoutCreatedByInput> | AppointmentsCreateWithoutCreatedByInput[] | AppointmentsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutCreatedByInput | AppointmentsCreateOrConnectWithoutCreatedByInput[]
    upsert?: AppointmentsUpsertWithWhereUniqueWithoutCreatedByInput | AppointmentsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AppointmentsCreateManyCreatedByInputEnvelope
    set?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    disconnect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    delete?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    update?: AppointmentsUpdateWithWhereUniqueWithoutCreatedByInput | AppointmentsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AppointmentsUpdateManyWithWhereWithoutCreatedByInput | AppointmentsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AppointmentsScalarWhereInput | AppointmentsScalarWhereInput[]
  }

  export type AppointmentsUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<AppointmentsCreateWithoutUpdatedByInput, AppointmentsUncheckedCreateWithoutUpdatedByInput> | AppointmentsCreateWithoutUpdatedByInput[] | AppointmentsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutUpdatedByInput | AppointmentsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: AppointmentsUpsertWithWhereUniqueWithoutUpdatedByInput | AppointmentsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: AppointmentsCreateManyUpdatedByInputEnvelope
    set?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    disconnect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    delete?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    update?: AppointmentsUpdateWithWhereUniqueWithoutUpdatedByInput | AppointmentsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: AppointmentsUpdateManyWithWhereWithoutUpdatedByInput | AppointmentsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: AppointmentsScalarWhereInput | AppointmentsScalarWhereInput[]
  }

  export type PatientsUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientsCreateWithoutCreatedByInput, PatientsUncheckedCreateWithoutCreatedByInput> | PatientsCreateWithoutCreatedByInput[] | PatientsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientsCreateOrConnectWithoutCreatedByInput | PatientsCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientsUpsertWithWhereUniqueWithoutCreatedByInput | PatientsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientsCreateManyCreatedByInputEnvelope
    set?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    disconnect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    delete?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    connect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    update?: PatientsUpdateWithWhereUniqueWithoutCreatedByInput | PatientsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientsUpdateManyWithWhereWithoutCreatedByInput | PatientsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientsScalarWhereInput | PatientsScalarWhereInput[]
  }

  export type PatientsUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientsCreateWithoutUpdatedByInput, PatientsUncheckedCreateWithoutUpdatedByInput> | PatientsCreateWithoutUpdatedByInput[] | PatientsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientsCreateOrConnectWithoutUpdatedByInput | PatientsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientsUpsertWithWhereUniqueWithoutUpdatedByInput | PatientsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientsCreateManyUpdatedByInputEnvelope
    set?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    disconnect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    delete?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    connect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    update?: PatientsUpdateWithWhereUniqueWithoutUpdatedByInput | PatientsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientsUpdateManyWithWhereWithoutUpdatedByInput | PatientsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientsScalarWhereInput | PatientsScalarWhereInput[]
  }

  export type PatientTriageUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientTriageCreateWithoutCreatedByInput, PatientTriageUncheckedCreateWithoutCreatedByInput> | PatientTriageCreateWithoutCreatedByInput[] | PatientTriageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientTriageCreateOrConnectWithoutCreatedByInput | PatientTriageCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientTriageUpsertWithWhereUniqueWithoutCreatedByInput | PatientTriageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientTriageCreateManyCreatedByInputEnvelope
    set?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    disconnect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    delete?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    connect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    update?: PatientTriageUpdateWithWhereUniqueWithoutCreatedByInput | PatientTriageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientTriageUpdateManyWithWhereWithoutCreatedByInput | PatientTriageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientTriageScalarWhereInput | PatientTriageScalarWhereInput[]
  }

  export type PatientTriageUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientTriageCreateWithoutUpdatedByInput, PatientTriageUncheckedCreateWithoutUpdatedByInput> | PatientTriageCreateWithoutUpdatedByInput[] | PatientTriageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientTriageCreateOrConnectWithoutUpdatedByInput | PatientTriageCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientTriageUpsertWithWhereUniqueWithoutUpdatedByInput | PatientTriageUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientTriageCreateManyUpdatedByInputEnvelope
    set?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    disconnect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    delete?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    connect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    update?: PatientTriageUpdateWithWhereUniqueWithoutUpdatedByInput | PatientTriageUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientTriageUpdateManyWithWhereWithoutUpdatedByInput | PatientTriageUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientTriageScalarWhereInput | PatientTriageScalarWhereInput[]
  }

  export type PatientAssessmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutCreatedByInput, PatientAssessmentUncheckedCreateWithoutCreatedByInput> | PatientAssessmentCreateWithoutCreatedByInput[] | PatientAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutCreatedByInput | PatientAssessmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientAssessmentUpsertWithWhereUniqueWithoutCreatedByInput | PatientAssessmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientAssessmentCreateManyCreatedByInputEnvelope
    set?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    disconnect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    delete?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    connect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    update?: PatientAssessmentUpdateWithWhereUniqueWithoutCreatedByInput | PatientAssessmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientAssessmentUpdateManyWithWhereWithoutCreatedByInput | PatientAssessmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientAssessmentScalarWhereInput | PatientAssessmentScalarWhereInput[]
  }

  export type PatientAssessmentUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutUpdatedByInput, PatientAssessmentUncheckedCreateWithoutUpdatedByInput> | PatientAssessmentCreateWithoutUpdatedByInput[] | PatientAssessmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutUpdatedByInput | PatientAssessmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientAssessmentUpsertWithWhereUniqueWithoutUpdatedByInput | PatientAssessmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientAssessmentCreateManyUpdatedByInputEnvelope
    set?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    disconnect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    delete?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    connect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    update?: PatientAssessmentUpdateWithWhereUniqueWithoutUpdatedByInput | PatientAssessmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientAssessmentUpdateManyWithWhereWithoutUpdatedByInput | PatientAssessmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientAssessmentScalarWhereInput | PatientAssessmentScalarWhereInput[]
  }

  export type PatientTreatmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutCreatedByInput, PatientTreatmentUncheckedCreateWithoutCreatedByInput> | PatientTreatmentCreateWithoutCreatedByInput[] | PatientTreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutCreatedByInput | PatientTreatmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutCreatedByInput | PatientTreatmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientTreatmentCreateManyCreatedByInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutCreatedByInput | PatientTreatmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutCreatedByInput | PatientTreatmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientTreatmentUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutUpdatedByInput, PatientTreatmentUncheckedCreateWithoutUpdatedByInput> | PatientTreatmentCreateWithoutUpdatedByInput[] | PatientTreatmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutUpdatedByInput | PatientTreatmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutUpdatedByInput | PatientTreatmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientTreatmentCreateManyUpdatedByInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutUpdatedByInput | PatientTreatmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutUpdatedByInput | PatientTreatmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientMedicationUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutUpdatedByInput, PatientMedicationUncheckedCreateWithoutUpdatedByInput> | PatientMedicationCreateWithoutUpdatedByInput[] | PatientMedicationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutUpdatedByInput | PatientMedicationCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutUpdatedByInput | PatientMedicationUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientMedicationCreateManyUpdatedByInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutUpdatedByInput | PatientMedicationUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutUpdatedByInput | PatientMedicationUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type PatientMedicationUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutCreatedByInput, PatientMedicationUncheckedCreateWithoutCreatedByInput> | PatientMedicationCreateWithoutCreatedByInput[] | PatientMedicationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutCreatedByInput | PatientMedicationCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutCreatedByInput | PatientMedicationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientMedicationCreateManyCreatedByInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutCreatedByInput | PatientMedicationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutCreatedByInput | PatientMedicationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type PatientPackageUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientPackageCreateWithoutUpdatedByInput, PatientPackageUncheckedCreateWithoutUpdatedByInput> | PatientPackageCreateWithoutUpdatedByInput[] | PatientPackageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutUpdatedByInput | PatientPackageCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutUpdatedByInput | PatientPackageUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientPackageCreateManyUpdatedByInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutUpdatedByInput | PatientPackageUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutUpdatedByInput | PatientPackageUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type PatientPackageUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientPackageCreateWithoutCreatedByInput, PatientPackageUncheckedCreateWithoutCreatedByInput> | PatientPackageCreateWithoutCreatedByInput[] | PatientPackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutCreatedByInput | PatientPackageCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutCreatedByInput | PatientPackageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientPackageCreateManyCreatedByInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutCreatedByInput | PatientPackageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutCreatedByInput | PatientPackageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type PatientItemUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientItemCreateWithoutCreatedByInput, PatientItemUncheckedCreateWithoutCreatedByInput> | PatientItemCreateWithoutCreatedByInput[] | PatientItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutCreatedByInput | PatientItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutCreatedByInput | PatientItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientItemCreateManyCreatedByInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutCreatedByInput | PatientItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutCreatedByInput | PatientItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type PatientItemUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientItemCreateWithoutUpdatedByInput, PatientItemUncheckedCreateWithoutUpdatedByInput> | PatientItemCreateWithoutUpdatedByInput[] | PatientItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutUpdatedByInput | PatientItemCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutUpdatedByInput | PatientItemUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientItemCreateManyUpdatedByInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutUpdatedByInput | PatientItemUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutUpdatedByInput | PatientItemUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type MedicineUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MedicineCreateWithoutCreatedByInput, MedicineUncheckedCreateWithoutCreatedByInput> | MedicineCreateWithoutCreatedByInput[] | MedicineUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutCreatedByInput | MedicineCreateOrConnectWithoutCreatedByInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutCreatedByInput | MedicineUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MedicineCreateManyCreatedByInputEnvelope
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutCreatedByInput | MedicineUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutCreatedByInput | MedicineUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type MedicineUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<MedicineCreateWithoutUpdatedByInput, MedicineUncheckedCreateWithoutUpdatedByInput> | MedicineCreateWithoutUpdatedByInput[] | MedicineUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutUpdatedByInput | MedicineCreateOrConnectWithoutUpdatedByInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutUpdatedByInput | MedicineUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: MedicineCreateManyUpdatedByInputEnvelope
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutUpdatedByInput | MedicineUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutUpdatedByInput | MedicineUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type ItemUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput> | ItemCreateWithoutCreatedByInput[] | ItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCreatedByInput | ItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutCreatedByInput | ItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ItemCreateManyCreatedByInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutCreatedByInput | ItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutCreatedByInput | ItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type ItemUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ItemCreateWithoutUpdatedByInput, ItemUncheckedCreateWithoutUpdatedByInput> | ItemCreateWithoutUpdatedByInput[] | ItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUpdatedByInput | ItemCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutUpdatedByInput | ItemUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ItemCreateManyUpdatedByInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutUpdatedByInput | ItemUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutUpdatedByInput | ItemUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type TreatmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput> | TreatmentCreateWithoutCreatedByInput[] | TreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCreatedByInput | TreatmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutCreatedByInput | TreatmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TreatmentCreateManyCreatedByInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutCreatedByInput | TreatmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutCreatedByInput | TreatmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type TreatmentUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<TreatmentCreateWithoutUpdatedByInput, TreatmentUncheckedCreateWithoutUpdatedByInput> | TreatmentCreateWithoutUpdatedByInput[] | TreatmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutUpdatedByInput | TreatmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutUpdatedByInput | TreatmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: TreatmentCreateManyUpdatedByInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutUpdatedByInput | TreatmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutUpdatedByInput | TreatmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type PackageUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput> | PackageCreateWithoutCreatedByInput[] | PackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCreatedByInput | PackageCreateOrConnectWithoutCreatedByInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutCreatedByInput | PackageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PackageCreateManyCreatedByInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutCreatedByInput | PackageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutCreatedByInput | PackageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type PackageUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PackageCreateWithoutUpdatedByInput, PackageUncheckedCreateWithoutUpdatedByInput> | PackageCreateWithoutUpdatedByInput[] | PackageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutUpdatedByInput | PackageCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutUpdatedByInput | PackageUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PackageCreateManyUpdatedByInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutUpdatedByInput | PackageUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutUpdatedByInput | PackageUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput> | CategoryCreateWithoutCreatedByInput[] | CategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByInput | CategoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutCreatedByInput | CategoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CategoryCreateManyCreatedByInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutCreatedByInput | CategoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutCreatedByInput | CategoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CategoryUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput> | CategoryCreateWithoutUpdatedByInput[] | CategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByInput | CategoryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUpdatedByInput | CategoryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CategoryCreateManyUpdatedByInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUpdatedByInput | CategoryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUpdatedByInput | CategoryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SupplierUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SupplierCreateWithoutCreatedByInput, SupplierUncheckedCreateWithoutCreatedByInput> | SupplierCreateWithoutCreatedByInput[] | SupplierUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutCreatedByInput | SupplierCreateOrConnectWithoutCreatedByInput[]
    upsert?: SupplierUpsertWithWhereUniqueWithoutCreatedByInput | SupplierUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SupplierCreateManyCreatedByInputEnvelope
    set?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    disconnect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    delete?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    update?: SupplierUpdateWithWhereUniqueWithoutCreatedByInput | SupplierUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SupplierUpdateManyWithWhereWithoutCreatedByInput | SupplierUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
  }

  export type SupplierUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SupplierCreateWithoutUpdatedByInput, SupplierUncheckedCreateWithoutUpdatedByInput> | SupplierCreateWithoutUpdatedByInput[] | SupplierUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutUpdatedByInput | SupplierCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SupplierUpsertWithWhereUniqueWithoutUpdatedByInput | SupplierUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SupplierCreateManyUpdatedByInputEnvelope
    set?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    disconnect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    delete?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    update?: SupplierUpdateWithWhereUniqueWithoutUpdatedByInput | SupplierUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SupplierUpdateManyWithWhereWithoutUpdatedByInput | SupplierUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
  }

  export type InventoryTransactionUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutCreatedByInput, InventoryTransactionUncheckedCreateWithoutCreatedByInput> | InventoryTransactionCreateWithoutCreatedByInput[] | InventoryTransactionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutCreatedByInput | InventoryTransactionCreateOrConnectWithoutCreatedByInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInput | InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: InventoryTransactionCreateManyCreatedByInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInput | InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutCreatedByInput | InventoryTransactionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryTransactionUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutUpdatedByInput, InventoryTransactionUncheckedCreateWithoutUpdatedByInput> | InventoryTransactionCreateWithoutUpdatedByInput[] | InventoryTransactionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutUpdatedByInput | InventoryTransactionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutUpdatedByInput | InventoryTransactionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: InventoryTransactionCreateManyUpdatedByInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutUpdatedByInput | InventoryTransactionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutUpdatedByInput | InventoryTransactionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryCountUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<InventoryCountCreateWithoutCreatedByInput, InventoryCountUncheckedCreateWithoutCreatedByInput> | InventoryCountCreateWithoutCreatedByInput[] | InventoryCountUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutCreatedByInput | InventoryCountCreateOrConnectWithoutCreatedByInput[]
    upsert?: InventoryCountUpsertWithWhereUniqueWithoutCreatedByInput | InventoryCountUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: InventoryCountCreateManyCreatedByInputEnvelope
    set?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    disconnect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    delete?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    update?: InventoryCountUpdateWithWhereUniqueWithoutCreatedByInput | InventoryCountUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: InventoryCountUpdateManyWithWhereWithoutCreatedByInput | InventoryCountUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: InventoryCountScalarWhereInput | InventoryCountScalarWhereInput[]
  }

  export type InventoryCountUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<InventoryCountCreateWithoutUpdatedByInput, InventoryCountUncheckedCreateWithoutUpdatedByInput> | InventoryCountCreateWithoutUpdatedByInput[] | InventoryCountUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutUpdatedByInput | InventoryCountCreateOrConnectWithoutUpdatedByInput[]
    upsert?: InventoryCountUpsertWithWhereUniqueWithoutUpdatedByInput | InventoryCountUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: InventoryCountCreateManyUpdatedByInputEnvelope
    set?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    disconnect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    delete?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    update?: InventoryCountUpdateWithWhereUniqueWithoutUpdatedByInput | InventoryCountUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: InventoryCountUpdateManyWithWhereWithoutUpdatedByInput | InventoryCountUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: InventoryCountScalarWhereInput | InventoryCountScalarWhereInput[]
  }

  export type InventoryCountItemUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutCreatedByInput, InventoryCountItemUncheckedCreateWithoutCreatedByInput> | InventoryCountItemCreateWithoutCreatedByInput[] | InventoryCountItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutCreatedByInput | InventoryCountItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutCreatedByInput | InventoryCountItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: InventoryCountItemCreateManyCreatedByInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutCreatedByInput | InventoryCountItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutCreatedByInput | InventoryCountItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type InventoryCountItemUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutUpdatedByInput, InventoryCountItemUncheckedCreateWithoutUpdatedByInput> | InventoryCountItemCreateWithoutUpdatedByInput[] | InventoryCountItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutUpdatedByInput | InventoryCountItemCreateOrConnectWithoutUpdatedByInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutUpdatedByInput | InventoryCountItemUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: InventoryCountItemCreateManyUpdatedByInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutUpdatedByInput | InventoryCountItemUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutUpdatedByInput | InventoryCountItemUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type BillingsUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BillingsCreateWithoutCreatedByInput, BillingsUncheckedCreateWithoutCreatedByInput> | BillingsCreateWithoutCreatedByInput[] | BillingsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutCreatedByInput | BillingsCreateOrConnectWithoutCreatedByInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutCreatedByInput | BillingsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BillingsCreateManyCreatedByInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutCreatedByInput | BillingsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutCreatedByInput | BillingsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type BillingsUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<BillingsCreateWithoutUpdatedByInput, BillingsUncheckedCreateWithoutUpdatedByInput> | BillingsCreateWithoutUpdatedByInput[] | BillingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutUpdatedByInput | BillingsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutUpdatedByInput | BillingsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: BillingsCreateManyUpdatedByInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutUpdatedByInput | BillingsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutUpdatedByInput | BillingsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput> | PaymentCreateWithoutCreatedByInput[] | PaymentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatedByInput | PaymentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCreatedByInput | PaymentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PaymentCreateManyCreatedByInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCreatedByInput | PaymentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCreatedByInput | PaymentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PaymentCreateWithoutUpdatedByInput, PaymentUncheckedCreateWithoutUpdatedByInput> | PaymentCreateWithoutUpdatedByInput[] | PaymentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUpdatedByInput | PaymentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutUpdatedByInput | PaymentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PaymentCreateManyUpdatedByInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutUpdatedByInput | PaymentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutUpdatedByInput | PaymentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ScheduleCreateWithoutCreatedByInput, ScheduleUncheckedCreateWithoutCreatedByInput> | ScheduleCreateWithoutCreatedByInput[] | ScheduleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutCreatedByInput | ScheduleCreateOrConnectWithoutCreatedByInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutCreatedByInput | ScheduleUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ScheduleCreateManyCreatedByInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutCreatedByInput | ScheduleUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutCreatedByInput | ScheduleUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ScheduleCreateWithoutUpdatedByInput, ScheduleUncheckedCreateWithoutUpdatedByInput> | ScheduleCreateWithoutUpdatedByInput[] | ScheduleUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutUpdatedByInput | ScheduleCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutUpdatedByInput | ScheduleUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ScheduleCreateManyUpdatedByInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutUpdatedByInput | ScheduleUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutUpdatedByInput | ScheduleUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput> | ScheduleCreateWithoutEmployeeInput[] | ScheduleUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutEmployeeInput | ScheduleCreateOrConnectWithoutEmployeeInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutEmployeeInput | ScheduleUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: ScheduleCreateManyEmployeeInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutEmployeeInput | ScheduleUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutEmployeeInput | ScheduleUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AppointmentsCreateWithoutDoctorInput, AppointmentsUncheckedCreateWithoutDoctorInput> | AppointmentsCreateWithoutDoctorInput[] | AppointmentsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutDoctorInput | AppointmentsCreateOrConnectWithoutDoctorInput[]
    upsert?: AppointmentsUpsertWithWhereUniqueWithoutDoctorInput | AppointmentsUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AppointmentsCreateManyDoctorInputEnvelope
    set?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    disconnect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    delete?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    update?: AppointmentsUpdateWithWhereUniqueWithoutDoctorInput | AppointmentsUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AppointmentsUpdateManyWithWhereWithoutDoctorInput | AppointmentsUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AppointmentsScalarWhereInput | AppointmentsScalarWhereInput[]
  }

  export type ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<ConsultationsCreateWithoutDoctorInput, ConsultationsUncheckedCreateWithoutDoctorInput> | ConsultationsCreateWithoutDoctorInput[] | ConsultationsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutDoctorInput | ConsultationsCreateOrConnectWithoutDoctorInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutDoctorInput | ConsultationsUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: ConsultationsCreateManyDoctorInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutDoctorInput | ConsultationsUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutDoctorInput | ConsultationsUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type BillingsUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<BillingsCreateWithoutDoctorInput, BillingsUncheckedCreateWithoutDoctorInput> | BillingsCreateWithoutDoctorInput[] | BillingsUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutDoctorInput | BillingsCreateOrConnectWithoutDoctorInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutDoctorInput | BillingsUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: BillingsCreateManyDoctorInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutDoctorInput | BillingsUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutDoctorInput | BillingsUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<NoteCreateWithoutEmployeeInput, NoteUncheckedCreateWithoutEmployeeInput> | NoteCreateWithoutEmployeeInput[] | NoteUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutEmployeeInput | NoteCreateOrConnectWithoutEmployeeInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutEmployeeInput | NoteUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: NoteCreateManyEmployeeInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutEmployeeInput | NoteUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutEmployeeInput | NoteUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutEmployeeInput, InventoryTransactionUncheckedCreateWithoutEmployeeInput> | InventoryTransactionCreateWithoutEmployeeInput[] | InventoryTransactionUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutEmployeeInput | InventoryTransactionCreateOrConnectWithoutEmployeeInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutEmployeeInput | InventoryTransactionUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: InventoryTransactionCreateManyEmployeeInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutEmployeeInput | InventoryTransactionUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutEmployeeInput | InventoryTransactionUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<InventoryCountCreateWithoutEmployeeInput, InventoryCountUncheckedCreateWithoutEmployeeInput> | InventoryCountCreateWithoutEmployeeInput[] | InventoryCountUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutEmployeeInput | InventoryCountCreateOrConnectWithoutEmployeeInput[]
    upsert?: InventoryCountUpsertWithWhereUniqueWithoutEmployeeInput | InventoryCountUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: InventoryCountCreateManyEmployeeInputEnvelope
    set?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    disconnect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    delete?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    update?: InventoryCountUpdateWithWhereUniqueWithoutEmployeeInput | InventoryCountUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: InventoryCountUpdateManyWithWhereWithoutEmployeeInput | InventoryCountUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: InventoryCountScalarWhereInput | InventoryCountScalarWhereInput[]
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutCreatedByInput, PurchaseOrderUncheckedCreateWithoutCreatedByInput> | PurchaseOrderCreateWithoutCreatedByInput[] | PurchaseOrderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutCreatedByInput | PurchaseOrderCreateOrConnectWithoutCreatedByInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutCreatedByInput | PurchaseOrderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PurchaseOrderCreateManyCreatedByInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutCreatedByInput | PurchaseOrderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutCreatedByInput | PurchaseOrderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutUpdatedByInput, PurchaseOrderUncheckedCreateWithoutUpdatedByInput> | PurchaseOrderCreateWithoutUpdatedByInput[] | PurchaseOrderUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutUpdatedByInput | PurchaseOrderCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutUpdatedByInput | PurchaseOrderUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PurchaseOrderCreateManyUpdatedByInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutUpdatedByInput | PurchaseOrderUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutUpdatedByInput | PurchaseOrderUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutEmployeeInput, PurchaseOrderUncheckedCreateWithoutEmployeeInput> | PurchaseOrderCreateWithoutEmployeeInput[] | PurchaseOrderUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutEmployeeInput | PurchaseOrderCreateOrConnectWithoutEmployeeInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutEmployeeInput | PurchaseOrderUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: PurchaseOrderCreateManyEmployeeInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutEmployeeInput | PurchaseOrderUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutEmployeeInput | PurchaseOrderUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ConsultationsCreateWithoutCreatedByInput, ConsultationsUncheckedCreateWithoutCreatedByInput> | ConsultationsCreateWithoutCreatedByInput[] | ConsultationsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutCreatedByInput | ConsultationsCreateOrConnectWithoutCreatedByInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutCreatedByInput | ConsultationsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ConsultationsCreateManyCreatedByInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutCreatedByInput | ConsultationsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutCreatedByInput | ConsultationsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ConsultationsCreateWithoutUpdatedByInput, ConsultationsUncheckedCreateWithoutUpdatedByInput> | ConsultationsCreateWithoutUpdatedByInput[] | ConsultationsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutUpdatedByInput | ConsultationsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutUpdatedByInput | ConsultationsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ConsultationsCreateManyUpdatedByInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutUpdatedByInput | ConsultationsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutUpdatedByInput | ConsultationsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AppointmentsCreateWithoutCreatedByInput, AppointmentsUncheckedCreateWithoutCreatedByInput> | AppointmentsCreateWithoutCreatedByInput[] | AppointmentsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutCreatedByInput | AppointmentsCreateOrConnectWithoutCreatedByInput[]
    upsert?: AppointmentsUpsertWithWhereUniqueWithoutCreatedByInput | AppointmentsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AppointmentsCreateManyCreatedByInputEnvelope
    set?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    disconnect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    delete?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    update?: AppointmentsUpdateWithWhereUniqueWithoutCreatedByInput | AppointmentsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AppointmentsUpdateManyWithWhereWithoutCreatedByInput | AppointmentsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AppointmentsScalarWhereInput | AppointmentsScalarWhereInput[]
  }

  export type AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<AppointmentsCreateWithoutUpdatedByInput, AppointmentsUncheckedCreateWithoutUpdatedByInput> | AppointmentsCreateWithoutUpdatedByInput[] | AppointmentsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: AppointmentsCreateOrConnectWithoutUpdatedByInput | AppointmentsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: AppointmentsUpsertWithWhereUniqueWithoutUpdatedByInput | AppointmentsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: AppointmentsCreateManyUpdatedByInputEnvelope
    set?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    disconnect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    delete?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    connect?: AppointmentsWhereUniqueInput | AppointmentsWhereUniqueInput[]
    update?: AppointmentsUpdateWithWhereUniqueWithoutUpdatedByInput | AppointmentsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: AppointmentsUpdateManyWithWhereWithoutUpdatedByInput | AppointmentsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: AppointmentsScalarWhereInput | AppointmentsScalarWhereInput[]
  }

  export type PatientsUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientsCreateWithoutCreatedByInput, PatientsUncheckedCreateWithoutCreatedByInput> | PatientsCreateWithoutCreatedByInput[] | PatientsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientsCreateOrConnectWithoutCreatedByInput | PatientsCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientsUpsertWithWhereUniqueWithoutCreatedByInput | PatientsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientsCreateManyCreatedByInputEnvelope
    set?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    disconnect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    delete?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    connect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    update?: PatientsUpdateWithWhereUniqueWithoutCreatedByInput | PatientsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientsUpdateManyWithWhereWithoutCreatedByInput | PatientsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientsScalarWhereInput | PatientsScalarWhereInput[]
  }

  export type PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientsCreateWithoutUpdatedByInput, PatientsUncheckedCreateWithoutUpdatedByInput> | PatientsCreateWithoutUpdatedByInput[] | PatientsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientsCreateOrConnectWithoutUpdatedByInput | PatientsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientsUpsertWithWhereUniqueWithoutUpdatedByInput | PatientsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientsCreateManyUpdatedByInputEnvelope
    set?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    disconnect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    delete?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    connect?: PatientsWhereUniqueInput | PatientsWhereUniqueInput[]
    update?: PatientsUpdateWithWhereUniqueWithoutUpdatedByInput | PatientsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientsUpdateManyWithWhereWithoutUpdatedByInput | PatientsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientsScalarWhereInput | PatientsScalarWhereInput[]
  }

  export type PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientTriageCreateWithoutCreatedByInput, PatientTriageUncheckedCreateWithoutCreatedByInput> | PatientTriageCreateWithoutCreatedByInput[] | PatientTriageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientTriageCreateOrConnectWithoutCreatedByInput | PatientTriageCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientTriageUpsertWithWhereUniqueWithoutCreatedByInput | PatientTriageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientTriageCreateManyCreatedByInputEnvelope
    set?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    disconnect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    delete?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    connect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    update?: PatientTriageUpdateWithWhereUniqueWithoutCreatedByInput | PatientTriageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientTriageUpdateManyWithWhereWithoutCreatedByInput | PatientTriageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientTriageScalarWhereInput | PatientTriageScalarWhereInput[]
  }

  export type PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientTriageCreateWithoutUpdatedByInput, PatientTriageUncheckedCreateWithoutUpdatedByInput> | PatientTriageCreateWithoutUpdatedByInput[] | PatientTriageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientTriageCreateOrConnectWithoutUpdatedByInput | PatientTriageCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientTriageUpsertWithWhereUniqueWithoutUpdatedByInput | PatientTriageUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientTriageCreateManyUpdatedByInputEnvelope
    set?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    disconnect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    delete?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    connect?: PatientTriageWhereUniqueInput | PatientTriageWhereUniqueInput[]
    update?: PatientTriageUpdateWithWhereUniqueWithoutUpdatedByInput | PatientTriageUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientTriageUpdateManyWithWhereWithoutUpdatedByInput | PatientTriageUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientTriageScalarWhereInput | PatientTriageScalarWhereInput[]
  }

  export type PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutCreatedByInput, PatientAssessmentUncheckedCreateWithoutCreatedByInput> | PatientAssessmentCreateWithoutCreatedByInput[] | PatientAssessmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutCreatedByInput | PatientAssessmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientAssessmentUpsertWithWhereUniqueWithoutCreatedByInput | PatientAssessmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientAssessmentCreateManyCreatedByInputEnvelope
    set?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    disconnect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    delete?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    connect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    update?: PatientAssessmentUpdateWithWhereUniqueWithoutCreatedByInput | PatientAssessmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientAssessmentUpdateManyWithWhereWithoutCreatedByInput | PatientAssessmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientAssessmentScalarWhereInput | PatientAssessmentScalarWhereInput[]
  }

  export type PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutUpdatedByInput, PatientAssessmentUncheckedCreateWithoutUpdatedByInput> | PatientAssessmentCreateWithoutUpdatedByInput[] | PatientAssessmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutUpdatedByInput | PatientAssessmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientAssessmentUpsertWithWhereUniqueWithoutUpdatedByInput | PatientAssessmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientAssessmentCreateManyUpdatedByInputEnvelope
    set?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    disconnect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    delete?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    connect?: PatientAssessmentWhereUniqueInput | PatientAssessmentWhereUniqueInput[]
    update?: PatientAssessmentUpdateWithWhereUniqueWithoutUpdatedByInput | PatientAssessmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientAssessmentUpdateManyWithWhereWithoutUpdatedByInput | PatientAssessmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientAssessmentScalarWhereInput | PatientAssessmentScalarWhereInput[]
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutCreatedByInput, PatientTreatmentUncheckedCreateWithoutCreatedByInput> | PatientTreatmentCreateWithoutCreatedByInput[] | PatientTreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutCreatedByInput | PatientTreatmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutCreatedByInput | PatientTreatmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientTreatmentCreateManyCreatedByInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutCreatedByInput | PatientTreatmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutCreatedByInput | PatientTreatmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutUpdatedByInput, PatientTreatmentUncheckedCreateWithoutUpdatedByInput> | PatientTreatmentCreateWithoutUpdatedByInput[] | PatientTreatmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutUpdatedByInput | PatientTreatmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutUpdatedByInput | PatientTreatmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientTreatmentCreateManyUpdatedByInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutUpdatedByInput | PatientTreatmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutUpdatedByInput | PatientTreatmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutUpdatedByInput, PatientMedicationUncheckedCreateWithoutUpdatedByInput> | PatientMedicationCreateWithoutUpdatedByInput[] | PatientMedicationUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutUpdatedByInput | PatientMedicationCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutUpdatedByInput | PatientMedicationUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientMedicationCreateManyUpdatedByInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutUpdatedByInput | PatientMedicationUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutUpdatedByInput | PatientMedicationUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutCreatedByInput, PatientMedicationUncheckedCreateWithoutCreatedByInput> | PatientMedicationCreateWithoutCreatedByInput[] | PatientMedicationUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutCreatedByInput | PatientMedicationCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutCreatedByInput | PatientMedicationUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientMedicationCreateManyCreatedByInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutCreatedByInput | PatientMedicationUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutCreatedByInput | PatientMedicationUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientPackageCreateWithoutUpdatedByInput, PatientPackageUncheckedCreateWithoutUpdatedByInput> | PatientPackageCreateWithoutUpdatedByInput[] | PatientPackageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutUpdatedByInput | PatientPackageCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutUpdatedByInput | PatientPackageUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientPackageCreateManyUpdatedByInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutUpdatedByInput | PatientPackageUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutUpdatedByInput | PatientPackageUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientPackageCreateWithoutCreatedByInput, PatientPackageUncheckedCreateWithoutCreatedByInput> | PatientPackageCreateWithoutCreatedByInput[] | PatientPackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutCreatedByInput | PatientPackageCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutCreatedByInput | PatientPackageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientPackageCreateManyCreatedByInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutCreatedByInput | PatientPackageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutCreatedByInput | PatientPackageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientItemCreateWithoutCreatedByInput, PatientItemUncheckedCreateWithoutCreatedByInput> | PatientItemCreateWithoutCreatedByInput[] | PatientItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutCreatedByInput | PatientItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutCreatedByInput | PatientItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientItemCreateManyCreatedByInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutCreatedByInput | PatientItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutCreatedByInput | PatientItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PatientItemCreateWithoutUpdatedByInput, PatientItemUncheckedCreateWithoutUpdatedByInput> | PatientItemCreateWithoutUpdatedByInput[] | PatientItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutUpdatedByInput | PatientItemCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutUpdatedByInput | PatientItemUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PatientItemCreateManyUpdatedByInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutUpdatedByInput | PatientItemUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutUpdatedByInput | PatientItemUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type MedicineUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<MedicineCreateWithoutCreatedByInput, MedicineUncheckedCreateWithoutCreatedByInput> | MedicineCreateWithoutCreatedByInput[] | MedicineUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutCreatedByInput | MedicineCreateOrConnectWithoutCreatedByInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutCreatedByInput | MedicineUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: MedicineCreateManyCreatedByInputEnvelope
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutCreatedByInput | MedicineUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutCreatedByInput | MedicineUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<MedicineCreateWithoutUpdatedByInput, MedicineUncheckedCreateWithoutUpdatedByInput> | MedicineCreateWithoutUpdatedByInput[] | MedicineUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutUpdatedByInput | MedicineCreateOrConnectWithoutUpdatedByInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutUpdatedByInput | MedicineUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: MedicineCreateManyUpdatedByInputEnvelope
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutUpdatedByInput | MedicineUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutUpdatedByInput | MedicineUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput> | ItemCreateWithoutCreatedByInput[] | ItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCreatedByInput | ItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutCreatedByInput | ItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ItemCreateManyCreatedByInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutCreatedByInput | ItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutCreatedByInput | ItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ItemCreateWithoutUpdatedByInput, ItemUncheckedCreateWithoutUpdatedByInput> | ItemCreateWithoutUpdatedByInput[] | ItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutUpdatedByInput | ItemCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutUpdatedByInput | ItemUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ItemCreateManyUpdatedByInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutUpdatedByInput | ItemUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutUpdatedByInput | ItemUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput> | TreatmentCreateWithoutCreatedByInput[] | TreatmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCreatedByInput | TreatmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutCreatedByInput | TreatmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TreatmentCreateManyCreatedByInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutCreatedByInput | TreatmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutCreatedByInput | TreatmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<TreatmentCreateWithoutUpdatedByInput, TreatmentUncheckedCreateWithoutUpdatedByInput> | TreatmentCreateWithoutUpdatedByInput[] | TreatmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutUpdatedByInput | TreatmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutUpdatedByInput | TreatmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: TreatmentCreateManyUpdatedByInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutUpdatedByInput | TreatmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutUpdatedByInput | TreatmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type PackageUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput> | PackageCreateWithoutCreatedByInput[] | PackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCreatedByInput | PackageCreateOrConnectWithoutCreatedByInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutCreatedByInput | PackageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PackageCreateManyCreatedByInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutCreatedByInput | PackageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutCreatedByInput | PackageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type PackageUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PackageCreateWithoutUpdatedByInput, PackageUncheckedCreateWithoutUpdatedByInput> | PackageCreateWithoutUpdatedByInput[] | PackageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutUpdatedByInput | PackageCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutUpdatedByInput | PackageUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PackageCreateManyUpdatedByInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutUpdatedByInput | PackageUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutUpdatedByInput | PackageUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput> | CategoryCreateWithoutCreatedByInput[] | CategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutCreatedByInput | CategoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutCreatedByInput | CategoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CategoryCreateManyCreatedByInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutCreatedByInput | CategoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutCreatedByInput | CategoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput> | CategoryCreateWithoutUpdatedByInput[] | CategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutUpdatedByInput | CategoryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutUpdatedByInput | CategoryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: CategoryCreateManyUpdatedByInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutUpdatedByInput | CategoryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutUpdatedByInput | CategoryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SupplierUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SupplierCreateWithoutCreatedByInput, SupplierUncheckedCreateWithoutCreatedByInput> | SupplierCreateWithoutCreatedByInput[] | SupplierUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutCreatedByInput | SupplierCreateOrConnectWithoutCreatedByInput[]
    upsert?: SupplierUpsertWithWhereUniqueWithoutCreatedByInput | SupplierUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SupplierCreateManyCreatedByInputEnvelope
    set?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    disconnect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    delete?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    update?: SupplierUpdateWithWhereUniqueWithoutCreatedByInput | SupplierUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SupplierUpdateManyWithWhereWithoutCreatedByInput | SupplierUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
  }

  export type SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SupplierCreateWithoutUpdatedByInput, SupplierUncheckedCreateWithoutUpdatedByInput> | SupplierCreateWithoutUpdatedByInput[] | SupplierUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SupplierCreateOrConnectWithoutUpdatedByInput | SupplierCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SupplierUpsertWithWhereUniqueWithoutUpdatedByInput | SupplierUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SupplierCreateManyUpdatedByInputEnvelope
    set?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    disconnect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    delete?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    connect?: SupplierWhereUniqueInput | SupplierWhereUniqueInput[]
    update?: SupplierUpdateWithWhereUniqueWithoutUpdatedByInput | SupplierUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SupplierUpdateManyWithWhereWithoutUpdatedByInput | SupplierUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutCreatedByInput, InventoryTransactionUncheckedCreateWithoutCreatedByInput> | InventoryTransactionCreateWithoutCreatedByInput[] | InventoryTransactionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutCreatedByInput | InventoryTransactionCreateOrConnectWithoutCreatedByInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInput | InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: InventoryTransactionCreateManyCreatedByInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInput | InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutCreatedByInput | InventoryTransactionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutUpdatedByInput, InventoryTransactionUncheckedCreateWithoutUpdatedByInput> | InventoryTransactionCreateWithoutUpdatedByInput[] | InventoryTransactionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutUpdatedByInput | InventoryTransactionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutUpdatedByInput | InventoryTransactionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: InventoryTransactionCreateManyUpdatedByInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutUpdatedByInput | InventoryTransactionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutUpdatedByInput | InventoryTransactionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<InventoryCountCreateWithoutCreatedByInput, InventoryCountUncheckedCreateWithoutCreatedByInput> | InventoryCountCreateWithoutCreatedByInput[] | InventoryCountUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutCreatedByInput | InventoryCountCreateOrConnectWithoutCreatedByInput[]
    upsert?: InventoryCountUpsertWithWhereUniqueWithoutCreatedByInput | InventoryCountUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: InventoryCountCreateManyCreatedByInputEnvelope
    set?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    disconnect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    delete?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    update?: InventoryCountUpdateWithWhereUniqueWithoutCreatedByInput | InventoryCountUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: InventoryCountUpdateManyWithWhereWithoutCreatedByInput | InventoryCountUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: InventoryCountScalarWhereInput | InventoryCountScalarWhereInput[]
  }

  export type InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<InventoryCountCreateWithoutUpdatedByInput, InventoryCountUncheckedCreateWithoutUpdatedByInput> | InventoryCountCreateWithoutUpdatedByInput[] | InventoryCountUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryCountCreateOrConnectWithoutUpdatedByInput | InventoryCountCreateOrConnectWithoutUpdatedByInput[]
    upsert?: InventoryCountUpsertWithWhereUniqueWithoutUpdatedByInput | InventoryCountUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: InventoryCountCreateManyUpdatedByInputEnvelope
    set?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    disconnect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    delete?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    connect?: InventoryCountWhereUniqueInput | InventoryCountWhereUniqueInput[]
    update?: InventoryCountUpdateWithWhereUniqueWithoutUpdatedByInput | InventoryCountUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: InventoryCountUpdateManyWithWhereWithoutUpdatedByInput | InventoryCountUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: InventoryCountScalarWhereInput | InventoryCountScalarWhereInput[]
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutCreatedByInput, InventoryCountItemUncheckedCreateWithoutCreatedByInput> | InventoryCountItemCreateWithoutCreatedByInput[] | InventoryCountItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutCreatedByInput | InventoryCountItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutCreatedByInput | InventoryCountItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: InventoryCountItemCreateManyCreatedByInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutCreatedByInput | InventoryCountItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutCreatedByInput | InventoryCountItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutUpdatedByInput, InventoryCountItemUncheckedCreateWithoutUpdatedByInput> | InventoryCountItemCreateWithoutUpdatedByInput[] | InventoryCountItemUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutUpdatedByInput | InventoryCountItemCreateOrConnectWithoutUpdatedByInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutUpdatedByInput | InventoryCountItemUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: InventoryCountItemCreateManyUpdatedByInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutUpdatedByInput | InventoryCountItemUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutUpdatedByInput | InventoryCountItemUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type BillingsUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<BillingsCreateWithoutCreatedByInput, BillingsUncheckedCreateWithoutCreatedByInput> | BillingsCreateWithoutCreatedByInput[] | BillingsUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutCreatedByInput | BillingsCreateOrConnectWithoutCreatedByInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutCreatedByInput | BillingsUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: BillingsCreateManyCreatedByInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutCreatedByInput | BillingsUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutCreatedByInput | BillingsUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<BillingsCreateWithoutUpdatedByInput, BillingsUncheckedCreateWithoutUpdatedByInput> | BillingsCreateWithoutUpdatedByInput[] | BillingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutUpdatedByInput | BillingsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutUpdatedByInput | BillingsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: BillingsCreateManyUpdatedByInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutUpdatedByInput | BillingsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutUpdatedByInput | BillingsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput> | PaymentCreateWithoutCreatedByInput[] | PaymentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatedByInput | PaymentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCreatedByInput | PaymentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PaymentCreateManyCreatedByInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCreatedByInput | PaymentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCreatedByInput | PaymentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PaymentCreateWithoutUpdatedByInput, PaymentUncheckedCreateWithoutUpdatedByInput> | PaymentCreateWithoutUpdatedByInput[] | PaymentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUpdatedByInput | PaymentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutUpdatedByInput | PaymentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PaymentCreateManyUpdatedByInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutUpdatedByInput | PaymentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutUpdatedByInput | PaymentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ScheduleCreateWithoutCreatedByInput, ScheduleUncheckedCreateWithoutCreatedByInput> | ScheduleCreateWithoutCreatedByInput[] | ScheduleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutCreatedByInput | ScheduleCreateOrConnectWithoutCreatedByInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutCreatedByInput | ScheduleUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ScheduleCreateManyCreatedByInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutCreatedByInput | ScheduleUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutCreatedByInput | ScheduleUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ScheduleCreateWithoutUpdatedByInput, ScheduleUncheckedCreateWithoutUpdatedByInput> | ScheduleCreateWithoutUpdatedByInput[] | ScheduleUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutUpdatedByInput | ScheduleCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutUpdatedByInput | ScheduleUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ScheduleCreateManyUpdatedByInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutUpdatedByInput | ScheduleUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutUpdatedByInput | ScheduleUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type EmployeeCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<EmployeeCreateWithoutSchedulesInput, EmployeeUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSchedulesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCreatedSchedulesInput = {
    create?: XOR<EmployeeCreateWithoutCreatedSchedulesInput, EmployeeUncheckedCreateWithoutCreatedSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedSchedulesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedSchedulesInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedSchedulesInput, EmployeeUncheckedCreateWithoutUpdatedSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedSchedulesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<EmployeeCreateWithoutSchedulesInput, EmployeeUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutSchedulesInput
    upsert?: EmployeeUpsertWithoutSchedulesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutSchedulesInput, EmployeeUpdateWithoutSchedulesInput>, EmployeeUncheckedUpdateWithoutSchedulesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedSchedulesNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedSchedulesInput, EmployeeUncheckedCreateWithoutCreatedSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedSchedulesInput
    upsert?: EmployeeUpsertWithoutCreatedSchedulesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedSchedulesInput, EmployeeUpdateWithoutCreatedSchedulesInput>, EmployeeUncheckedUpdateWithoutCreatedSchedulesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedSchedulesNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedSchedulesInput, EmployeeUncheckedCreateWithoutUpdatedSchedulesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedSchedulesInput
    upsert?: EmployeeUpsertWithoutUpdatedSchedulesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedSchedulesInput, EmployeeUpdateWithoutUpdatedSchedulesInput>, EmployeeUncheckedUpdateWithoutUpdatedSchedulesInput>
  }

  export type BillingsCreateNestedManyWithoutPatientInput = {
    create?: XOR<BillingsCreateWithoutPatientInput, BillingsUncheckedCreateWithoutPatientInput> | BillingsCreateWithoutPatientInput[] | BillingsUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientInput | BillingsCreateOrConnectWithoutPatientInput[]
    createMany?: BillingsCreateManyPatientInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type ConsultationsCreateNestedManyWithoutPatientInput = {
    create?: XOR<ConsultationsCreateWithoutPatientInput, ConsultationsUncheckedCreateWithoutPatientInput> | ConsultationsCreateWithoutPatientInput[] | ConsultationsUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientInput | ConsultationsCreateOrConnectWithoutPatientInput[]
    createMany?: ConsultationsCreateManyPatientInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedPatientsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientsInput, EmployeeUncheckedCreateWithoutCreatedPatientsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPatientsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientsInput, EmployeeUncheckedCreateWithoutUpdatedPatientsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type BillingsUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<BillingsCreateWithoutPatientInput, BillingsUncheckedCreateWithoutPatientInput> | BillingsCreateWithoutPatientInput[] | BillingsUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientInput | BillingsCreateOrConnectWithoutPatientInput[]
    createMany?: BillingsCreateManyPatientInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type ConsultationsUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ConsultationsCreateWithoutPatientInput, ConsultationsUncheckedCreateWithoutPatientInput> | ConsultationsCreateWithoutPatientInput[] | ConsultationsUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientInput | ConsultationsCreateOrConnectWithoutPatientInput[]
    createMany?: ConsultationsCreateManyPatientInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type BillingsUpdateManyWithoutPatientNestedInput = {
    create?: XOR<BillingsCreateWithoutPatientInput, BillingsUncheckedCreateWithoutPatientInput> | BillingsCreateWithoutPatientInput[] | BillingsUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientInput | BillingsCreateOrConnectWithoutPatientInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutPatientInput | BillingsUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: BillingsCreateManyPatientInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutPatientInput | BillingsUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutPatientInput | BillingsUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type ConsultationsUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ConsultationsCreateWithoutPatientInput, ConsultationsUncheckedCreateWithoutPatientInput> | ConsultationsCreateWithoutPatientInput[] | ConsultationsUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientInput | ConsultationsCreateOrConnectWithoutPatientInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutPatientInput | ConsultationsUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ConsultationsCreateManyPatientInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutPatientInput | ConsultationsUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutPatientInput | ConsultationsUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPatientsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientsInput, EmployeeUncheckedCreateWithoutCreatedPatientsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientsInput
    upsert?: EmployeeUpsertWithoutCreatedPatientsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPatientsInput, EmployeeUpdateWithoutCreatedPatientsInput>, EmployeeUncheckedUpdateWithoutCreatedPatientsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPatientsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientsInput, EmployeeUncheckedCreateWithoutUpdatedPatientsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientsInput
    upsert?: EmployeeUpsertWithoutUpdatedPatientsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPatientsInput, EmployeeUpdateWithoutUpdatedPatientsInput>, EmployeeUncheckedUpdateWithoutUpdatedPatientsInput>
  }

  export type BillingsUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<BillingsCreateWithoutPatientInput, BillingsUncheckedCreateWithoutPatientInput> | BillingsCreateWithoutPatientInput[] | BillingsUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientInput | BillingsCreateOrConnectWithoutPatientInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutPatientInput | BillingsUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: BillingsCreateManyPatientInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutPatientInput | BillingsUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutPatientInput | BillingsUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type ConsultationsUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ConsultationsCreateWithoutPatientInput, ConsultationsUncheckedCreateWithoutPatientInput> | ConsultationsCreateWithoutPatientInput[] | ConsultationsUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientInput | ConsultationsCreateOrConnectWithoutPatientInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutPatientInput | ConsultationsUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ConsultationsCreateManyPatientInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutPatientInput | ConsultationsUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutPatientInput | ConsultationsUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedConsultationsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedConsultationsInput, EmployeeUncheckedCreateWithoutCreatedConsultationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedConsultationsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedConsultationsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedConsultationsInput, EmployeeUncheckedCreateWithoutUpdatedConsultationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedConsultationsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutConsultationsInput = {
    create?: XOR<EmployeeCreateWithoutConsultationsInput, EmployeeUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutConsultationsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PatientsCreateNestedOneWithoutConsultationsInput = {
    create?: XOR<PatientsCreateWithoutConsultationsInput, PatientsUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: PatientsCreateOrConnectWithoutConsultationsInput
    connect?: PatientsWhereUniqueInput
  }

  export type PatientAssessmentCreateNestedOneWithoutConsultationsInput = {
    create?: XOR<PatientAssessmentCreateWithoutConsultationsInput, PatientAssessmentUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutConsultationsInput
    connect?: PatientAssessmentWhereUniqueInput
  }

  export type PatientTriageCreateNestedOneWithoutConsultationsInput = {
    create?: XOR<PatientTriageCreateWithoutConsultationsInput, PatientTriageUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: PatientTriageCreateOrConnectWithoutConsultationsInput
    connect?: PatientTriageWhereUniqueInput
  }

  export type BillingsCreateNestedManyWithoutConsultationInput = {
    create?: XOR<BillingsCreateWithoutConsultationInput, BillingsUncheckedCreateWithoutConsultationInput> | BillingsCreateWithoutConsultationInput[] | BillingsUncheckedCreateWithoutConsultationInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutConsultationInput | BillingsCreateOrConnectWithoutConsultationInput[]
    createMany?: BillingsCreateManyConsultationInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type BillingsUncheckedCreateNestedManyWithoutConsultationInput = {
    create?: XOR<BillingsCreateWithoutConsultationInput, BillingsUncheckedCreateWithoutConsultationInput> | BillingsCreateWithoutConsultationInput[] | BillingsUncheckedCreateWithoutConsultationInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutConsultationInput | BillingsCreateOrConnectWithoutConsultationInput[]
    createMany?: BillingsCreateManyConsultationInputEnvelope
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedConsultationsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedConsultationsInput, EmployeeUncheckedCreateWithoutCreatedConsultationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedConsultationsInput
    upsert?: EmployeeUpsertWithoutCreatedConsultationsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedConsultationsInput, EmployeeUpdateWithoutCreatedConsultationsInput>, EmployeeUncheckedUpdateWithoutCreatedConsultationsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedConsultationsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedConsultationsInput, EmployeeUncheckedCreateWithoutUpdatedConsultationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedConsultationsInput
    upsert?: EmployeeUpsertWithoutUpdatedConsultationsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedConsultationsInput, EmployeeUpdateWithoutUpdatedConsultationsInput>, EmployeeUncheckedUpdateWithoutUpdatedConsultationsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutConsultationsNestedInput = {
    create?: XOR<EmployeeCreateWithoutConsultationsInput, EmployeeUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutConsultationsInput
    upsert?: EmployeeUpsertWithoutConsultationsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutConsultationsInput, EmployeeUpdateWithoutConsultationsInput>, EmployeeUncheckedUpdateWithoutConsultationsInput>
  }

  export type PatientsUpdateOneWithoutConsultationsNestedInput = {
    create?: XOR<PatientsCreateWithoutConsultationsInput, PatientsUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: PatientsCreateOrConnectWithoutConsultationsInput
    upsert?: PatientsUpsertWithoutConsultationsInput
    disconnect?: PatientsWhereInput | boolean
    delete?: PatientsWhereInput | boolean
    connect?: PatientsWhereUniqueInput
    update?: XOR<XOR<PatientsUpdateToOneWithWhereWithoutConsultationsInput, PatientsUpdateWithoutConsultationsInput>, PatientsUncheckedUpdateWithoutConsultationsInput>
  }

  export type PatientAssessmentUpdateOneWithoutConsultationsNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutConsultationsInput, PatientAssessmentUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutConsultationsInput
    upsert?: PatientAssessmentUpsertWithoutConsultationsInput
    disconnect?: PatientAssessmentWhereInput | boolean
    delete?: PatientAssessmentWhereInput | boolean
    connect?: PatientAssessmentWhereUniqueInput
    update?: XOR<XOR<PatientAssessmentUpdateToOneWithWhereWithoutConsultationsInput, PatientAssessmentUpdateWithoutConsultationsInput>, PatientAssessmentUncheckedUpdateWithoutConsultationsInput>
  }

  export type PatientTriageUpdateOneWithoutConsultationsNestedInput = {
    create?: XOR<PatientTriageCreateWithoutConsultationsInput, PatientTriageUncheckedCreateWithoutConsultationsInput>
    connectOrCreate?: PatientTriageCreateOrConnectWithoutConsultationsInput
    upsert?: PatientTriageUpsertWithoutConsultationsInput
    disconnect?: PatientTriageWhereInput | boolean
    delete?: PatientTriageWhereInput | boolean
    connect?: PatientTriageWhereUniqueInput
    update?: XOR<XOR<PatientTriageUpdateToOneWithWhereWithoutConsultationsInput, PatientTriageUpdateWithoutConsultationsInput>, PatientTriageUncheckedUpdateWithoutConsultationsInput>
  }

  export type BillingsUpdateManyWithoutConsultationNestedInput = {
    create?: XOR<BillingsCreateWithoutConsultationInput, BillingsUncheckedCreateWithoutConsultationInput> | BillingsCreateWithoutConsultationInput[] | BillingsUncheckedCreateWithoutConsultationInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutConsultationInput | BillingsCreateOrConnectWithoutConsultationInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutConsultationInput | BillingsUpsertWithWhereUniqueWithoutConsultationInput[]
    createMany?: BillingsCreateManyConsultationInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutConsultationInput | BillingsUpdateWithWhereUniqueWithoutConsultationInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutConsultationInput | BillingsUpdateManyWithWhereWithoutConsultationInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type BillingsUncheckedUpdateManyWithoutConsultationNestedInput = {
    create?: XOR<BillingsCreateWithoutConsultationInput, BillingsUncheckedCreateWithoutConsultationInput> | BillingsCreateWithoutConsultationInput[] | BillingsUncheckedCreateWithoutConsultationInput[]
    connectOrCreate?: BillingsCreateOrConnectWithoutConsultationInput | BillingsCreateOrConnectWithoutConsultationInput[]
    upsert?: BillingsUpsertWithWhereUniqueWithoutConsultationInput | BillingsUpsertWithWhereUniqueWithoutConsultationInput[]
    createMany?: BillingsCreateManyConsultationInputEnvelope
    set?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    disconnect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    delete?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    connect?: BillingsWhereUniqueInput | BillingsWhereUniqueInput[]
    update?: BillingsUpdateWithWhereUniqueWithoutConsultationInput | BillingsUpdateWithWhereUniqueWithoutConsultationInput[]
    updateMany?: BillingsUpdateManyWithWhereWithoutConsultationInput | BillingsUpdateManyWithWhereWithoutConsultationInput[]
    deleteMany?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
  }

  export type EmployeeCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<EmployeeCreateWithoutAppointmentsInput, EmployeeUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAppointmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCreatedAppointmentsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedAppointmentsInput, EmployeeUncheckedCreateWithoutCreatedAppointmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedAppointmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedAppointmentsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedAppointmentsInput, EmployeeUncheckedCreateWithoutUpdatedAppointmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedAppointmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutAppointmentsInput, EmployeeUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutAppointmentsInput
    upsert?: EmployeeUpsertWithoutAppointmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutAppointmentsInput, EmployeeUpdateWithoutAppointmentsInput>, EmployeeUncheckedUpdateWithoutAppointmentsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedAppointmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedAppointmentsInput, EmployeeUncheckedCreateWithoutCreatedAppointmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedAppointmentsInput
    upsert?: EmployeeUpsertWithoutCreatedAppointmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedAppointmentsInput, EmployeeUpdateWithoutCreatedAppointmentsInput>, EmployeeUncheckedUpdateWithoutCreatedAppointmentsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedAppointmentsInput, EmployeeUncheckedCreateWithoutUpdatedAppointmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedAppointmentsInput
    upsert?: EmployeeUpsertWithoutUpdatedAppointmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedAppointmentsInput, EmployeeUpdateWithoutUpdatedAppointmentsInput>, EmployeeUncheckedUpdateWithoutUpdatedAppointmentsInput>
  }

  export type AvailabilityCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AvailabilityCreateWithoutDoctorInput, AvailabilityUncheckedCreateWithoutDoctorInput> | AvailabilityCreateWithoutDoctorInput[] | AvailabilityUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AvailabilityCreateOrConnectWithoutDoctorInput | AvailabilityCreateOrConnectWithoutDoctorInput[]
    createMany?: AvailabilityCreateManyDoctorInputEnvelope
    connect?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
  }

  export type AvailabilityUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AvailabilityCreateWithoutDoctorInput, AvailabilityUncheckedCreateWithoutDoctorInput> | AvailabilityCreateWithoutDoctorInput[] | AvailabilityUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AvailabilityCreateOrConnectWithoutDoctorInput | AvailabilityCreateOrConnectWithoutDoctorInput[]
    createMany?: AvailabilityCreateManyDoctorInputEnvelope
    connect?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
  }

  export type AvailabilityUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AvailabilityCreateWithoutDoctorInput, AvailabilityUncheckedCreateWithoutDoctorInput> | AvailabilityCreateWithoutDoctorInput[] | AvailabilityUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AvailabilityCreateOrConnectWithoutDoctorInput | AvailabilityCreateOrConnectWithoutDoctorInput[]
    upsert?: AvailabilityUpsertWithWhereUniqueWithoutDoctorInput | AvailabilityUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AvailabilityCreateManyDoctorInputEnvelope
    set?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
    disconnect?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
    delete?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
    connect?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
    update?: AvailabilityUpdateWithWhereUniqueWithoutDoctorInput | AvailabilityUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AvailabilityUpdateManyWithWhereWithoutDoctorInput | AvailabilityUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AvailabilityScalarWhereInput | AvailabilityScalarWhereInput[]
  }

  export type AvailabilityUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AvailabilityCreateWithoutDoctorInput, AvailabilityUncheckedCreateWithoutDoctorInput> | AvailabilityCreateWithoutDoctorInput[] | AvailabilityUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AvailabilityCreateOrConnectWithoutDoctorInput | AvailabilityCreateOrConnectWithoutDoctorInput[]
    upsert?: AvailabilityUpsertWithWhereUniqueWithoutDoctorInput | AvailabilityUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AvailabilityCreateManyDoctorInputEnvelope
    set?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
    disconnect?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
    delete?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
    connect?: AvailabilityWhereUniqueInput | AvailabilityWhereUniqueInput[]
    update?: AvailabilityUpdateWithWhereUniqueWithoutDoctorInput | AvailabilityUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AvailabilityUpdateManyWithWhereWithoutDoctorInput | AvailabilityUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AvailabilityScalarWhereInput | AvailabilityScalarWhereInput[]
  }

  export type DoctorsCreateNestedOneWithoutAvaialabilityInput = {
    create?: XOR<DoctorsCreateWithoutAvaialabilityInput, DoctorsUncheckedCreateWithoutAvaialabilityInput>
    connectOrCreate?: DoctorsCreateOrConnectWithoutAvaialabilityInput
    connect?: DoctorsWhereUniqueInput
  }

  export type DoctorsUpdateOneRequiredWithoutAvaialabilityNestedInput = {
    create?: XOR<DoctorsCreateWithoutAvaialabilityInput, DoctorsUncheckedCreateWithoutAvaialabilityInput>
    connectOrCreate?: DoctorsCreateOrConnectWithoutAvaialabilityInput
    upsert?: DoctorsUpsertWithoutAvaialabilityInput
    connect?: DoctorsWhereUniqueInput
    update?: XOR<XOR<DoctorsUpdateToOneWithWhereWithoutAvaialabilityInput, DoctorsUpdateWithoutAvaialabilityInput>, DoctorsUncheckedUpdateWithoutAvaialabilityInput>
  }

  export type TriageAllergyCreateNestedManyWithoutAllergyInput = {
    create?: XOR<TriageAllergyCreateWithoutAllergyInput, TriageAllergyUncheckedCreateWithoutAllergyInput> | TriageAllergyCreateWithoutAllergyInput[] | TriageAllergyUncheckedCreateWithoutAllergyInput[]
    connectOrCreate?: TriageAllergyCreateOrConnectWithoutAllergyInput | TriageAllergyCreateOrConnectWithoutAllergyInput[]
    createMany?: TriageAllergyCreateManyAllergyInputEnvelope
    connect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
  }

  export type TriageAllergyUncheckedCreateNestedManyWithoutAllergyInput = {
    create?: XOR<TriageAllergyCreateWithoutAllergyInput, TriageAllergyUncheckedCreateWithoutAllergyInput> | TriageAllergyCreateWithoutAllergyInput[] | TriageAllergyUncheckedCreateWithoutAllergyInput[]
    connectOrCreate?: TriageAllergyCreateOrConnectWithoutAllergyInput | TriageAllergyCreateOrConnectWithoutAllergyInput[]
    createMany?: TriageAllergyCreateManyAllergyInputEnvelope
    connect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
  }

  export type TriageAllergyUpdateManyWithoutAllergyNestedInput = {
    create?: XOR<TriageAllergyCreateWithoutAllergyInput, TriageAllergyUncheckedCreateWithoutAllergyInput> | TriageAllergyCreateWithoutAllergyInput[] | TriageAllergyUncheckedCreateWithoutAllergyInput[]
    connectOrCreate?: TriageAllergyCreateOrConnectWithoutAllergyInput | TriageAllergyCreateOrConnectWithoutAllergyInput[]
    upsert?: TriageAllergyUpsertWithWhereUniqueWithoutAllergyInput | TriageAllergyUpsertWithWhereUniqueWithoutAllergyInput[]
    createMany?: TriageAllergyCreateManyAllergyInputEnvelope
    set?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    disconnect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    delete?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    connect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    update?: TriageAllergyUpdateWithWhereUniqueWithoutAllergyInput | TriageAllergyUpdateWithWhereUniqueWithoutAllergyInput[]
    updateMany?: TriageAllergyUpdateManyWithWhereWithoutAllergyInput | TriageAllergyUpdateManyWithWhereWithoutAllergyInput[]
    deleteMany?: TriageAllergyScalarWhereInput | TriageAllergyScalarWhereInput[]
  }

  export type TriageAllergyUncheckedUpdateManyWithoutAllergyNestedInput = {
    create?: XOR<TriageAllergyCreateWithoutAllergyInput, TriageAllergyUncheckedCreateWithoutAllergyInput> | TriageAllergyCreateWithoutAllergyInput[] | TriageAllergyUncheckedCreateWithoutAllergyInput[]
    connectOrCreate?: TriageAllergyCreateOrConnectWithoutAllergyInput | TriageAllergyCreateOrConnectWithoutAllergyInput[]
    upsert?: TriageAllergyUpsertWithWhereUniqueWithoutAllergyInput | TriageAllergyUpsertWithWhereUniqueWithoutAllergyInput[]
    createMany?: TriageAllergyCreateManyAllergyInputEnvelope
    set?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    disconnect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    delete?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    connect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    update?: TriageAllergyUpdateWithWhereUniqueWithoutAllergyInput | TriageAllergyUpdateWithWhereUniqueWithoutAllergyInput[]
    updateMany?: TriageAllergyUpdateManyWithWhereWithoutAllergyInput | TriageAllergyUpdateManyWithWhereWithoutAllergyInput[]
    deleteMany?: TriageAllergyScalarWhereInput | TriageAllergyScalarWhereInput[]
  }

  export type PatientTriageCreateNestedOneWithoutAllergiesInput = {
    create?: XOR<PatientTriageCreateWithoutAllergiesInput, PatientTriageUncheckedCreateWithoutAllergiesInput>
    connectOrCreate?: PatientTriageCreateOrConnectWithoutAllergiesInput
    connect?: PatientTriageWhereUniqueInput
  }

  export type AllergyCreateNestedOneWithoutTriageAllergyInput = {
    create?: XOR<AllergyCreateWithoutTriageAllergyInput, AllergyUncheckedCreateWithoutTriageAllergyInput>
    connectOrCreate?: AllergyCreateOrConnectWithoutTriageAllergyInput
    connect?: AllergyWhereUniqueInput
  }

  export type PatientTriageUpdateOneWithoutAllergiesNestedInput = {
    create?: XOR<PatientTriageCreateWithoutAllergiesInput, PatientTriageUncheckedCreateWithoutAllergiesInput>
    connectOrCreate?: PatientTriageCreateOrConnectWithoutAllergiesInput
    upsert?: PatientTriageUpsertWithoutAllergiesInput
    disconnect?: PatientTriageWhereInput | boolean
    delete?: PatientTriageWhereInput | boolean
    connect?: PatientTriageWhereUniqueInput
    update?: XOR<XOR<PatientTriageUpdateToOneWithWhereWithoutAllergiesInput, PatientTriageUpdateWithoutAllergiesInput>, PatientTriageUncheckedUpdateWithoutAllergiesInput>
  }

  export type AllergyUpdateOneWithoutTriageAllergyNestedInput = {
    create?: XOR<AllergyCreateWithoutTriageAllergyInput, AllergyUncheckedCreateWithoutTriageAllergyInput>
    connectOrCreate?: AllergyCreateOrConnectWithoutTriageAllergyInput
    upsert?: AllergyUpsertWithoutTriageAllergyInput
    disconnect?: AllergyWhereInput | boolean
    delete?: AllergyWhereInput | boolean
    connect?: AllergyWhereUniqueInput
    update?: XOR<XOR<AllergyUpdateToOneWithWhereWithoutTriageAllergyInput, AllergyUpdateWithoutTriageAllergyInput>, AllergyUncheckedUpdateWithoutTriageAllergyInput>
  }

  export type TriageProblemCreateNestedManyWithoutProblemInput = {
    create?: XOR<TriageProblemCreateWithoutProblemInput, TriageProblemUncheckedCreateWithoutProblemInput> | TriageProblemCreateWithoutProblemInput[] | TriageProblemUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TriageProblemCreateOrConnectWithoutProblemInput | TriageProblemCreateOrConnectWithoutProblemInput[]
    createMany?: TriageProblemCreateManyProblemInputEnvelope
    connect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
  }

  export type TriageProblemUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<TriageProblemCreateWithoutProblemInput, TriageProblemUncheckedCreateWithoutProblemInput> | TriageProblemCreateWithoutProblemInput[] | TriageProblemUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TriageProblemCreateOrConnectWithoutProblemInput | TriageProblemCreateOrConnectWithoutProblemInput[]
    createMany?: TriageProblemCreateManyProblemInputEnvelope
    connect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
  }

  export type TriageProblemUpdateManyWithoutProblemNestedInput = {
    create?: XOR<TriageProblemCreateWithoutProblemInput, TriageProblemUncheckedCreateWithoutProblemInput> | TriageProblemCreateWithoutProblemInput[] | TriageProblemUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TriageProblemCreateOrConnectWithoutProblemInput | TriageProblemCreateOrConnectWithoutProblemInput[]
    upsert?: TriageProblemUpsertWithWhereUniqueWithoutProblemInput | TriageProblemUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: TriageProblemCreateManyProblemInputEnvelope
    set?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    disconnect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    delete?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    connect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    update?: TriageProblemUpdateWithWhereUniqueWithoutProblemInput | TriageProblemUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: TriageProblemUpdateManyWithWhereWithoutProblemInput | TriageProblemUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: TriageProblemScalarWhereInput | TriageProblemScalarWhereInput[]
  }

  export type TriageProblemUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<TriageProblemCreateWithoutProblemInput, TriageProblemUncheckedCreateWithoutProblemInput> | TriageProblemCreateWithoutProblemInput[] | TriageProblemUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: TriageProblemCreateOrConnectWithoutProblemInput | TriageProblemCreateOrConnectWithoutProblemInput[]
    upsert?: TriageProblemUpsertWithWhereUniqueWithoutProblemInput | TriageProblemUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: TriageProblemCreateManyProblemInputEnvelope
    set?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    disconnect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    delete?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    connect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    update?: TriageProblemUpdateWithWhereUniqueWithoutProblemInput | TriageProblemUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: TriageProblemUpdateManyWithWhereWithoutProblemInput | TriageProblemUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: TriageProblemScalarWhereInput | TriageProblemScalarWhereInput[]
  }

  export type PatientTriageCreateNestedOneWithoutProblemsInput = {
    create?: XOR<PatientTriageCreateWithoutProblemsInput, PatientTriageUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: PatientTriageCreateOrConnectWithoutProblemsInput
    connect?: PatientTriageWhereUniqueInput
  }

  export type ProblemCreateNestedOneWithoutTriageProblemInput = {
    create?: XOR<ProblemCreateWithoutTriageProblemInput, ProblemUncheckedCreateWithoutTriageProblemInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutTriageProblemInput
    connect?: ProblemWhereUniqueInput
  }

  export type PatientTriageUpdateOneWithoutProblemsNestedInput = {
    create?: XOR<PatientTriageCreateWithoutProblemsInput, PatientTriageUncheckedCreateWithoutProblemsInput>
    connectOrCreate?: PatientTriageCreateOrConnectWithoutProblemsInput
    upsert?: PatientTriageUpsertWithoutProblemsInput
    disconnect?: PatientTriageWhereInput | boolean
    delete?: PatientTriageWhereInput | boolean
    connect?: PatientTriageWhereUniqueInput
    update?: XOR<XOR<PatientTriageUpdateToOneWithWhereWithoutProblemsInput, PatientTriageUpdateWithoutProblemsInput>, PatientTriageUncheckedUpdateWithoutProblemsInput>
  }

  export type ProblemUpdateOneWithoutTriageProblemNestedInput = {
    create?: XOR<ProblemCreateWithoutTriageProblemInput, ProblemUncheckedCreateWithoutTriageProblemInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutTriageProblemInput
    upsert?: ProblemUpsertWithoutTriageProblemInput
    disconnect?: ProblemWhereInput | boolean
    delete?: ProblemWhereInput | boolean
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutTriageProblemInput, ProblemUpdateWithoutTriageProblemInput>, ProblemUncheckedUpdateWithoutTriageProblemInput>
  }

  export type TriageProblemCreateNestedManyWithoutPatientTriageInput = {
    create?: XOR<TriageProblemCreateWithoutPatientTriageInput, TriageProblemUncheckedCreateWithoutPatientTriageInput> | TriageProblemCreateWithoutPatientTriageInput[] | TriageProblemUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: TriageProblemCreateOrConnectWithoutPatientTriageInput | TriageProblemCreateOrConnectWithoutPatientTriageInput[]
    createMany?: TriageProblemCreateManyPatientTriageInputEnvelope
    connect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
  }

  export type TriageAllergyCreateNestedManyWithoutPatientTriageInput = {
    create?: XOR<TriageAllergyCreateWithoutPatientTriageInput, TriageAllergyUncheckedCreateWithoutPatientTriageInput> | TriageAllergyCreateWithoutPatientTriageInput[] | TriageAllergyUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: TriageAllergyCreateOrConnectWithoutPatientTriageInput | TriageAllergyCreateOrConnectWithoutPatientTriageInput[]
    createMany?: TriageAllergyCreateManyPatientTriageInputEnvelope
    connect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
  }

  export type ConsultationsCreateNestedManyWithoutPatientTriageInput = {
    create?: XOR<ConsultationsCreateWithoutPatientTriageInput, ConsultationsUncheckedCreateWithoutPatientTriageInput> | ConsultationsCreateWithoutPatientTriageInput[] | ConsultationsUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientTriageInput | ConsultationsCreateOrConnectWithoutPatientTriageInput[]
    createMany?: ConsultationsCreateManyPatientTriageInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutPatientTriageInput = {
    create?: XOR<NoteCreateWithoutPatientTriageInput, NoteUncheckedCreateWithoutPatientTriageInput> | NoteCreateWithoutPatientTriageInput[] | NoteUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientTriageInput | NoteCreateOrConnectWithoutPatientTriageInput[]
    createMany?: NoteCreateManyPatientTriageInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedPatientTriagesInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientTriagesInput, EmployeeUncheckedCreateWithoutCreatedPatientTriagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientTriagesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPatientTriagesInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientTriagesInput, EmployeeUncheckedCreateWithoutUpdatedPatientTriagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientTriagesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type TriageProblemUncheckedCreateNestedManyWithoutPatientTriageInput = {
    create?: XOR<TriageProblemCreateWithoutPatientTriageInput, TriageProblemUncheckedCreateWithoutPatientTriageInput> | TriageProblemCreateWithoutPatientTriageInput[] | TriageProblemUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: TriageProblemCreateOrConnectWithoutPatientTriageInput | TriageProblemCreateOrConnectWithoutPatientTriageInput[]
    createMany?: TriageProblemCreateManyPatientTriageInputEnvelope
    connect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
  }

  export type TriageAllergyUncheckedCreateNestedManyWithoutPatientTriageInput = {
    create?: XOR<TriageAllergyCreateWithoutPatientTriageInput, TriageAllergyUncheckedCreateWithoutPatientTriageInput> | TriageAllergyCreateWithoutPatientTriageInput[] | TriageAllergyUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: TriageAllergyCreateOrConnectWithoutPatientTriageInput | TriageAllergyCreateOrConnectWithoutPatientTriageInput[]
    createMany?: TriageAllergyCreateManyPatientTriageInputEnvelope
    connect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
  }

  export type ConsultationsUncheckedCreateNestedManyWithoutPatientTriageInput = {
    create?: XOR<ConsultationsCreateWithoutPatientTriageInput, ConsultationsUncheckedCreateWithoutPatientTriageInput> | ConsultationsCreateWithoutPatientTriageInput[] | ConsultationsUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientTriageInput | ConsultationsCreateOrConnectWithoutPatientTriageInput[]
    createMany?: ConsultationsCreateManyPatientTriageInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutPatientTriageInput = {
    create?: XOR<NoteCreateWithoutPatientTriageInput, NoteUncheckedCreateWithoutPatientTriageInput> | NoteCreateWithoutPatientTriageInput[] | NoteUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientTriageInput | NoteCreateOrConnectWithoutPatientTriageInput[]
    createMany?: NoteCreateManyPatientTriageInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type TriageProblemUpdateManyWithoutPatientTriageNestedInput = {
    create?: XOR<TriageProblemCreateWithoutPatientTriageInput, TriageProblemUncheckedCreateWithoutPatientTriageInput> | TriageProblemCreateWithoutPatientTriageInput[] | TriageProblemUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: TriageProblemCreateOrConnectWithoutPatientTriageInput | TriageProblemCreateOrConnectWithoutPatientTriageInput[]
    upsert?: TriageProblemUpsertWithWhereUniqueWithoutPatientTriageInput | TriageProblemUpsertWithWhereUniqueWithoutPatientTriageInput[]
    createMany?: TriageProblemCreateManyPatientTriageInputEnvelope
    set?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    disconnect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    delete?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    connect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    update?: TriageProblemUpdateWithWhereUniqueWithoutPatientTriageInput | TriageProblemUpdateWithWhereUniqueWithoutPatientTriageInput[]
    updateMany?: TriageProblemUpdateManyWithWhereWithoutPatientTriageInput | TriageProblemUpdateManyWithWhereWithoutPatientTriageInput[]
    deleteMany?: TriageProblemScalarWhereInput | TriageProblemScalarWhereInput[]
  }

  export type TriageAllergyUpdateManyWithoutPatientTriageNestedInput = {
    create?: XOR<TriageAllergyCreateWithoutPatientTriageInput, TriageAllergyUncheckedCreateWithoutPatientTriageInput> | TriageAllergyCreateWithoutPatientTriageInput[] | TriageAllergyUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: TriageAllergyCreateOrConnectWithoutPatientTriageInput | TriageAllergyCreateOrConnectWithoutPatientTriageInput[]
    upsert?: TriageAllergyUpsertWithWhereUniqueWithoutPatientTriageInput | TriageAllergyUpsertWithWhereUniqueWithoutPatientTriageInput[]
    createMany?: TriageAllergyCreateManyPatientTriageInputEnvelope
    set?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    disconnect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    delete?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    connect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    update?: TriageAllergyUpdateWithWhereUniqueWithoutPatientTriageInput | TriageAllergyUpdateWithWhereUniqueWithoutPatientTriageInput[]
    updateMany?: TriageAllergyUpdateManyWithWhereWithoutPatientTriageInput | TriageAllergyUpdateManyWithWhereWithoutPatientTriageInput[]
    deleteMany?: TriageAllergyScalarWhereInput | TriageAllergyScalarWhereInput[]
  }

  export type ConsultationsUpdateManyWithoutPatientTriageNestedInput = {
    create?: XOR<ConsultationsCreateWithoutPatientTriageInput, ConsultationsUncheckedCreateWithoutPatientTriageInput> | ConsultationsCreateWithoutPatientTriageInput[] | ConsultationsUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientTriageInput | ConsultationsCreateOrConnectWithoutPatientTriageInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutPatientTriageInput | ConsultationsUpsertWithWhereUniqueWithoutPatientTriageInput[]
    createMany?: ConsultationsCreateManyPatientTriageInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutPatientTriageInput | ConsultationsUpdateWithWhereUniqueWithoutPatientTriageInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutPatientTriageInput | ConsultationsUpdateManyWithWhereWithoutPatientTriageInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutPatientTriageNestedInput = {
    create?: XOR<NoteCreateWithoutPatientTriageInput, NoteUncheckedCreateWithoutPatientTriageInput> | NoteCreateWithoutPatientTriageInput[] | NoteUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientTriageInput | NoteCreateOrConnectWithoutPatientTriageInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutPatientTriageInput | NoteUpsertWithWhereUniqueWithoutPatientTriageInput[]
    createMany?: NoteCreateManyPatientTriageInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutPatientTriageInput | NoteUpdateWithWhereUniqueWithoutPatientTriageInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutPatientTriageInput | NoteUpdateManyWithWhereWithoutPatientTriageInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPatientTriagesNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientTriagesInput, EmployeeUncheckedCreateWithoutCreatedPatientTriagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientTriagesInput
    upsert?: EmployeeUpsertWithoutCreatedPatientTriagesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPatientTriagesInput, EmployeeUpdateWithoutCreatedPatientTriagesInput>, EmployeeUncheckedUpdateWithoutCreatedPatientTriagesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPatientTriagesNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientTriagesInput, EmployeeUncheckedCreateWithoutUpdatedPatientTriagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientTriagesInput
    upsert?: EmployeeUpsertWithoutUpdatedPatientTriagesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPatientTriagesInput, EmployeeUpdateWithoutUpdatedPatientTriagesInput>, EmployeeUncheckedUpdateWithoutUpdatedPatientTriagesInput>
  }

  export type TriageProblemUncheckedUpdateManyWithoutPatientTriageNestedInput = {
    create?: XOR<TriageProblemCreateWithoutPatientTriageInput, TriageProblemUncheckedCreateWithoutPatientTriageInput> | TriageProblemCreateWithoutPatientTriageInput[] | TriageProblemUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: TriageProblemCreateOrConnectWithoutPatientTriageInput | TriageProblemCreateOrConnectWithoutPatientTriageInput[]
    upsert?: TriageProblemUpsertWithWhereUniqueWithoutPatientTriageInput | TriageProblemUpsertWithWhereUniqueWithoutPatientTriageInput[]
    createMany?: TriageProblemCreateManyPatientTriageInputEnvelope
    set?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    disconnect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    delete?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    connect?: TriageProblemWhereUniqueInput | TriageProblemWhereUniqueInput[]
    update?: TriageProblemUpdateWithWhereUniqueWithoutPatientTriageInput | TriageProblemUpdateWithWhereUniqueWithoutPatientTriageInput[]
    updateMany?: TriageProblemUpdateManyWithWhereWithoutPatientTriageInput | TriageProblemUpdateManyWithWhereWithoutPatientTriageInput[]
    deleteMany?: TriageProblemScalarWhereInput | TriageProblemScalarWhereInput[]
  }

  export type TriageAllergyUncheckedUpdateManyWithoutPatientTriageNestedInput = {
    create?: XOR<TriageAllergyCreateWithoutPatientTriageInput, TriageAllergyUncheckedCreateWithoutPatientTriageInput> | TriageAllergyCreateWithoutPatientTriageInput[] | TriageAllergyUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: TriageAllergyCreateOrConnectWithoutPatientTriageInput | TriageAllergyCreateOrConnectWithoutPatientTriageInput[]
    upsert?: TriageAllergyUpsertWithWhereUniqueWithoutPatientTriageInput | TriageAllergyUpsertWithWhereUniqueWithoutPatientTriageInput[]
    createMany?: TriageAllergyCreateManyPatientTriageInputEnvelope
    set?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    disconnect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    delete?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    connect?: TriageAllergyWhereUniqueInput | TriageAllergyWhereUniqueInput[]
    update?: TriageAllergyUpdateWithWhereUniqueWithoutPatientTriageInput | TriageAllergyUpdateWithWhereUniqueWithoutPatientTriageInput[]
    updateMany?: TriageAllergyUpdateManyWithWhereWithoutPatientTriageInput | TriageAllergyUpdateManyWithWhereWithoutPatientTriageInput[]
    deleteMany?: TriageAllergyScalarWhereInput | TriageAllergyScalarWhereInput[]
  }

  export type ConsultationsUncheckedUpdateManyWithoutPatientTriageNestedInput = {
    create?: XOR<ConsultationsCreateWithoutPatientTriageInput, ConsultationsUncheckedCreateWithoutPatientTriageInput> | ConsultationsCreateWithoutPatientTriageInput[] | ConsultationsUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientTriageInput | ConsultationsCreateOrConnectWithoutPatientTriageInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutPatientTriageInput | ConsultationsUpsertWithWhereUniqueWithoutPatientTriageInput[]
    createMany?: ConsultationsCreateManyPatientTriageInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutPatientTriageInput | ConsultationsUpdateWithWhereUniqueWithoutPatientTriageInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutPatientTriageInput | ConsultationsUpdateManyWithWhereWithoutPatientTriageInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutPatientTriageNestedInput = {
    create?: XOR<NoteCreateWithoutPatientTriageInput, NoteUncheckedCreateWithoutPatientTriageInput> | NoteCreateWithoutPatientTriageInput[] | NoteUncheckedCreateWithoutPatientTriageInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientTriageInput | NoteCreateOrConnectWithoutPatientTriageInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutPatientTriageInput | NoteUpsertWithWhereUniqueWithoutPatientTriageInput[]
    createMany?: NoteCreateManyPatientTriageInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutPatientTriageInput | NoteUpdateWithWhereUniqueWithoutPatientTriageInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutPatientTriageInput | NoteUpdateManyWithWhereWithoutPatientTriageInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type PatientAssessmentCreateimagesInput = {
    set: string[]
  }

  export type ConsultationsCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<ConsultationsCreateWithoutPatientAssessmentInput, ConsultationsUncheckedCreateWithoutPatientAssessmentInput> | ConsultationsCreateWithoutPatientAssessmentInput[] | ConsultationsUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientAssessmentInput | ConsultationsCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: ConsultationsCreateManyPatientAssessmentInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type PatientMedicationCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<PatientMedicationCreateWithoutPatientAssessmentInput, PatientMedicationUncheckedCreateWithoutPatientAssessmentInput> | PatientMedicationCreateWithoutPatientAssessmentInput[] | PatientMedicationUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutPatientAssessmentInput | PatientMedicationCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: PatientMedicationCreateManyPatientAssessmentInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type PatientTreatmentCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<PatientTreatmentCreateWithoutPatientAssessmentInput, PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput> | PatientTreatmentCreateWithoutPatientAssessmentInput[] | PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutPatientAssessmentInput | PatientTreatmentCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: PatientTreatmentCreateManyPatientAssessmentInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientPackageCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<PatientPackageCreateWithoutPatientAssessmentInput, PatientPackageUncheckedCreateWithoutPatientAssessmentInput> | PatientPackageCreateWithoutPatientAssessmentInput[] | PatientPackageUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutPatientAssessmentInput | PatientPackageCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: PatientPackageCreateManyPatientAssessmentInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type PatientItemCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<PatientItemCreateWithoutPatientAssessmentInput, PatientItemUncheckedCreateWithoutPatientAssessmentInput> | PatientItemCreateWithoutPatientAssessmentInput[] | PatientItemUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutPatientAssessmentInput | PatientItemCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: PatientItemCreateManyPatientAssessmentInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<NoteCreateWithoutPatientAssessmentInput, NoteUncheckedCreateWithoutPatientAssessmentInput> | NoteCreateWithoutPatientAssessmentInput[] | NoteUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientAssessmentInput | NoteCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: NoteCreateManyPatientAssessmentInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedPatientAssessmentsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientAssessmentsInput, EmployeeUncheckedCreateWithoutCreatedPatientAssessmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientAssessmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPatientAssessmentsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientAssessmentsInput, EmployeeUncheckedCreateWithoutUpdatedPatientAssessmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientAssessmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ConsultationsUncheckedCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<ConsultationsCreateWithoutPatientAssessmentInput, ConsultationsUncheckedCreateWithoutPatientAssessmentInput> | ConsultationsCreateWithoutPatientAssessmentInput[] | ConsultationsUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientAssessmentInput | ConsultationsCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: ConsultationsCreateManyPatientAssessmentInputEnvelope
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
  }

  export type PatientMedicationUncheckedCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<PatientMedicationCreateWithoutPatientAssessmentInput, PatientMedicationUncheckedCreateWithoutPatientAssessmentInput> | PatientMedicationCreateWithoutPatientAssessmentInput[] | PatientMedicationUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutPatientAssessmentInput | PatientMedicationCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: PatientMedicationCreateManyPatientAssessmentInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type PatientTreatmentUncheckedCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<PatientTreatmentCreateWithoutPatientAssessmentInput, PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput> | PatientTreatmentCreateWithoutPatientAssessmentInput[] | PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutPatientAssessmentInput | PatientTreatmentCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: PatientTreatmentCreateManyPatientAssessmentInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientPackageUncheckedCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<PatientPackageCreateWithoutPatientAssessmentInput, PatientPackageUncheckedCreateWithoutPatientAssessmentInput> | PatientPackageCreateWithoutPatientAssessmentInput[] | PatientPackageUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutPatientAssessmentInput | PatientPackageCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: PatientPackageCreateManyPatientAssessmentInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type PatientItemUncheckedCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<PatientItemCreateWithoutPatientAssessmentInput, PatientItemUncheckedCreateWithoutPatientAssessmentInput> | PatientItemCreateWithoutPatientAssessmentInput[] | PatientItemUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutPatientAssessmentInput | PatientItemCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: PatientItemCreateManyPatientAssessmentInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutPatientAssessmentInput = {
    create?: XOR<NoteCreateWithoutPatientAssessmentInput, NoteUncheckedCreateWithoutPatientAssessmentInput> | NoteCreateWithoutPatientAssessmentInput[] | NoteUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientAssessmentInput | NoteCreateOrConnectWithoutPatientAssessmentInput[]
    createMany?: NoteCreateManyPatientAssessmentInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type PatientAssessmentUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ConsultationsUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<ConsultationsCreateWithoutPatientAssessmentInput, ConsultationsUncheckedCreateWithoutPatientAssessmentInput> | ConsultationsCreateWithoutPatientAssessmentInput[] | ConsultationsUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientAssessmentInput | ConsultationsCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutPatientAssessmentInput | ConsultationsUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: ConsultationsCreateManyPatientAssessmentInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutPatientAssessmentInput | ConsultationsUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutPatientAssessmentInput | ConsultationsUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type PatientMedicationUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutPatientAssessmentInput, PatientMedicationUncheckedCreateWithoutPatientAssessmentInput> | PatientMedicationCreateWithoutPatientAssessmentInput[] | PatientMedicationUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutPatientAssessmentInput | PatientMedicationCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutPatientAssessmentInput | PatientMedicationUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: PatientMedicationCreateManyPatientAssessmentInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutPatientAssessmentInput | PatientMedicationUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutPatientAssessmentInput | PatientMedicationUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type PatientTreatmentUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutPatientAssessmentInput, PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput> | PatientTreatmentCreateWithoutPatientAssessmentInput[] | PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutPatientAssessmentInput | PatientTreatmentCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutPatientAssessmentInput | PatientTreatmentUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: PatientTreatmentCreateManyPatientAssessmentInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutPatientAssessmentInput | PatientTreatmentUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutPatientAssessmentInput | PatientTreatmentUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientPackageUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<PatientPackageCreateWithoutPatientAssessmentInput, PatientPackageUncheckedCreateWithoutPatientAssessmentInput> | PatientPackageCreateWithoutPatientAssessmentInput[] | PatientPackageUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutPatientAssessmentInput | PatientPackageCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutPatientAssessmentInput | PatientPackageUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: PatientPackageCreateManyPatientAssessmentInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutPatientAssessmentInput | PatientPackageUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutPatientAssessmentInput | PatientPackageUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type PatientItemUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<PatientItemCreateWithoutPatientAssessmentInput, PatientItemUncheckedCreateWithoutPatientAssessmentInput> | PatientItemCreateWithoutPatientAssessmentInput[] | PatientItemUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutPatientAssessmentInput | PatientItemCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutPatientAssessmentInput | PatientItemUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: PatientItemCreateManyPatientAssessmentInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutPatientAssessmentInput | PatientItemUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutPatientAssessmentInput | PatientItemUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<NoteCreateWithoutPatientAssessmentInput, NoteUncheckedCreateWithoutPatientAssessmentInput> | NoteCreateWithoutPatientAssessmentInput[] | NoteUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientAssessmentInput | NoteCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutPatientAssessmentInput | NoteUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: NoteCreateManyPatientAssessmentInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutPatientAssessmentInput | NoteUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutPatientAssessmentInput | NoteUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPatientAssessmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientAssessmentsInput, EmployeeUncheckedCreateWithoutCreatedPatientAssessmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientAssessmentsInput
    upsert?: EmployeeUpsertWithoutCreatedPatientAssessmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPatientAssessmentsInput, EmployeeUpdateWithoutCreatedPatientAssessmentsInput>, EmployeeUncheckedUpdateWithoutCreatedPatientAssessmentsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPatientAssessmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientAssessmentsInput, EmployeeUncheckedCreateWithoutUpdatedPatientAssessmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientAssessmentsInput
    upsert?: EmployeeUpsertWithoutUpdatedPatientAssessmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPatientAssessmentsInput, EmployeeUpdateWithoutUpdatedPatientAssessmentsInput>, EmployeeUncheckedUpdateWithoutUpdatedPatientAssessmentsInput>
  }

  export type ConsultationsUncheckedUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<ConsultationsCreateWithoutPatientAssessmentInput, ConsultationsUncheckedCreateWithoutPatientAssessmentInput> | ConsultationsCreateWithoutPatientAssessmentInput[] | ConsultationsUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: ConsultationsCreateOrConnectWithoutPatientAssessmentInput | ConsultationsCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: ConsultationsUpsertWithWhereUniqueWithoutPatientAssessmentInput | ConsultationsUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: ConsultationsCreateManyPatientAssessmentInputEnvelope
    set?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    disconnect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    delete?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    connect?: ConsultationsWhereUniqueInput | ConsultationsWhereUniqueInput[]
    update?: ConsultationsUpdateWithWhereUniqueWithoutPatientAssessmentInput | ConsultationsUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: ConsultationsUpdateManyWithWhereWithoutPatientAssessmentInput | ConsultationsUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
  }

  export type PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutPatientAssessmentInput, PatientMedicationUncheckedCreateWithoutPatientAssessmentInput> | PatientMedicationCreateWithoutPatientAssessmentInput[] | PatientMedicationUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutPatientAssessmentInput | PatientMedicationCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutPatientAssessmentInput | PatientMedicationUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: PatientMedicationCreateManyPatientAssessmentInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutPatientAssessmentInput | PatientMedicationUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutPatientAssessmentInput | PatientMedicationUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutPatientAssessmentInput, PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput> | PatientTreatmentCreateWithoutPatientAssessmentInput[] | PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutPatientAssessmentInput | PatientTreatmentCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutPatientAssessmentInput | PatientTreatmentUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: PatientTreatmentCreateManyPatientAssessmentInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutPatientAssessmentInput | PatientTreatmentUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutPatientAssessmentInput | PatientTreatmentUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientPackageUncheckedUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<PatientPackageCreateWithoutPatientAssessmentInput, PatientPackageUncheckedCreateWithoutPatientAssessmentInput> | PatientPackageCreateWithoutPatientAssessmentInput[] | PatientPackageUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutPatientAssessmentInput | PatientPackageCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutPatientAssessmentInput | PatientPackageUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: PatientPackageCreateManyPatientAssessmentInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutPatientAssessmentInput | PatientPackageUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutPatientAssessmentInput | PatientPackageUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type PatientItemUncheckedUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<PatientItemCreateWithoutPatientAssessmentInput, PatientItemUncheckedCreateWithoutPatientAssessmentInput> | PatientItemCreateWithoutPatientAssessmentInput[] | PatientItemUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutPatientAssessmentInput | PatientItemCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutPatientAssessmentInput | PatientItemUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: PatientItemCreateManyPatientAssessmentInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutPatientAssessmentInput | PatientItemUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutPatientAssessmentInput | PatientItemUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutPatientAssessmentNestedInput = {
    create?: XOR<NoteCreateWithoutPatientAssessmentInput, NoteUncheckedCreateWithoutPatientAssessmentInput> | NoteCreateWithoutPatientAssessmentInput[] | NoteUncheckedCreateWithoutPatientAssessmentInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientAssessmentInput | NoteCreateOrConnectWithoutPatientAssessmentInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutPatientAssessmentInput | NoteUpsertWithWhereUniqueWithoutPatientAssessmentInput[]
    createMany?: NoteCreateManyPatientAssessmentInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutPatientAssessmentInput | NoteUpdateWithWhereUniqueWithoutPatientAssessmentInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutPatientAssessmentInput | NoteUpdateManyWithWhereWithoutPatientAssessmentInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type PatientTriageCreateNestedOneWithoutNotesInput = {
    create?: XOR<PatientTriageCreateWithoutNotesInput, PatientTriageUncheckedCreateWithoutNotesInput>
    connectOrCreate?: PatientTriageCreateOrConnectWithoutNotesInput
    connect?: PatientTriageWhereUniqueInput
  }

  export type PatientAssessmentCreateNestedOneWithoutNotesInput = {
    create?: XOR<PatientAssessmentCreateWithoutNotesInput, PatientAssessmentUncheckedCreateWithoutNotesInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutNotesInput
    connect?: PatientAssessmentWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutNotesInput = {
    create?: XOR<EmployeeCreateWithoutNotesInput, EmployeeUncheckedCreateWithoutNotesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutNotesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PatientTriageUpdateOneWithoutNotesNestedInput = {
    create?: XOR<PatientTriageCreateWithoutNotesInput, PatientTriageUncheckedCreateWithoutNotesInput>
    connectOrCreate?: PatientTriageCreateOrConnectWithoutNotesInput
    upsert?: PatientTriageUpsertWithoutNotesInput
    disconnect?: PatientTriageWhereInput | boolean
    delete?: PatientTriageWhereInput | boolean
    connect?: PatientTriageWhereUniqueInput
    update?: XOR<XOR<PatientTriageUpdateToOneWithWhereWithoutNotesInput, PatientTriageUpdateWithoutNotesInput>, PatientTriageUncheckedUpdateWithoutNotesInput>
  }

  export type PatientAssessmentUpdateOneWithoutNotesNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutNotesInput, PatientAssessmentUncheckedCreateWithoutNotesInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutNotesInput
    upsert?: PatientAssessmentUpsertWithoutNotesInput
    disconnect?: PatientAssessmentWhereInput | boolean
    delete?: PatientAssessmentWhereInput | boolean
    connect?: PatientAssessmentWhereUniqueInput
    update?: XOR<XOR<PatientAssessmentUpdateToOneWithWhereWithoutNotesInput, PatientAssessmentUpdateWithoutNotesInput>, PatientAssessmentUncheckedUpdateWithoutNotesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<EmployeeCreateWithoutNotesInput, EmployeeUncheckedCreateWithoutNotesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutNotesInput
    upsert?: EmployeeUpsertWithoutNotesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutNotesInput, EmployeeUpdateWithoutNotesInput>, EmployeeUncheckedUpdateWithoutNotesInput>
  }

  export type TreatmentCreateNestedOneWithoutPatientTreatmentsInput = {
    create?: XOR<TreatmentCreateWithoutPatientTreatmentsInput, TreatmentUncheckedCreateWithoutPatientTreatmentsInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientTreatmentsInput
    connect?: TreatmentWhereUniqueInput
  }

  export type PatientAssessmentCreateNestedOneWithoutPatientTreatmentsInput = {
    create?: XOR<PatientAssessmentCreateWithoutPatientTreatmentsInput, PatientAssessmentUncheckedCreateWithoutPatientTreatmentsInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutPatientTreatmentsInput
    connect?: PatientAssessmentWhereUniqueInput
  }

  export type BillingsCreateNestedOneWithoutPatientTreatmentsInput = {
    create?: XOR<BillingsCreateWithoutPatientTreatmentsInput, BillingsUncheckedCreateWithoutPatientTreatmentsInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientTreatmentsInput
    connect?: BillingsWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCreatedPatientTreatmentsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientTreatmentsInput, EmployeeUncheckedCreateWithoutCreatedPatientTreatmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientTreatmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPatientTreatmentsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientTreatmentsInput, EmployeeUncheckedCreateWithoutUpdatedPatientTreatmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientTreatmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput = {
    create?: XOR<TreatmentCreateWithoutPatientTreatmentsInput, TreatmentUncheckedCreateWithoutPatientTreatmentsInput>
    connectOrCreate?: TreatmentCreateOrConnectWithoutPatientTreatmentsInput
    upsert?: TreatmentUpsertWithoutPatientTreatmentsInput
    connect?: TreatmentWhereUniqueInput
    update?: XOR<XOR<TreatmentUpdateToOneWithWhereWithoutPatientTreatmentsInput, TreatmentUpdateWithoutPatientTreatmentsInput>, TreatmentUncheckedUpdateWithoutPatientTreatmentsInput>
  }

  export type PatientAssessmentUpdateOneWithoutPatientTreatmentsNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutPatientTreatmentsInput, PatientAssessmentUncheckedCreateWithoutPatientTreatmentsInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutPatientTreatmentsInput
    upsert?: PatientAssessmentUpsertWithoutPatientTreatmentsInput
    disconnect?: PatientAssessmentWhereInput | boolean
    delete?: PatientAssessmentWhereInput | boolean
    connect?: PatientAssessmentWhereUniqueInput
    update?: XOR<XOR<PatientAssessmentUpdateToOneWithWhereWithoutPatientTreatmentsInput, PatientAssessmentUpdateWithoutPatientTreatmentsInput>, PatientAssessmentUncheckedUpdateWithoutPatientTreatmentsInput>
  }

  export type BillingsUpdateOneWithoutPatientTreatmentsNestedInput = {
    create?: XOR<BillingsCreateWithoutPatientTreatmentsInput, BillingsUncheckedCreateWithoutPatientTreatmentsInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientTreatmentsInput
    upsert?: BillingsUpsertWithoutPatientTreatmentsInput
    disconnect?: BillingsWhereInput | boolean
    delete?: BillingsWhereInput | boolean
    connect?: BillingsWhereUniqueInput
    update?: XOR<XOR<BillingsUpdateToOneWithWhereWithoutPatientTreatmentsInput, BillingsUpdateWithoutPatientTreatmentsInput>, BillingsUncheckedUpdateWithoutPatientTreatmentsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPatientTreatmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientTreatmentsInput, EmployeeUncheckedCreateWithoutCreatedPatientTreatmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientTreatmentsInput
    upsert?: EmployeeUpsertWithoutCreatedPatientTreatmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPatientTreatmentsInput, EmployeeUpdateWithoutCreatedPatientTreatmentsInput>, EmployeeUncheckedUpdateWithoutCreatedPatientTreatmentsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPatientTreatmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientTreatmentsInput, EmployeeUncheckedCreateWithoutUpdatedPatientTreatmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientTreatmentsInput
    upsert?: EmployeeUpsertWithoutUpdatedPatientTreatmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPatientTreatmentsInput, EmployeeUpdateWithoutUpdatedPatientTreatmentsInput>, EmployeeUncheckedUpdateWithoutUpdatedPatientTreatmentsInput>
  }

  export type MedicineCreateNestedOneWithoutPatientMedicationsInput = {
    create?: XOR<MedicineCreateWithoutPatientMedicationsInput, MedicineUncheckedCreateWithoutPatientMedicationsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutPatientMedicationsInput
    connect?: MedicineWhereUniqueInput
  }

  export type PatientAssessmentCreateNestedOneWithoutPatientMedicationsInput = {
    create?: XOR<PatientAssessmentCreateWithoutPatientMedicationsInput, PatientAssessmentUncheckedCreateWithoutPatientMedicationsInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutPatientMedicationsInput
    connect?: PatientAssessmentWhereUniqueInput
  }

  export type BillingsCreateNestedOneWithoutPatientMedicationsInput = {
    create?: XOR<BillingsCreateWithoutPatientMedicationsInput, BillingsUncheckedCreateWithoutPatientMedicationsInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientMedicationsInput
    connect?: BillingsWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCreatedPatientMedicationsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientMedicationsInput, EmployeeUncheckedCreateWithoutCreatedPatientMedicationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientMedicationsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPatientMedicationsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientMedicationsInput, EmployeeUncheckedCreateWithoutUpdatedPatientMedicationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientMedicationsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type MedicineUpdateOneRequiredWithoutPatientMedicationsNestedInput = {
    create?: XOR<MedicineCreateWithoutPatientMedicationsInput, MedicineUncheckedCreateWithoutPatientMedicationsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutPatientMedicationsInput
    upsert?: MedicineUpsertWithoutPatientMedicationsInput
    connect?: MedicineWhereUniqueInput
    update?: XOR<XOR<MedicineUpdateToOneWithWhereWithoutPatientMedicationsInput, MedicineUpdateWithoutPatientMedicationsInput>, MedicineUncheckedUpdateWithoutPatientMedicationsInput>
  }

  export type PatientAssessmentUpdateOneWithoutPatientMedicationsNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutPatientMedicationsInput, PatientAssessmentUncheckedCreateWithoutPatientMedicationsInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutPatientMedicationsInput
    upsert?: PatientAssessmentUpsertWithoutPatientMedicationsInput
    disconnect?: PatientAssessmentWhereInput | boolean
    delete?: PatientAssessmentWhereInput | boolean
    connect?: PatientAssessmentWhereUniqueInput
    update?: XOR<XOR<PatientAssessmentUpdateToOneWithWhereWithoutPatientMedicationsInput, PatientAssessmentUpdateWithoutPatientMedicationsInput>, PatientAssessmentUncheckedUpdateWithoutPatientMedicationsInput>
  }

  export type BillingsUpdateOneWithoutPatientMedicationsNestedInput = {
    create?: XOR<BillingsCreateWithoutPatientMedicationsInput, BillingsUncheckedCreateWithoutPatientMedicationsInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientMedicationsInput
    upsert?: BillingsUpsertWithoutPatientMedicationsInput
    disconnect?: BillingsWhereInput | boolean
    delete?: BillingsWhereInput | boolean
    connect?: BillingsWhereUniqueInput
    update?: XOR<XOR<BillingsUpdateToOneWithWhereWithoutPatientMedicationsInput, BillingsUpdateWithoutPatientMedicationsInput>, BillingsUncheckedUpdateWithoutPatientMedicationsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPatientMedicationsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientMedicationsInput, EmployeeUncheckedCreateWithoutCreatedPatientMedicationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientMedicationsInput
    upsert?: EmployeeUpsertWithoutCreatedPatientMedicationsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPatientMedicationsInput, EmployeeUpdateWithoutCreatedPatientMedicationsInput>, EmployeeUncheckedUpdateWithoutCreatedPatientMedicationsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPatientMedicationsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientMedicationsInput, EmployeeUncheckedCreateWithoutUpdatedPatientMedicationsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientMedicationsInput
    upsert?: EmployeeUpsertWithoutUpdatedPatientMedicationsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPatientMedicationsInput, EmployeeUpdateWithoutUpdatedPatientMedicationsInput>, EmployeeUncheckedUpdateWithoutUpdatedPatientMedicationsInput>
  }

  export type PackageCreateNestedOneWithoutPatientPackagesInput = {
    create?: XOR<PackageCreateWithoutPatientPackagesInput, PackageUncheckedCreateWithoutPatientPackagesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPatientPackagesInput
    connect?: PackageWhereUniqueInput
  }

  export type PatientAssessmentCreateNestedOneWithoutPatientPackagesInput = {
    create?: XOR<PatientAssessmentCreateWithoutPatientPackagesInput, PatientAssessmentUncheckedCreateWithoutPatientPackagesInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutPatientPackagesInput
    connect?: PatientAssessmentWhereUniqueInput
  }

  export type BillingsCreateNestedOneWithoutPatientPackagesInput = {
    create?: XOR<BillingsCreateWithoutPatientPackagesInput, BillingsUncheckedCreateWithoutPatientPackagesInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientPackagesInput
    connect?: BillingsWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCreatedPatientPackagesInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientPackagesInput, EmployeeUncheckedCreateWithoutCreatedPatientPackagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientPackagesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPatientPackagesInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientPackagesInput, EmployeeUncheckedCreateWithoutUpdatedPatientPackagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientPackagesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PackageUpdateOneRequiredWithoutPatientPackagesNestedInput = {
    create?: XOR<PackageCreateWithoutPatientPackagesInput, PackageUncheckedCreateWithoutPatientPackagesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPatientPackagesInput
    upsert?: PackageUpsertWithoutPatientPackagesInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutPatientPackagesInput, PackageUpdateWithoutPatientPackagesInput>, PackageUncheckedUpdateWithoutPatientPackagesInput>
  }

  export type PatientAssessmentUpdateOneWithoutPatientPackagesNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutPatientPackagesInput, PatientAssessmentUncheckedCreateWithoutPatientPackagesInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutPatientPackagesInput
    upsert?: PatientAssessmentUpsertWithoutPatientPackagesInput
    disconnect?: PatientAssessmentWhereInput | boolean
    delete?: PatientAssessmentWhereInput | boolean
    connect?: PatientAssessmentWhereUniqueInput
    update?: XOR<XOR<PatientAssessmentUpdateToOneWithWhereWithoutPatientPackagesInput, PatientAssessmentUpdateWithoutPatientPackagesInput>, PatientAssessmentUncheckedUpdateWithoutPatientPackagesInput>
  }

  export type BillingsUpdateOneWithoutPatientPackagesNestedInput = {
    create?: XOR<BillingsCreateWithoutPatientPackagesInput, BillingsUncheckedCreateWithoutPatientPackagesInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientPackagesInput
    upsert?: BillingsUpsertWithoutPatientPackagesInput
    disconnect?: BillingsWhereInput | boolean
    delete?: BillingsWhereInput | boolean
    connect?: BillingsWhereUniqueInput
    update?: XOR<XOR<BillingsUpdateToOneWithWhereWithoutPatientPackagesInput, BillingsUpdateWithoutPatientPackagesInput>, BillingsUncheckedUpdateWithoutPatientPackagesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPatientPackagesNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientPackagesInput, EmployeeUncheckedCreateWithoutCreatedPatientPackagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientPackagesInput
    upsert?: EmployeeUpsertWithoutCreatedPatientPackagesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPatientPackagesInput, EmployeeUpdateWithoutCreatedPatientPackagesInput>, EmployeeUncheckedUpdateWithoutCreatedPatientPackagesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPatientPackagesNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientPackagesInput, EmployeeUncheckedCreateWithoutUpdatedPatientPackagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientPackagesInput
    upsert?: EmployeeUpsertWithoutUpdatedPatientPackagesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPatientPackagesInput, EmployeeUpdateWithoutUpdatedPatientPackagesInput>, EmployeeUncheckedUpdateWithoutUpdatedPatientPackagesInput>
  }

  export type ItemCreateNestedOneWithoutPatientItemsInput = {
    create?: XOR<ItemCreateWithoutPatientItemsInput, ItemUncheckedCreateWithoutPatientItemsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutPatientItemsInput
    connect?: ItemWhereUniqueInput
  }

  export type PatientAssessmentCreateNestedOneWithoutPatientItemsInput = {
    create?: XOR<PatientAssessmentCreateWithoutPatientItemsInput, PatientAssessmentUncheckedCreateWithoutPatientItemsInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutPatientItemsInput
    connect?: PatientAssessmentWhereUniqueInput
  }

  export type BillingsCreateNestedOneWithoutPatientItemsInput = {
    create?: XOR<BillingsCreateWithoutPatientItemsInput, BillingsUncheckedCreateWithoutPatientItemsInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientItemsInput
    connect?: BillingsWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCreatedPatientItemsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientItemsInput, EmployeeUncheckedCreateWithoutCreatedPatientItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientItemsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPatientItemsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientItemsInput, EmployeeUncheckedCreateWithoutUpdatedPatientItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientItemsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ItemUpdateOneRequiredWithoutPatientItemsNestedInput = {
    create?: XOR<ItemCreateWithoutPatientItemsInput, ItemUncheckedCreateWithoutPatientItemsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutPatientItemsInput
    upsert?: ItemUpsertWithoutPatientItemsInput
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutPatientItemsInput, ItemUpdateWithoutPatientItemsInput>, ItemUncheckedUpdateWithoutPatientItemsInput>
  }

  export type PatientAssessmentUpdateOneWithoutPatientItemsNestedInput = {
    create?: XOR<PatientAssessmentCreateWithoutPatientItemsInput, PatientAssessmentUncheckedCreateWithoutPatientItemsInput>
    connectOrCreate?: PatientAssessmentCreateOrConnectWithoutPatientItemsInput
    upsert?: PatientAssessmentUpsertWithoutPatientItemsInput
    disconnect?: PatientAssessmentWhereInput | boolean
    delete?: PatientAssessmentWhereInput | boolean
    connect?: PatientAssessmentWhereUniqueInput
    update?: XOR<XOR<PatientAssessmentUpdateToOneWithWhereWithoutPatientItemsInput, PatientAssessmentUpdateWithoutPatientItemsInput>, PatientAssessmentUncheckedUpdateWithoutPatientItemsInput>
  }

  export type BillingsUpdateOneWithoutPatientItemsNestedInput = {
    create?: XOR<BillingsCreateWithoutPatientItemsInput, BillingsUncheckedCreateWithoutPatientItemsInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPatientItemsInput
    upsert?: BillingsUpsertWithoutPatientItemsInput
    disconnect?: BillingsWhereInput | boolean
    delete?: BillingsWhereInput | boolean
    connect?: BillingsWhereUniqueInput
    update?: XOR<XOR<BillingsUpdateToOneWithWhereWithoutPatientItemsInput, BillingsUpdateWithoutPatientItemsInput>, BillingsUncheckedUpdateWithoutPatientItemsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPatientItemsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPatientItemsInput, EmployeeUncheckedCreateWithoutCreatedPatientItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPatientItemsInput
    upsert?: EmployeeUpsertWithoutCreatedPatientItemsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPatientItemsInput, EmployeeUpdateWithoutCreatedPatientItemsInput>, EmployeeUncheckedUpdateWithoutCreatedPatientItemsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPatientItemsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPatientItemsInput, EmployeeUncheckedCreateWithoutUpdatedPatientItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPatientItemsInput
    upsert?: EmployeeUpsertWithoutUpdatedPatientItemsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPatientItemsInput, EmployeeUpdateWithoutUpdatedPatientItemsInput>, EmployeeUncheckedUpdateWithoutUpdatedPatientItemsInput>
  }

  export type CategoryCreateNestedOneWithoutMedicinesInput = {
    create?: XOR<CategoryCreateWithoutMedicinesInput, CategoryUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMedicinesInput
    connect?: CategoryWhereUniqueInput
  }

  export type SupplierCreateNestedOneWithoutMedicinesInput = {
    create?: XOR<SupplierCreateWithoutMedicinesInput, SupplierUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutMedicinesInput
    connect?: SupplierWhereUniqueInput
  }

  export type PatientMedicationCreateNestedManyWithoutMedicineInput = {
    create?: XOR<PatientMedicationCreateWithoutMedicineInput, PatientMedicationUncheckedCreateWithoutMedicineInput> | PatientMedicationCreateWithoutMedicineInput[] | PatientMedicationUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutMedicineInput | PatientMedicationCreateOrConnectWithoutMedicineInput[]
    createMany?: PatientMedicationCreateManyMedicineInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type InventoryTransactionCreateNestedManyWithoutMedicineInput = {
    create?: XOR<InventoryTransactionCreateWithoutMedicineInput, InventoryTransactionUncheckedCreateWithoutMedicineInput> | InventoryTransactionCreateWithoutMedicineInput[] | InventoryTransactionUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutMedicineInput | InventoryTransactionCreateOrConnectWithoutMedicineInput[]
    createMany?: InventoryTransactionCreateManyMedicineInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryCountItemCreateNestedManyWithoutMedicineInput = {
    create?: XOR<InventoryCountItemCreateWithoutMedicineInput, InventoryCountItemUncheckedCreateWithoutMedicineInput> | InventoryCountItemCreateWithoutMedicineInput[] | InventoryCountItemUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutMedicineInput | InventoryCountItemCreateOrConnectWithoutMedicineInput[]
    createMany?: InventoryCountItemCreateManyMedicineInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type PurchaseOrderItemCreateNestedManyWithoutMedicineInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutMedicineInput, PurchaseOrderItemUncheckedCreateWithoutMedicineInput> | PurchaseOrderItemCreateWithoutMedicineInput[] | PurchaseOrderItemUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutMedicineInput | PurchaseOrderItemCreateOrConnectWithoutMedicineInput[]
    createMany?: PurchaseOrderItemCreateManyMedicineInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedMedicinesInput = {
    create?: XOR<EmployeeCreateWithoutCreatedMedicinesInput, EmployeeUncheckedCreateWithoutCreatedMedicinesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedMedicinesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedMedicinesInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedMedicinesInput, EmployeeUncheckedCreateWithoutUpdatedMedicinesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedMedicinesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PatientMedicationUncheckedCreateNestedManyWithoutMedicineInput = {
    create?: XOR<PatientMedicationCreateWithoutMedicineInput, PatientMedicationUncheckedCreateWithoutMedicineInput> | PatientMedicationCreateWithoutMedicineInput[] | PatientMedicationUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutMedicineInput | PatientMedicationCreateOrConnectWithoutMedicineInput[]
    createMany?: PatientMedicationCreateManyMedicineInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type InventoryTransactionUncheckedCreateNestedManyWithoutMedicineInput = {
    create?: XOR<InventoryTransactionCreateWithoutMedicineInput, InventoryTransactionUncheckedCreateWithoutMedicineInput> | InventoryTransactionCreateWithoutMedicineInput[] | InventoryTransactionUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutMedicineInput | InventoryTransactionCreateOrConnectWithoutMedicineInput[]
    createMany?: InventoryTransactionCreateManyMedicineInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryCountItemUncheckedCreateNestedManyWithoutMedicineInput = {
    create?: XOR<InventoryCountItemCreateWithoutMedicineInput, InventoryCountItemUncheckedCreateWithoutMedicineInput> | InventoryCountItemCreateWithoutMedicineInput[] | InventoryCountItemUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutMedicineInput | InventoryCountItemCreateOrConnectWithoutMedicineInput[]
    createMany?: InventoryCountItemCreateManyMedicineInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type PurchaseOrderItemUncheckedCreateNestedManyWithoutMedicineInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutMedicineInput, PurchaseOrderItemUncheckedCreateWithoutMedicineInput> | PurchaseOrderItemCreateWithoutMedicineInput[] | PurchaseOrderItemUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutMedicineInput | PurchaseOrderItemCreateOrConnectWithoutMedicineInput[]
    createMany?: PurchaseOrderItemCreateManyMedicineInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryUpdateOneRequiredWithoutMedicinesNestedInput = {
    create?: XOR<CategoryCreateWithoutMedicinesInput, CategoryUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMedicinesInput
    upsert?: CategoryUpsertWithoutMedicinesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutMedicinesInput, CategoryUpdateWithoutMedicinesInput>, CategoryUncheckedUpdateWithoutMedicinesInput>
  }

  export type SupplierUpdateOneRequiredWithoutMedicinesNestedInput = {
    create?: XOR<SupplierCreateWithoutMedicinesInput, SupplierUncheckedCreateWithoutMedicinesInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutMedicinesInput
    upsert?: SupplierUpsertWithoutMedicinesInput
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutMedicinesInput, SupplierUpdateWithoutMedicinesInput>, SupplierUncheckedUpdateWithoutMedicinesInput>
  }

  export type PatientMedicationUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutMedicineInput, PatientMedicationUncheckedCreateWithoutMedicineInput> | PatientMedicationCreateWithoutMedicineInput[] | PatientMedicationUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutMedicineInput | PatientMedicationCreateOrConnectWithoutMedicineInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutMedicineInput | PatientMedicationUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: PatientMedicationCreateManyMedicineInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutMedicineInput | PatientMedicationUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutMedicineInput | PatientMedicationUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type InventoryTransactionUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutMedicineInput, InventoryTransactionUncheckedCreateWithoutMedicineInput> | InventoryTransactionCreateWithoutMedicineInput[] | InventoryTransactionUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutMedicineInput | InventoryTransactionCreateOrConnectWithoutMedicineInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutMedicineInput | InventoryTransactionUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: InventoryTransactionCreateManyMedicineInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutMedicineInput | InventoryTransactionUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutMedicineInput | InventoryTransactionUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryCountItemUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutMedicineInput, InventoryCountItemUncheckedCreateWithoutMedicineInput> | InventoryCountItemCreateWithoutMedicineInput[] | InventoryCountItemUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutMedicineInput | InventoryCountItemCreateOrConnectWithoutMedicineInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutMedicineInput | InventoryCountItemUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: InventoryCountItemCreateManyMedicineInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutMedicineInput | InventoryCountItemUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutMedicineInput | InventoryCountItemUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type PurchaseOrderItemUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutMedicineInput, PurchaseOrderItemUncheckedCreateWithoutMedicineInput> | PurchaseOrderItemCreateWithoutMedicineInput[] | PurchaseOrderItemUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutMedicineInput | PurchaseOrderItemCreateOrConnectWithoutMedicineInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutMedicineInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: PurchaseOrderItemCreateManyMedicineInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutMedicineInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutMedicineInput | PurchaseOrderItemUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedMedicinesNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedMedicinesInput, EmployeeUncheckedCreateWithoutCreatedMedicinesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedMedicinesInput
    upsert?: EmployeeUpsertWithoutCreatedMedicinesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedMedicinesInput, EmployeeUpdateWithoutCreatedMedicinesInput>, EmployeeUncheckedUpdateWithoutCreatedMedicinesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedMedicinesNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedMedicinesInput, EmployeeUncheckedCreateWithoutUpdatedMedicinesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedMedicinesInput
    upsert?: EmployeeUpsertWithoutUpdatedMedicinesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedMedicinesInput, EmployeeUpdateWithoutUpdatedMedicinesInput>, EmployeeUncheckedUpdateWithoutUpdatedMedicinesInput>
  }

  export type PatientMedicationUncheckedUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutMedicineInput, PatientMedicationUncheckedCreateWithoutMedicineInput> | PatientMedicationCreateWithoutMedicineInput[] | PatientMedicationUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutMedicineInput | PatientMedicationCreateOrConnectWithoutMedicineInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutMedicineInput | PatientMedicationUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: PatientMedicationCreateManyMedicineInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutMedicineInput | PatientMedicationUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutMedicineInput | PatientMedicationUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutMedicineInput, InventoryTransactionUncheckedCreateWithoutMedicineInput> | InventoryTransactionCreateWithoutMedicineInput[] | InventoryTransactionUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutMedicineInput | InventoryTransactionCreateOrConnectWithoutMedicineInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutMedicineInput | InventoryTransactionUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: InventoryTransactionCreateManyMedicineInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutMedicineInput | InventoryTransactionUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutMedicineInput | InventoryTransactionUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutMedicineInput, InventoryCountItemUncheckedCreateWithoutMedicineInput> | InventoryCountItemCreateWithoutMedicineInput[] | InventoryCountItemUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutMedicineInput | InventoryCountItemCreateOrConnectWithoutMedicineInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutMedicineInput | InventoryCountItemUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: InventoryCountItemCreateManyMedicineInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutMedicineInput | InventoryCountItemUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutMedicineInput | InventoryCountItemUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutMedicineNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutMedicineInput, PurchaseOrderItemUncheckedCreateWithoutMedicineInput> | PurchaseOrderItemCreateWithoutMedicineInput[] | PurchaseOrderItemUncheckedCreateWithoutMedicineInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutMedicineInput | PurchaseOrderItemCreateOrConnectWithoutMedicineInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutMedicineInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutMedicineInput[]
    createMany?: PurchaseOrderItemCreateManyMedicineInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutMedicineInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutMedicineInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutMedicineInput | PurchaseOrderItemUpdateManyWithWhereWithoutMedicineInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutItemsInput = {
    create?: XOR<CategoryCreateWithoutItemsInput, CategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutItemsInput
    connect?: CategoryWhereUniqueInput
  }

  export type SupplierCreateNestedOneWithoutItemsInput = {
    create?: XOR<SupplierCreateWithoutItemsInput, SupplierUncheckedCreateWithoutItemsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutItemsInput
    connect?: SupplierWhereUniqueInput
  }

  export type PatientItemCreateNestedManyWithoutItemInput = {
    create?: XOR<PatientItemCreateWithoutItemInput, PatientItemUncheckedCreateWithoutItemInput> | PatientItemCreateWithoutItemInput[] | PatientItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutItemInput | PatientItemCreateOrConnectWithoutItemInput[]
    createMany?: PatientItemCreateManyItemInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type InventoryTransactionCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryTransactionCreateWithoutItemInput, InventoryTransactionUncheckedCreateWithoutItemInput> | InventoryTransactionCreateWithoutItemInput[] | InventoryTransactionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutItemInput | InventoryTransactionCreateOrConnectWithoutItemInput[]
    createMany?: InventoryTransactionCreateManyItemInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryCountItemCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryCountItemCreateWithoutItemInput, InventoryCountItemUncheckedCreateWithoutItemInput> | InventoryCountItemCreateWithoutItemInput[] | InventoryCountItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutItemInput | InventoryCountItemCreateOrConnectWithoutItemInput[]
    createMany?: InventoryCountItemCreateManyItemInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type PurchaseOrderItemCreateNestedManyWithoutItemInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutItemInput, PurchaseOrderItemUncheckedCreateWithoutItemInput> | PurchaseOrderItemCreateWithoutItemInput[] | PurchaseOrderItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutItemInput | PurchaseOrderItemCreateOrConnectWithoutItemInput[]
    createMany?: PurchaseOrderItemCreateManyItemInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedItemsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedItemsInput, EmployeeUncheckedCreateWithoutCreatedItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedItemsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedItemsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedItemsInput, EmployeeUncheckedCreateWithoutUpdatedItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedItemsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PatientItemUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<PatientItemCreateWithoutItemInput, PatientItemUncheckedCreateWithoutItemInput> | PatientItemCreateWithoutItemInput[] | PatientItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutItemInput | PatientItemCreateOrConnectWithoutItemInput[]
    createMany?: PatientItemCreateManyItemInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type InventoryTransactionUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryTransactionCreateWithoutItemInput, InventoryTransactionUncheckedCreateWithoutItemInput> | InventoryTransactionCreateWithoutItemInput[] | InventoryTransactionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutItemInput | InventoryTransactionCreateOrConnectWithoutItemInput[]
    createMany?: InventoryTransactionCreateManyItemInputEnvelope
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
  }

  export type InventoryCountItemUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryCountItemCreateWithoutItemInput, InventoryCountItemUncheckedCreateWithoutItemInput> | InventoryCountItemCreateWithoutItemInput[] | InventoryCountItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutItemInput | InventoryCountItemCreateOrConnectWithoutItemInput[]
    createMany?: InventoryCountItemCreateManyItemInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type PurchaseOrderItemUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutItemInput, PurchaseOrderItemUncheckedCreateWithoutItemInput> | PurchaseOrderItemCreateWithoutItemInput[] | PurchaseOrderItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutItemInput | PurchaseOrderItemCreateOrConnectWithoutItemInput[]
    createMany?: PurchaseOrderItemCreateManyItemInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type CategoryUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<CategoryCreateWithoutItemsInput, CategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutItemsInput
    upsert?: CategoryUpsertWithoutItemsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutItemsInput, CategoryUpdateWithoutItemsInput>, CategoryUncheckedUpdateWithoutItemsInput>
  }

  export type SupplierUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<SupplierCreateWithoutItemsInput, SupplierUncheckedCreateWithoutItemsInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutItemsInput
    upsert?: SupplierUpsertWithoutItemsInput
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutItemsInput, SupplierUpdateWithoutItemsInput>, SupplierUncheckedUpdateWithoutItemsInput>
  }

  export type PatientItemUpdateManyWithoutItemNestedInput = {
    create?: XOR<PatientItemCreateWithoutItemInput, PatientItemUncheckedCreateWithoutItemInput> | PatientItemCreateWithoutItemInput[] | PatientItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutItemInput | PatientItemCreateOrConnectWithoutItemInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutItemInput | PatientItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: PatientItemCreateManyItemInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutItemInput | PatientItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutItemInput | PatientItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type InventoryTransactionUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutItemInput, InventoryTransactionUncheckedCreateWithoutItemInput> | InventoryTransactionCreateWithoutItemInput[] | InventoryTransactionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutItemInput | InventoryTransactionCreateOrConnectWithoutItemInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutItemInput | InventoryTransactionUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryTransactionCreateManyItemInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutItemInput | InventoryTransactionUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutItemInput | InventoryTransactionUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryCountItemUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutItemInput, InventoryCountItemUncheckedCreateWithoutItemInput> | InventoryCountItemCreateWithoutItemInput[] | InventoryCountItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutItemInput | InventoryCountItemCreateOrConnectWithoutItemInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutItemInput | InventoryCountItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryCountItemCreateManyItemInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutItemInput | InventoryCountItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutItemInput | InventoryCountItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type PurchaseOrderItemUpdateManyWithoutItemNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutItemInput, PurchaseOrderItemUncheckedCreateWithoutItemInput> | PurchaseOrderItemCreateWithoutItemInput[] | PurchaseOrderItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutItemInput | PurchaseOrderItemCreateOrConnectWithoutItemInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutItemInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: PurchaseOrderItemCreateManyItemInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutItemInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutItemInput | PurchaseOrderItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedItemsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedItemsInput, EmployeeUncheckedCreateWithoutCreatedItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedItemsInput
    upsert?: EmployeeUpsertWithoutCreatedItemsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedItemsInput, EmployeeUpdateWithoutCreatedItemsInput>, EmployeeUncheckedUpdateWithoutCreatedItemsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedItemsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedItemsInput, EmployeeUncheckedCreateWithoutUpdatedItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedItemsInput
    upsert?: EmployeeUpsertWithoutUpdatedItemsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedItemsInput, EmployeeUpdateWithoutUpdatedItemsInput>, EmployeeUncheckedUpdateWithoutUpdatedItemsInput>
  }

  export type PatientItemUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<PatientItemCreateWithoutItemInput, PatientItemUncheckedCreateWithoutItemInput> | PatientItemCreateWithoutItemInput[] | PatientItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutItemInput | PatientItemCreateOrConnectWithoutItemInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutItemInput | PatientItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: PatientItemCreateManyItemInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutItemInput | PatientItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutItemInput | PatientItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryTransactionCreateWithoutItemInput, InventoryTransactionUncheckedCreateWithoutItemInput> | InventoryTransactionCreateWithoutItemInput[] | InventoryTransactionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryTransactionCreateOrConnectWithoutItemInput | InventoryTransactionCreateOrConnectWithoutItemInput[]
    upsert?: InventoryTransactionUpsertWithWhereUniqueWithoutItemInput | InventoryTransactionUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryTransactionCreateManyItemInputEnvelope
    set?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    disconnect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    delete?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    connect?: InventoryTransactionWhereUniqueInput | InventoryTransactionWhereUniqueInput[]
    update?: InventoryTransactionUpdateWithWhereUniqueWithoutItemInput | InventoryTransactionUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryTransactionUpdateManyWithWhereWithoutItemInput | InventoryTransactionUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutItemInput, InventoryCountItemUncheckedCreateWithoutItemInput> | InventoryCountItemCreateWithoutItemInput[] | InventoryCountItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutItemInput | InventoryCountItemCreateOrConnectWithoutItemInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutItemInput | InventoryCountItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryCountItemCreateManyItemInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutItemInput | InventoryCountItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutItemInput | InventoryCountItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutItemInput, PurchaseOrderItemUncheckedCreateWithoutItemInput> | PurchaseOrderItemCreateWithoutItemInput[] | PurchaseOrderItemUncheckedCreateWithoutItemInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutItemInput | PurchaseOrderItemCreateOrConnectWithoutItemInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutItemInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: PurchaseOrderItemCreateManyItemInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutItemInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutItemInput | PurchaseOrderItemUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutTreatmentsInput = {
    create?: XOR<CategoryCreateWithoutTreatmentsInput, CategoryUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTreatmentsInput
    connect?: CategoryWhereUniqueInput
  }

  export type PatientTreatmentCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput> | PatientTreatmentCreateWithoutTreatmentInput[] | PatientTreatmentUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutTreatmentInput | PatientTreatmentCreateOrConnectWithoutTreatmentInput[]
    createMany?: PatientTreatmentCreateManyTreatmentInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedTreatmentsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedTreatmentsInput, EmployeeUncheckedCreateWithoutCreatedTreatmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedTreatmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedTreatmentsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedTreatmentsInput, EmployeeUncheckedCreateWithoutUpdatedTreatmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedTreatmentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PatientTreatmentUncheckedCreateNestedManyWithoutTreatmentInput = {
    create?: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput> | PatientTreatmentCreateWithoutTreatmentInput[] | PatientTreatmentUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutTreatmentInput | PatientTreatmentCreateOrConnectWithoutTreatmentInput[]
    createMany?: PatientTreatmentCreateManyTreatmentInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type CategoryUpdateOneRequiredWithoutTreatmentsNestedInput = {
    create?: XOR<CategoryCreateWithoutTreatmentsInput, CategoryUncheckedCreateWithoutTreatmentsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTreatmentsInput
    upsert?: CategoryUpsertWithoutTreatmentsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutTreatmentsInput, CategoryUpdateWithoutTreatmentsInput>, CategoryUncheckedUpdateWithoutTreatmentsInput>
  }

  export type PatientTreatmentUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput> | PatientTreatmentCreateWithoutTreatmentInput[] | PatientTreatmentUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutTreatmentInput | PatientTreatmentCreateOrConnectWithoutTreatmentInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput | PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: PatientTreatmentCreateManyTreatmentInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput | PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput | PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedTreatmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedTreatmentsInput, EmployeeUncheckedCreateWithoutCreatedTreatmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedTreatmentsInput
    upsert?: EmployeeUpsertWithoutCreatedTreatmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedTreatmentsInput, EmployeeUpdateWithoutCreatedTreatmentsInput>, EmployeeUncheckedUpdateWithoutCreatedTreatmentsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedTreatmentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedTreatmentsInput, EmployeeUncheckedCreateWithoutUpdatedTreatmentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedTreatmentsInput
    upsert?: EmployeeUpsertWithoutUpdatedTreatmentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedTreatmentsInput, EmployeeUpdateWithoutUpdatedTreatmentsInput>, EmployeeUncheckedUpdateWithoutUpdatedTreatmentsInput>
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutTreatmentNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput> | PatientTreatmentCreateWithoutTreatmentInput[] | PatientTreatmentUncheckedCreateWithoutTreatmentInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutTreatmentInput | PatientTreatmentCreateOrConnectWithoutTreatmentInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput | PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput[]
    createMany?: PatientTreatmentCreateManyTreatmentInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput | PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput | PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutPackagesInput = {
    create?: XOR<CategoryCreateWithoutPackagesInput, CategoryUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPackagesInput
    connect?: CategoryWhereUniqueInput
  }

  export type PatientPackageCreateNestedManyWithoutPackageInput = {
    create?: XOR<PatientPackageCreateWithoutPackageInput, PatientPackageUncheckedCreateWithoutPackageInput> | PatientPackageCreateWithoutPackageInput[] | PatientPackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutPackageInput | PatientPackageCreateOrConnectWithoutPackageInput[]
    createMany?: PatientPackageCreateManyPackageInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedPackagesInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPackagesInput, EmployeeUncheckedCreateWithoutCreatedPackagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPackagesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPackagesInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPackagesInput, EmployeeUncheckedCreateWithoutUpdatedPackagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPackagesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PatientPackageUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<PatientPackageCreateWithoutPackageInput, PatientPackageUncheckedCreateWithoutPackageInput> | PatientPackageCreateWithoutPackageInput[] | PatientPackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutPackageInput | PatientPackageCreateOrConnectWithoutPackageInput[]
    createMany?: PatientPackageCreateManyPackageInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type CategoryUpdateOneRequiredWithoutPackagesNestedInput = {
    create?: XOR<CategoryCreateWithoutPackagesInput, CategoryUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutPackagesInput
    upsert?: CategoryUpsertWithoutPackagesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutPackagesInput, CategoryUpdateWithoutPackagesInput>, CategoryUncheckedUpdateWithoutPackagesInput>
  }

  export type PatientPackageUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PatientPackageCreateWithoutPackageInput, PatientPackageUncheckedCreateWithoutPackageInput> | PatientPackageCreateWithoutPackageInput[] | PatientPackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutPackageInput | PatientPackageCreateOrConnectWithoutPackageInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutPackageInput | PatientPackageUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PatientPackageCreateManyPackageInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutPackageInput | PatientPackageUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutPackageInput | PatientPackageUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPackagesNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPackagesInput, EmployeeUncheckedCreateWithoutCreatedPackagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPackagesInput
    upsert?: EmployeeUpsertWithoutCreatedPackagesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPackagesInput, EmployeeUpdateWithoutCreatedPackagesInput>, EmployeeUncheckedUpdateWithoutCreatedPackagesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPackagesNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPackagesInput, EmployeeUncheckedCreateWithoutUpdatedPackagesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPackagesInput
    upsert?: EmployeeUpsertWithoutUpdatedPackagesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPackagesInput, EmployeeUpdateWithoutUpdatedPackagesInput>, EmployeeUncheckedUpdateWithoutUpdatedPackagesInput>
  }

  export type PatientPackageUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PatientPackageCreateWithoutPackageInput, PatientPackageUncheckedCreateWithoutPackageInput> | PatientPackageCreateWithoutPackageInput[] | PatientPackageUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutPackageInput | PatientPackageCreateOrConnectWithoutPackageInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutPackageInput | PatientPackageUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PatientPackageCreateManyPackageInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutPackageInput | PatientPackageUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutPackageInput | PatientPackageUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type MedicineCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MedicineCreateWithoutCategoryInput, MedicineUncheckedCreateWithoutCategoryInput> | MedicineCreateWithoutCategoryInput[] | MedicineUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutCategoryInput | MedicineCreateOrConnectWithoutCategoryInput[]
    createMany?: MedicineCreateManyCategoryInputEnvelope
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type ItemCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput> | ItemCreateWithoutCategoryInput[] | ItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCategoryInput | ItemCreateOrConnectWithoutCategoryInput[]
    createMany?: ItemCreateManyCategoryInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type TreatmentCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TreatmentCreateWithoutCategoryInput, TreatmentUncheckedCreateWithoutCategoryInput> | TreatmentCreateWithoutCategoryInput[] | TreatmentUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCategoryInput | TreatmentCreateOrConnectWithoutCategoryInput[]
    createMany?: TreatmentCreateManyCategoryInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type PackageCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PackageCreateWithoutCategoryInput, PackageUncheckedCreateWithoutCategoryInput> | PackageCreateWithoutCategoryInput[] | PackageUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCategoryInput | PackageCreateOrConnectWithoutCategoryInput[]
    createMany?: PackageCreateManyCategoryInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedCategoriesInput = {
    create?: XOR<EmployeeCreateWithoutCreatedCategoriesInput, EmployeeUncheckedCreateWithoutCreatedCategoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedCategoriesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedCategoriesInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedCategoriesInput, EmployeeUncheckedCreateWithoutUpdatedCategoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedCategoriesInput
    connect?: EmployeeWhereUniqueInput
  }

  export type MedicineUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MedicineCreateWithoutCategoryInput, MedicineUncheckedCreateWithoutCategoryInput> | MedicineCreateWithoutCategoryInput[] | MedicineUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutCategoryInput | MedicineCreateOrConnectWithoutCategoryInput[]
    createMany?: MedicineCreateManyCategoryInputEnvelope
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput> | ItemCreateWithoutCategoryInput[] | ItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCategoryInput | ItemCreateOrConnectWithoutCategoryInput[]
    createMany?: ItemCreateManyCategoryInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type TreatmentUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<TreatmentCreateWithoutCategoryInput, TreatmentUncheckedCreateWithoutCategoryInput> | TreatmentCreateWithoutCategoryInput[] | TreatmentUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCategoryInput | TreatmentCreateOrConnectWithoutCategoryInput[]
    createMany?: TreatmentCreateManyCategoryInputEnvelope
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
  }

  export type PackageUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<PackageCreateWithoutCategoryInput, PackageUncheckedCreateWithoutCategoryInput> | PackageCreateWithoutCategoryInput[] | PackageUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCategoryInput | PackageCreateOrConnectWithoutCategoryInput[]
    createMany?: PackageCreateManyCategoryInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type MedicineUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MedicineCreateWithoutCategoryInput, MedicineUncheckedCreateWithoutCategoryInput> | MedicineCreateWithoutCategoryInput[] | MedicineUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutCategoryInput | MedicineCreateOrConnectWithoutCategoryInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutCategoryInput | MedicineUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MedicineCreateManyCategoryInputEnvelope
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutCategoryInput | MedicineUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutCategoryInput | MedicineUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type ItemUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput> | ItemCreateWithoutCategoryInput[] | ItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCategoryInput | ItemCreateOrConnectWithoutCategoryInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutCategoryInput | ItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ItemCreateManyCategoryInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutCategoryInput | ItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutCategoryInput | ItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type TreatmentUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TreatmentCreateWithoutCategoryInput, TreatmentUncheckedCreateWithoutCategoryInput> | TreatmentCreateWithoutCategoryInput[] | TreatmentUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCategoryInput | TreatmentCreateOrConnectWithoutCategoryInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutCategoryInput | TreatmentUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TreatmentCreateManyCategoryInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutCategoryInput | TreatmentUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutCategoryInput | TreatmentUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type PackageUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PackageCreateWithoutCategoryInput, PackageUncheckedCreateWithoutCategoryInput> | PackageCreateWithoutCategoryInput[] | PackageUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCategoryInput | PackageCreateOrConnectWithoutCategoryInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutCategoryInput | PackageUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PackageCreateManyCategoryInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutCategoryInput | PackageUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutCategoryInput | PackageUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedCategoriesNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedCategoriesInput, EmployeeUncheckedCreateWithoutCreatedCategoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedCategoriesInput
    upsert?: EmployeeUpsertWithoutCreatedCategoriesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedCategoriesInput, EmployeeUpdateWithoutCreatedCategoriesInput>, EmployeeUncheckedUpdateWithoutCreatedCategoriesInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedCategoriesNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedCategoriesInput, EmployeeUncheckedCreateWithoutUpdatedCategoriesInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedCategoriesInput
    upsert?: EmployeeUpsertWithoutUpdatedCategoriesInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedCategoriesInput, EmployeeUpdateWithoutUpdatedCategoriesInput>, EmployeeUncheckedUpdateWithoutUpdatedCategoriesInput>
  }

  export type MedicineUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MedicineCreateWithoutCategoryInput, MedicineUncheckedCreateWithoutCategoryInput> | MedicineCreateWithoutCategoryInput[] | MedicineUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutCategoryInput | MedicineCreateOrConnectWithoutCategoryInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutCategoryInput | MedicineUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MedicineCreateManyCategoryInputEnvelope
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutCategoryInput | MedicineUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutCategoryInput | MedicineUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput> | ItemCreateWithoutCategoryInput[] | ItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutCategoryInput | ItemCreateOrConnectWithoutCategoryInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutCategoryInput | ItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ItemCreateManyCategoryInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutCategoryInput | ItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutCategoryInput | ItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type TreatmentUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<TreatmentCreateWithoutCategoryInput, TreatmentUncheckedCreateWithoutCategoryInput> | TreatmentCreateWithoutCategoryInput[] | TreatmentUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: TreatmentCreateOrConnectWithoutCategoryInput | TreatmentCreateOrConnectWithoutCategoryInput[]
    upsert?: TreatmentUpsertWithWhereUniqueWithoutCategoryInput | TreatmentUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: TreatmentCreateManyCategoryInputEnvelope
    set?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    disconnect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    delete?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    connect?: TreatmentWhereUniqueInput | TreatmentWhereUniqueInput[]
    update?: TreatmentUpdateWithWhereUniqueWithoutCategoryInput | TreatmentUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: TreatmentUpdateManyWithWhereWithoutCategoryInput | TreatmentUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
  }

  export type PackageUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<PackageCreateWithoutCategoryInput, PackageUncheckedCreateWithoutCategoryInput> | PackageCreateWithoutCategoryInput[] | PackageUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCategoryInput | PackageCreateOrConnectWithoutCategoryInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutCategoryInput | PackageUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: PackageCreateManyCategoryInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutCategoryInput | PackageUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutCategoryInput | PackageUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type MedicineCreateNestedManyWithoutSupplierInput = {
    create?: XOR<MedicineCreateWithoutSupplierInput, MedicineUncheckedCreateWithoutSupplierInput> | MedicineCreateWithoutSupplierInput[] | MedicineUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutSupplierInput | MedicineCreateOrConnectWithoutSupplierInput[]
    createMany?: MedicineCreateManySupplierInputEnvelope
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type ItemCreateNestedManyWithoutSupplierInput = {
    create?: XOR<ItemCreateWithoutSupplierInput, ItemUncheckedCreateWithoutSupplierInput> | ItemCreateWithoutSupplierInput[] | ItemUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutSupplierInput | ItemCreateOrConnectWithoutSupplierInput[]
    createMany?: ItemCreateManySupplierInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type PurchaseOrderCreateNestedManyWithoutSupplierInput = {
    create?: XOR<PurchaseOrderCreateWithoutSupplierInput, PurchaseOrderUncheckedCreateWithoutSupplierInput> | PurchaseOrderCreateWithoutSupplierInput[] | PurchaseOrderUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutSupplierInput | PurchaseOrderCreateOrConnectWithoutSupplierInput[]
    createMany?: PurchaseOrderCreateManySupplierInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedSuppliersInput = {
    create?: XOR<EmployeeCreateWithoutCreatedSuppliersInput, EmployeeUncheckedCreateWithoutCreatedSuppliersInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedSuppliersInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedSuppliersInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedSuppliersInput, EmployeeUncheckedCreateWithoutUpdatedSuppliersInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedSuppliersInput
    connect?: EmployeeWhereUniqueInput
  }

  export type MedicineUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<MedicineCreateWithoutSupplierInput, MedicineUncheckedCreateWithoutSupplierInput> | MedicineCreateWithoutSupplierInput[] | MedicineUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutSupplierInput | MedicineCreateOrConnectWithoutSupplierInput[]
    createMany?: MedicineCreateManySupplierInputEnvelope
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
  }

  export type ItemUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<ItemCreateWithoutSupplierInput, ItemUncheckedCreateWithoutSupplierInput> | ItemCreateWithoutSupplierInput[] | ItemUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutSupplierInput | ItemCreateOrConnectWithoutSupplierInput[]
    createMany?: ItemCreateManySupplierInputEnvelope
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
  }

  export type PurchaseOrderUncheckedCreateNestedManyWithoutSupplierInput = {
    create?: XOR<PurchaseOrderCreateWithoutSupplierInput, PurchaseOrderUncheckedCreateWithoutSupplierInput> | PurchaseOrderCreateWithoutSupplierInput[] | PurchaseOrderUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutSupplierInput | PurchaseOrderCreateOrConnectWithoutSupplierInput[]
    createMany?: PurchaseOrderCreateManySupplierInputEnvelope
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
  }

  export type MedicineUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<MedicineCreateWithoutSupplierInput, MedicineUncheckedCreateWithoutSupplierInput> | MedicineCreateWithoutSupplierInput[] | MedicineUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutSupplierInput | MedicineCreateOrConnectWithoutSupplierInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutSupplierInput | MedicineUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: MedicineCreateManySupplierInputEnvelope
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutSupplierInput | MedicineUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutSupplierInput | MedicineUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type ItemUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<ItemCreateWithoutSupplierInput, ItemUncheckedCreateWithoutSupplierInput> | ItemCreateWithoutSupplierInput[] | ItemUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutSupplierInput | ItemCreateOrConnectWithoutSupplierInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutSupplierInput | ItemUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: ItemCreateManySupplierInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutSupplierInput | ItemUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutSupplierInput | ItemUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type PurchaseOrderUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutSupplierInput, PurchaseOrderUncheckedCreateWithoutSupplierInput> | PurchaseOrderCreateWithoutSupplierInput[] | PurchaseOrderUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutSupplierInput | PurchaseOrderCreateOrConnectWithoutSupplierInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutSupplierInput | PurchaseOrderUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: PurchaseOrderCreateManySupplierInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutSupplierInput | PurchaseOrderUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutSupplierInput | PurchaseOrderUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedSuppliersNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedSuppliersInput, EmployeeUncheckedCreateWithoutCreatedSuppliersInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedSuppliersInput
    upsert?: EmployeeUpsertWithoutCreatedSuppliersInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedSuppliersInput, EmployeeUpdateWithoutCreatedSuppliersInput>, EmployeeUncheckedUpdateWithoutCreatedSuppliersInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedSuppliersNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedSuppliersInput, EmployeeUncheckedCreateWithoutUpdatedSuppliersInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedSuppliersInput
    upsert?: EmployeeUpsertWithoutUpdatedSuppliersInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedSuppliersInput, EmployeeUpdateWithoutUpdatedSuppliersInput>, EmployeeUncheckedUpdateWithoutUpdatedSuppliersInput>
  }

  export type MedicineUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<MedicineCreateWithoutSupplierInput, MedicineUncheckedCreateWithoutSupplierInput> | MedicineCreateWithoutSupplierInput[] | MedicineUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: MedicineCreateOrConnectWithoutSupplierInput | MedicineCreateOrConnectWithoutSupplierInput[]
    upsert?: MedicineUpsertWithWhereUniqueWithoutSupplierInput | MedicineUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: MedicineCreateManySupplierInputEnvelope
    set?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    disconnect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    delete?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    connect?: MedicineWhereUniqueInput | MedicineWhereUniqueInput[]
    update?: MedicineUpdateWithWhereUniqueWithoutSupplierInput | MedicineUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: MedicineUpdateManyWithWhereWithoutSupplierInput | MedicineUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
  }

  export type ItemUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<ItemCreateWithoutSupplierInput, ItemUncheckedCreateWithoutSupplierInput> | ItemCreateWithoutSupplierInput[] | ItemUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: ItemCreateOrConnectWithoutSupplierInput | ItemCreateOrConnectWithoutSupplierInput[]
    upsert?: ItemUpsertWithWhereUniqueWithoutSupplierInput | ItemUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: ItemCreateManySupplierInputEnvelope
    set?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    disconnect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    delete?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    connect?: ItemWhereUniqueInput | ItemWhereUniqueInput[]
    update?: ItemUpdateWithWhereUniqueWithoutSupplierInput | ItemUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: ItemUpdateManyWithWhereWithoutSupplierInput | ItemUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: ItemScalarWhereInput | ItemScalarWhereInput[]
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutSupplierNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutSupplierInput, PurchaseOrderUncheckedCreateWithoutSupplierInput> | PurchaseOrderCreateWithoutSupplierInput[] | PurchaseOrderUncheckedCreateWithoutSupplierInput[]
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutSupplierInput | PurchaseOrderCreateOrConnectWithoutSupplierInput[]
    upsert?: PurchaseOrderUpsertWithWhereUniqueWithoutSupplierInput | PurchaseOrderUpsertWithWhereUniqueWithoutSupplierInput[]
    createMany?: PurchaseOrderCreateManySupplierInputEnvelope
    set?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    disconnect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    delete?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    connect?: PurchaseOrderWhereUniqueInput | PurchaseOrderWhereUniqueInput[]
    update?: PurchaseOrderUpdateWithWhereUniqueWithoutSupplierInput | PurchaseOrderUpdateWithWhereUniqueWithoutSupplierInput[]
    updateMany?: PurchaseOrderUpdateManyWithWhereWithoutSupplierInput | PurchaseOrderUpdateManyWithWhereWithoutSupplierInput[]
    deleteMany?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
  }

  export type ItemCreateNestedOneWithoutInventoryTransactionsInput = {
    create?: XOR<ItemCreateWithoutInventoryTransactionsInput, ItemUncheckedCreateWithoutInventoryTransactionsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutInventoryTransactionsInput
    connect?: ItemWhereUniqueInput
  }

  export type MedicineCreateNestedOneWithoutInventoryTransactionsInput = {
    create?: XOR<MedicineCreateWithoutInventoryTransactionsInput, MedicineUncheckedCreateWithoutInventoryTransactionsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutInventoryTransactionsInput
    connect?: MedicineWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutInventoryTransactionInput = {
    create?: XOR<EmployeeCreateWithoutInventoryTransactionInput, EmployeeUncheckedCreateWithoutInventoryTransactionInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutInventoryTransactionInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCreatedInventoryTransactionsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedInventoryTransactionsInput, EmployeeUncheckedCreateWithoutCreatedInventoryTransactionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedInventoryTransactionsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedInventoryTransactionsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedInventoryTransactionsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryTransactionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedInventoryTransactionsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type ItemUpdateOneWithoutInventoryTransactionsNestedInput = {
    create?: XOR<ItemCreateWithoutInventoryTransactionsInput, ItemUncheckedCreateWithoutInventoryTransactionsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutInventoryTransactionsInput
    upsert?: ItemUpsertWithoutInventoryTransactionsInput
    disconnect?: ItemWhereInput | boolean
    delete?: ItemWhereInput | boolean
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutInventoryTransactionsInput, ItemUpdateWithoutInventoryTransactionsInput>, ItemUncheckedUpdateWithoutInventoryTransactionsInput>
  }

  export type MedicineUpdateOneWithoutInventoryTransactionsNestedInput = {
    create?: XOR<MedicineCreateWithoutInventoryTransactionsInput, MedicineUncheckedCreateWithoutInventoryTransactionsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutInventoryTransactionsInput
    upsert?: MedicineUpsertWithoutInventoryTransactionsInput
    disconnect?: MedicineWhereInput | boolean
    delete?: MedicineWhereInput | boolean
    connect?: MedicineWhereUniqueInput
    update?: XOR<XOR<MedicineUpdateToOneWithWhereWithoutInventoryTransactionsInput, MedicineUpdateWithoutInventoryTransactionsInput>, MedicineUncheckedUpdateWithoutInventoryTransactionsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutInventoryTransactionNestedInput = {
    create?: XOR<EmployeeCreateWithoutInventoryTransactionInput, EmployeeUncheckedCreateWithoutInventoryTransactionInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutInventoryTransactionInput
    upsert?: EmployeeUpsertWithoutInventoryTransactionInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutInventoryTransactionInput, EmployeeUpdateWithoutInventoryTransactionInput>, EmployeeUncheckedUpdateWithoutInventoryTransactionInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedInventoryTransactionsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedInventoryTransactionsInput, EmployeeUncheckedCreateWithoutCreatedInventoryTransactionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedInventoryTransactionsInput
    upsert?: EmployeeUpsertWithoutCreatedInventoryTransactionsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedInventoryTransactionsInput, EmployeeUpdateWithoutCreatedInventoryTransactionsInput>, EmployeeUncheckedUpdateWithoutCreatedInventoryTransactionsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedInventoryTransactionsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedInventoryTransactionsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryTransactionsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedInventoryTransactionsInput
    upsert?: EmployeeUpsertWithoutUpdatedInventoryTransactionsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedInventoryTransactionsInput, EmployeeUpdateWithoutUpdatedInventoryTransactionsInput>, EmployeeUncheckedUpdateWithoutUpdatedInventoryTransactionsInput>
  }

  export type EmployeeCreateNestedOneWithoutInventoryCountInput = {
    create?: XOR<EmployeeCreateWithoutInventoryCountInput, EmployeeUncheckedCreateWithoutInventoryCountInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutInventoryCountInput
    connect?: EmployeeWhereUniqueInput
  }

  export type InventoryCountItemCreateNestedManyWithoutInventoryCountInput = {
    create?: XOR<InventoryCountItemCreateWithoutInventoryCountInput, InventoryCountItemUncheckedCreateWithoutInventoryCountInput> | InventoryCountItemCreateWithoutInventoryCountInput[] | InventoryCountItemUncheckedCreateWithoutInventoryCountInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutInventoryCountInput | InventoryCountItemCreateOrConnectWithoutInventoryCountInput[]
    createMany?: InventoryCountItemCreateManyInventoryCountInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedInventoryCountsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedInventoryCountsInput, EmployeeUncheckedCreateWithoutCreatedInventoryCountsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedInventoryCountsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedInventoryCountsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedInventoryCountsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryCountsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedInventoryCountsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type InventoryCountItemUncheckedCreateNestedManyWithoutInventoryCountInput = {
    create?: XOR<InventoryCountItemCreateWithoutInventoryCountInput, InventoryCountItemUncheckedCreateWithoutInventoryCountInput> | InventoryCountItemCreateWithoutInventoryCountInput[] | InventoryCountItemUncheckedCreateWithoutInventoryCountInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutInventoryCountInput | InventoryCountItemCreateOrConnectWithoutInventoryCountInput[]
    createMany?: InventoryCountItemCreateManyInventoryCountInputEnvelope
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutInventoryCountNestedInput = {
    create?: XOR<EmployeeCreateWithoutInventoryCountInput, EmployeeUncheckedCreateWithoutInventoryCountInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutInventoryCountInput
    upsert?: EmployeeUpsertWithoutInventoryCountInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutInventoryCountInput, EmployeeUpdateWithoutInventoryCountInput>, EmployeeUncheckedUpdateWithoutInventoryCountInput>
  }

  export type InventoryCountItemUpdateManyWithoutInventoryCountNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutInventoryCountInput, InventoryCountItemUncheckedCreateWithoutInventoryCountInput> | InventoryCountItemCreateWithoutInventoryCountInput[] | InventoryCountItemUncheckedCreateWithoutInventoryCountInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutInventoryCountInput | InventoryCountItemCreateOrConnectWithoutInventoryCountInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutInventoryCountInput | InventoryCountItemUpsertWithWhereUniqueWithoutInventoryCountInput[]
    createMany?: InventoryCountItemCreateManyInventoryCountInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutInventoryCountInput | InventoryCountItemUpdateWithWhereUniqueWithoutInventoryCountInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutInventoryCountInput | InventoryCountItemUpdateManyWithWhereWithoutInventoryCountInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedInventoryCountsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedInventoryCountsInput, EmployeeUncheckedCreateWithoutCreatedInventoryCountsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedInventoryCountsInput
    upsert?: EmployeeUpsertWithoutCreatedInventoryCountsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedInventoryCountsInput, EmployeeUpdateWithoutCreatedInventoryCountsInput>, EmployeeUncheckedUpdateWithoutCreatedInventoryCountsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedInventoryCountsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryCountsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedInventoryCountsInput
    upsert?: EmployeeUpsertWithoutUpdatedInventoryCountsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedInventoryCountsInput, EmployeeUpdateWithoutUpdatedInventoryCountsInput>, EmployeeUncheckedUpdateWithoutUpdatedInventoryCountsInput>
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutInventoryCountNestedInput = {
    create?: XOR<InventoryCountItemCreateWithoutInventoryCountInput, InventoryCountItemUncheckedCreateWithoutInventoryCountInput> | InventoryCountItemCreateWithoutInventoryCountInput[] | InventoryCountItemUncheckedCreateWithoutInventoryCountInput[]
    connectOrCreate?: InventoryCountItemCreateOrConnectWithoutInventoryCountInput | InventoryCountItemCreateOrConnectWithoutInventoryCountInput[]
    upsert?: InventoryCountItemUpsertWithWhereUniqueWithoutInventoryCountInput | InventoryCountItemUpsertWithWhereUniqueWithoutInventoryCountInput[]
    createMany?: InventoryCountItemCreateManyInventoryCountInputEnvelope
    set?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    disconnect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    delete?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    connect?: InventoryCountItemWhereUniqueInput | InventoryCountItemWhereUniqueInput[]
    update?: InventoryCountItemUpdateWithWhereUniqueWithoutInventoryCountInput | InventoryCountItemUpdateWithWhereUniqueWithoutInventoryCountInput[]
    updateMany?: InventoryCountItemUpdateManyWithWhereWithoutInventoryCountInput | InventoryCountItemUpdateManyWithWhereWithoutInventoryCountInput[]
    deleteMany?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
  }

  export type InventoryCountCreateNestedOneWithoutItemsInput = {
    create?: XOR<InventoryCountCreateWithoutItemsInput, InventoryCountUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InventoryCountCreateOrConnectWithoutItemsInput
    connect?: InventoryCountWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutInventoryCountItemsInput = {
    create?: XOR<ItemCreateWithoutInventoryCountItemsInput, ItemUncheckedCreateWithoutInventoryCountItemsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutInventoryCountItemsInput
    connect?: ItemWhereUniqueInput
  }

  export type MedicineCreateNestedOneWithoutInventoryCountItemsInput = {
    create?: XOR<MedicineCreateWithoutInventoryCountItemsInput, MedicineUncheckedCreateWithoutInventoryCountItemsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutInventoryCountItemsInput
    connect?: MedicineWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCreatedInventoryCountItemsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedInventoryCountItemsInput, EmployeeUncheckedCreateWithoutCreatedInventoryCountItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedInventoryCountItemsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedInventoryCountItemsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedInventoryCountItemsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryCountItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedInventoryCountItemsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type InventoryCountUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<InventoryCountCreateWithoutItemsInput, InventoryCountUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InventoryCountCreateOrConnectWithoutItemsInput
    upsert?: InventoryCountUpsertWithoutItemsInput
    connect?: InventoryCountWhereUniqueInput
    update?: XOR<XOR<InventoryCountUpdateToOneWithWhereWithoutItemsInput, InventoryCountUpdateWithoutItemsInput>, InventoryCountUncheckedUpdateWithoutItemsInput>
  }

  export type ItemUpdateOneWithoutInventoryCountItemsNestedInput = {
    create?: XOR<ItemCreateWithoutInventoryCountItemsInput, ItemUncheckedCreateWithoutInventoryCountItemsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutInventoryCountItemsInput
    upsert?: ItemUpsertWithoutInventoryCountItemsInput
    disconnect?: ItemWhereInput | boolean
    delete?: ItemWhereInput | boolean
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutInventoryCountItemsInput, ItemUpdateWithoutInventoryCountItemsInput>, ItemUncheckedUpdateWithoutInventoryCountItemsInput>
  }

  export type MedicineUpdateOneWithoutInventoryCountItemsNestedInput = {
    create?: XOR<MedicineCreateWithoutInventoryCountItemsInput, MedicineUncheckedCreateWithoutInventoryCountItemsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutInventoryCountItemsInput
    upsert?: MedicineUpsertWithoutInventoryCountItemsInput
    disconnect?: MedicineWhereInput | boolean
    delete?: MedicineWhereInput | boolean
    connect?: MedicineWhereUniqueInput
    update?: XOR<XOR<MedicineUpdateToOneWithWhereWithoutInventoryCountItemsInput, MedicineUpdateWithoutInventoryCountItemsInput>, MedicineUncheckedUpdateWithoutInventoryCountItemsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedInventoryCountItemsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedInventoryCountItemsInput, EmployeeUncheckedCreateWithoutCreatedInventoryCountItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedInventoryCountItemsInput
    upsert?: EmployeeUpsertWithoutCreatedInventoryCountItemsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedInventoryCountItemsInput, EmployeeUpdateWithoutCreatedInventoryCountItemsInput>, EmployeeUncheckedUpdateWithoutCreatedInventoryCountItemsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountItemsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedInventoryCountItemsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryCountItemsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedInventoryCountItemsInput
    upsert?: EmployeeUpsertWithoutUpdatedInventoryCountItemsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedInventoryCountItemsInput, EmployeeUpdateWithoutUpdatedInventoryCountItemsInput>, EmployeeUncheckedUpdateWithoutUpdatedInventoryCountItemsInput>
  }

  export type SupplierCreateNestedOneWithoutPurchaseOrdersInput = {
    create?: XOR<SupplierCreateWithoutPurchaseOrdersInput, SupplierUncheckedCreateWithoutPurchaseOrdersInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutPurchaseOrdersInput
    connect?: SupplierWhereUniqueInput
  }

  export type PurchaseOrderItemCreateNestedManyWithoutPurchaseOrderInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutPurchaseOrderInput, PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput> | PurchaseOrderItemCreateWithoutPurchaseOrderInput[] | PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutPurchaseOrderInput | PurchaseOrderItemCreateOrConnectWithoutPurchaseOrderInput[]
    createMany?: PurchaseOrderItemCreateManyPurchaseOrderInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedPOsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPOsInput, EmployeeUncheckedCreateWithoutCreatedPOsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPOsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPOsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPOsInput, EmployeeUncheckedCreateWithoutUpdatedPOsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPOsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutPurchaseOrderInput = {
    create?: XOR<EmployeeCreateWithoutPurchaseOrderInput, EmployeeUncheckedCreateWithoutPurchaseOrderInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPurchaseOrderInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PurchaseOrderItemUncheckedCreateNestedManyWithoutPurchaseOrderInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutPurchaseOrderInput, PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput> | PurchaseOrderItemCreateWithoutPurchaseOrderInput[] | PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutPurchaseOrderInput | PurchaseOrderItemCreateOrConnectWithoutPurchaseOrderInput[]
    createMany?: PurchaseOrderItemCreateManyPurchaseOrderInputEnvelope
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
  }

  export type SupplierUpdateOneRequiredWithoutPurchaseOrdersNestedInput = {
    create?: XOR<SupplierCreateWithoutPurchaseOrdersInput, SupplierUncheckedCreateWithoutPurchaseOrdersInput>
    connectOrCreate?: SupplierCreateOrConnectWithoutPurchaseOrdersInput
    upsert?: SupplierUpsertWithoutPurchaseOrdersInput
    connect?: SupplierWhereUniqueInput
    update?: XOR<XOR<SupplierUpdateToOneWithWhereWithoutPurchaseOrdersInput, SupplierUpdateWithoutPurchaseOrdersInput>, SupplierUncheckedUpdateWithoutPurchaseOrdersInput>
  }

  export type PurchaseOrderItemUpdateManyWithoutPurchaseOrderNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutPurchaseOrderInput, PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput> | PurchaseOrderItemCreateWithoutPurchaseOrderInput[] | PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutPurchaseOrderInput | PurchaseOrderItemCreateOrConnectWithoutPurchaseOrderInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutPurchaseOrderInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutPurchaseOrderInput[]
    createMany?: PurchaseOrderItemCreateManyPurchaseOrderInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutPurchaseOrderInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutPurchaseOrderInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutPurchaseOrderInput | PurchaseOrderItemUpdateManyWithWhereWithoutPurchaseOrderInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPOsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPOsInput, EmployeeUncheckedCreateWithoutCreatedPOsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPOsInput
    upsert?: EmployeeUpsertWithoutCreatedPOsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPOsInput, EmployeeUpdateWithoutCreatedPOsInput>, EmployeeUncheckedUpdateWithoutCreatedPOsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPOsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPOsInput, EmployeeUncheckedCreateWithoutUpdatedPOsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPOsInput
    upsert?: EmployeeUpsertWithoutUpdatedPOsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPOsInput, EmployeeUpdateWithoutUpdatedPOsInput>, EmployeeUncheckedUpdateWithoutUpdatedPOsInput>
  }

  export type EmployeeUpdateOneWithoutPurchaseOrderNestedInput = {
    create?: XOR<EmployeeCreateWithoutPurchaseOrderInput, EmployeeUncheckedCreateWithoutPurchaseOrderInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutPurchaseOrderInput
    upsert?: EmployeeUpsertWithoutPurchaseOrderInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutPurchaseOrderInput, EmployeeUpdateWithoutPurchaseOrderInput>, EmployeeUncheckedUpdateWithoutPurchaseOrderInput>
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutPurchaseOrderNestedInput = {
    create?: XOR<PurchaseOrderItemCreateWithoutPurchaseOrderInput, PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput> | PurchaseOrderItemCreateWithoutPurchaseOrderInput[] | PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput[]
    connectOrCreate?: PurchaseOrderItemCreateOrConnectWithoutPurchaseOrderInput | PurchaseOrderItemCreateOrConnectWithoutPurchaseOrderInput[]
    upsert?: PurchaseOrderItemUpsertWithWhereUniqueWithoutPurchaseOrderInput | PurchaseOrderItemUpsertWithWhereUniqueWithoutPurchaseOrderInput[]
    createMany?: PurchaseOrderItemCreateManyPurchaseOrderInputEnvelope
    set?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    disconnect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    delete?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    connect?: PurchaseOrderItemWhereUniqueInput | PurchaseOrderItemWhereUniqueInput[]
    update?: PurchaseOrderItemUpdateWithWhereUniqueWithoutPurchaseOrderInput | PurchaseOrderItemUpdateWithWhereUniqueWithoutPurchaseOrderInput[]
    updateMany?: PurchaseOrderItemUpdateManyWithWhereWithoutPurchaseOrderInput | PurchaseOrderItemUpdateManyWithWhereWithoutPurchaseOrderInput[]
    deleteMany?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
  }

  export type PurchaseOrderCreateNestedOneWithoutItemsInput = {
    create?: XOR<PurchaseOrderCreateWithoutItemsInput, PurchaseOrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutItemsInput
    connect?: PurchaseOrderWhereUniqueInput
  }

  export type ItemCreateNestedOneWithoutPurchaseOrderItemsInput = {
    create?: XOR<ItemCreateWithoutPurchaseOrderItemsInput, ItemUncheckedCreateWithoutPurchaseOrderItemsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutPurchaseOrderItemsInput
    connect?: ItemWhereUniqueInput
  }

  export type MedicineCreateNestedOneWithoutPurchaseOrderItemsInput = {
    create?: XOR<MedicineCreateWithoutPurchaseOrderItemsInput, MedicineUncheckedCreateWithoutPurchaseOrderItemsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutPurchaseOrderItemsInput
    connect?: MedicineWhereUniqueInput
  }

  export type PurchaseOrderUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutItemsInput, PurchaseOrderUncheckedCreateWithoutItemsInput>
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutItemsInput
    upsert?: PurchaseOrderUpsertWithoutItemsInput
    connect?: PurchaseOrderWhereUniqueInput
    update?: XOR<XOR<PurchaseOrderUpdateToOneWithWhereWithoutItemsInput, PurchaseOrderUpdateWithoutItemsInput>, PurchaseOrderUncheckedUpdateWithoutItemsInput>
  }

  export type ItemUpdateOneWithoutPurchaseOrderItemsNestedInput = {
    create?: XOR<ItemCreateWithoutPurchaseOrderItemsInput, ItemUncheckedCreateWithoutPurchaseOrderItemsInput>
    connectOrCreate?: ItemCreateOrConnectWithoutPurchaseOrderItemsInput
    upsert?: ItemUpsertWithoutPurchaseOrderItemsInput
    disconnect?: ItemWhereInput | boolean
    delete?: ItemWhereInput | boolean
    connect?: ItemWhereUniqueInput
    update?: XOR<XOR<ItemUpdateToOneWithWhereWithoutPurchaseOrderItemsInput, ItemUpdateWithoutPurchaseOrderItemsInput>, ItemUncheckedUpdateWithoutPurchaseOrderItemsInput>
  }

  export type MedicineUpdateOneWithoutPurchaseOrderItemsNestedInput = {
    create?: XOR<MedicineCreateWithoutPurchaseOrderItemsInput, MedicineUncheckedCreateWithoutPurchaseOrderItemsInput>
    connectOrCreate?: MedicineCreateOrConnectWithoutPurchaseOrderItemsInput
    upsert?: MedicineUpsertWithoutPurchaseOrderItemsInput
    disconnect?: MedicineWhereInput | boolean
    delete?: MedicineWhereInput | boolean
    connect?: MedicineWhereUniqueInput
    update?: XOR<XOR<MedicineUpdateToOneWithWhereWithoutPurchaseOrderItemsInput, MedicineUpdateWithoutPurchaseOrderItemsInput>, MedicineUncheckedUpdateWithoutPurchaseOrderItemsInput>
  }

  export type EmployeeCreateNestedOneWithoutBillingsInput = {
    create?: XOR<EmployeeCreateWithoutBillingsInput, EmployeeUncheckedCreateWithoutBillingsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutBillingsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PatientsCreateNestedOneWithoutBillingsInput = {
    create?: XOR<PatientsCreateWithoutBillingsInput, PatientsUncheckedCreateWithoutBillingsInput>
    connectOrCreate?: PatientsCreateOrConnectWithoutBillingsInput
    connect?: PatientsWhereUniqueInput
  }

  export type PatientTreatmentCreateNestedManyWithoutBillingInput = {
    create?: XOR<PatientTreatmentCreateWithoutBillingInput, PatientTreatmentUncheckedCreateWithoutBillingInput> | PatientTreatmentCreateWithoutBillingInput[] | PatientTreatmentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutBillingInput | PatientTreatmentCreateOrConnectWithoutBillingInput[]
    createMany?: PatientTreatmentCreateManyBillingInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientMedicationCreateNestedManyWithoutBillingInput = {
    create?: XOR<PatientMedicationCreateWithoutBillingInput, PatientMedicationUncheckedCreateWithoutBillingInput> | PatientMedicationCreateWithoutBillingInput[] | PatientMedicationUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutBillingInput | PatientMedicationCreateOrConnectWithoutBillingInput[]
    createMany?: PatientMedicationCreateManyBillingInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type PatientPackageCreateNestedManyWithoutBillingInput = {
    create?: XOR<PatientPackageCreateWithoutBillingInput, PatientPackageUncheckedCreateWithoutBillingInput> | PatientPackageCreateWithoutBillingInput[] | PatientPackageUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutBillingInput | PatientPackageCreateOrConnectWithoutBillingInput[]
    createMany?: PatientPackageCreateManyBillingInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type PatientItemCreateNestedManyWithoutBillingInput = {
    create?: XOR<PatientItemCreateWithoutBillingInput, PatientItemUncheckedCreateWithoutBillingInput> | PatientItemCreateWithoutBillingInput[] | PatientItemUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutBillingInput | PatientItemCreateOrConnectWithoutBillingInput[]
    createMany?: PatientItemCreateManyBillingInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type ConsultationsCreateNestedOneWithoutBillingsInput = {
    create?: XOR<ConsultationsCreateWithoutBillingsInput, ConsultationsUncheckedCreateWithoutBillingsInput>
    connectOrCreate?: ConsultationsCreateOrConnectWithoutBillingsInput
    connect?: ConsultationsWhereUniqueInput
  }

  export type PaymentCreateNestedManyWithoutBillingInput = {
    create?: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput> | PaymentCreateWithoutBillingInput[] | PaymentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillingInput | PaymentCreateOrConnectWithoutBillingInput[]
    createMany?: PaymentCreateManyBillingInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EmployeeCreateNestedOneWithoutCreatedBillingsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedBillingsInput, EmployeeUncheckedCreateWithoutCreatedBillingsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedBillingsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedBillingsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedBillingsInput, EmployeeUncheckedCreateWithoutUpdatedBillingsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedBillingsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput = {
    create?: XOR<PatientTreatmentCreateWithoutBillingInput, PatientTreatmentUncheckedCreateWithoutBillingInput> | PatientTreatmentCreateWithoutBillingInput[] | PatientTreatmentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutBillingInput | PatientTreatmentCreateOrConnectWithoutBillingInput[]
    createMany?: PatientTreatmentCreateManyBillingInputEnvelope
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
  }

  export type PatientMedicationUncheckedCreateNestedManyWithoutBillingInput = {
    create?: XOR<PatientMedicationCreateWithoutBillingInput, PatientMedicationUncheckedCreateWithoutBillingInput> | PatientMedicationCreateWithoutBillingInput[] | PatientMedicationUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutBillingInput | PatientMedicationCreateOrConnectWithoutBillingInput[]
    createMany?: PatientMedicationCreateManyBillingInputEnvelope
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
  }

  export type PatientPackageUncheckedCreateNestedManyWithoutBillingInput = {
    create?: XOR<PatientPackageCreateWithoutBillingInput, PatientPackageUncheckedCreateWithoutBillingInput> | PatientPackageCreateWithoutBillingInput[] | PatientPackageUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutBillingInput | PatientPackageCreateOrConnectWithoutBillingInput[]
    createMany?: PatientPackageCreateManyBillingInputEnvelope
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
  }

  export type PatientItemUncheckedCreateNestedManyWithoutBillingInput = {
    create?: XOR<PatientItemCreateWithoutBillingInput, PatientItemUncheckedCreateWithoutBillingInput> | PatientItemCreateWithoutBillingInput[] | PatientItemUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutBillingInput | PatientItemCreateOrConnectWithoutBillingInput[]
    createMany?: PatientItemCreateManyBillingInputEnvelope
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutBillingInput = {
    create?: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput> | PaymentCreateWithoutBillingInput[] | PaymentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillingInput | PaymentCreateOrConnectWithoutBillingInput[]
    createMany?: PaymentCreateManyBillingInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EmployeeUpdateOneWithoutBillingsNestedInput = {
    create?: XOR<EmployeeCreateWithoutBillingsInput, EmployeeUncheckedCreateWithoutBillingsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutBillingsInput
    upsert?: EmployeeUpsertWithoutBillingsInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutBillingsInput, EmployeeUpdateWithoutBillingsInput>, EmployeeUncheckedUpdateWithoutBillingsInput>
  }

  export type PatientsUpdateOneWithoutBillingsNestedInput = {
    create?: XOR<PatientsCreateWithoutBillingsInput, PatientsUncheckedCreateWithoutBillingsInput>
    connectOrCreate?: PatientsCreateOrConnectWithoutBillingsInput
    upsert?: PatientsUpsertWithoutBillingsInput
    disconnect?: PatientsWhereInput | boolean
    delete?: PatientsWhereInput | boolean
    connect?: PatientsWhereUniqueInput
    update?: XOR<XOR<PatientsUpdateToOneWithWhereWithoutBillingsInput, PatientsUpdateWithoutBillingsInput>, PatientsUncheckedUpdateWithoutBillingsInput>
  }

  export type PatientTreatmentUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutBillingInput, PatientTreatmentUncheckedCreateWithoutBillingInput> | PatientTreatmentCreateWithoutBillingInput[] | PatientTreatmentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutBillingInput | PatientTreatmentCreateOrConnectWithoutBillingInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutBillingInput | PatientTreatmentUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PatientTreatmentCreateManyBillingInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutBillingInput | PatientTreatmentUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutBillingInput | PatientTreatmentUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientMedicationUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutBillingInput, PatientMedicationUncheckedCreateWithoutBillingInput> | PatientMedicationCreateWithoutBillingInput[] | PatientMedicationUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutBillingInput | PatientMedicationCreateOrConnectWithoutBillingInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutBillingInput | PatientMedicationUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PatientMedicationCreateManyBillingInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutBillingInput | PatientMedicationUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutBillingInput | PatientMedicationUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type PatientPackageUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PatientPackageCreateWithoutBillingInput, PatientPackageUncheckedCreateWithoutBillingInput> | PatientPackageCreateWithoutBillingInput[] | PatientPackageUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutBillingInput | PatientPackageCreateOrConnectWithoutBillingInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutBillingInput | PatientPackageUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PatientPackageCreateManyBillingInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutBillingInput | PatientPackageUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutBillingInput | PatientPackageUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type PatientItemUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PatientItemCreateWithoutBillingInput, PatientItemUncheckedCreateWithoutBillingInput> | PatientItemCreateWithoutBillingInput[] | PatientItemUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutBillingInput | PatientItemCreateOrConnectWithoutBillingInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutBillingInput | PatientItemUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PatientItemCreateManyBillingInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutBillingInput | PatientItemUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutBillingInput | PatientItemUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type ConsultationsUpdateOneRequiredWithoutBillingsNestedInput = {
    create?: XOR<ConsultationsCreateWithoutBillingsInput, ConsultationsUncheckedCreateWithoutBillingsInput>
    connectOrCreate?: ConsultationsCreateOrConnectWithoutBillingsInput
    upsert?: ConsultationsUpsertWithoutBillingsInput
    connect?: ConsultationsWhereUniqueInput
    update?: XOR<XOR<ConsultationsUpdateToOneWithWhereWithoutBillingsInput, ConsultationsUpdateWithoutBillingsInput>, ConsultationsUncheckedUpdateWithoutBillingsInput>
  }

  export type PaymentUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput> | PaymentCreateWithoutBillingInput[] | PaymentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillingInput | PaymentCreateOrConnectWithoutBillingInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutBillingInput | PaymentUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PaymentCreateManyBillingInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutBillingInput | PaymentUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutBillingInput | PaymentUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedBillingsInput, EmployeeUncheckedCreateWithoutCreatedBillingsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedBillingsInput
    upsert?: EmployeeUpsertWithoutCreatedBillingsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedBillingsInput, EmployeeUpdateWithoutCreatedBillingsInput>, EmployeeUncheckedUpdateWithoutCreatedBillingsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedBillingsInput, EmployeeUncheckedCreateWithoutUpdatedBillingsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedBillingsInput
    upsert?: EmployeeUpsertWithoutUpdatedBillingsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedBillingsInput, EmployeeUpdateWithoutUpdatedBillingsInput>, EmployeeUncheckedUpdateWithoutUpdatedBillingsInput>
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PatientTreatmentCreateWithoutBillingInput, PatientTreatmentUncheckedCreateWithoutBillingInput> | PatientTreatmentCreateWithoutBillingInput[] | PatientTreatmentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientTreatmentCreateOrConnectWithoutBillingInput | PatientTreatmentCreateOrConnectWithoutBillingInput[]
    upsert?: PatientTreatmentUpsertWithWhereUniqueWithoutBillingInput | PatientTreatmentUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PatientTreatmentCreateManyBillingInputEnvelope
    set?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    disconnect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    delete?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    connect?: PatientTreatmentWhereUniqueInput | PatientTreatmentWhereUniqueInput[]
    update?: PatientTreatmentUpdateWithWhereUniqueWithoutBillingInput | PatientTreatmentUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PatientTreatmentUpdateManyWithWhereWithoutBillingInput | PatientTreatmentUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
  }

  export type PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PatientMedicationCreateWithoutBillingInput, PatientMedicationUncheckedCreateWithoutBillingInput> | PatientMedicationCreateWithoutBillingInput[] | PatientMedicationUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientMedicationCreateOrConnectWithoutBillingInput | PatientMedicationCreateOrConnectWithoutBillingInput[]
    upsert?: PatientMedicationUpsertWithWhereUniqueWithoutBillingInput | PatientMedicationUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PatientMedicationCreateManyBillingInputEnvelope
    set?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    disconnect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    delete?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    connect?: PatientMedicationWhereUniqueInput | PatientMedicationWhereUniqueInput[]
    update?: PatientMedicationUpdateWithWhereUniqueWithoutBillingInput | PatientMedicationUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PatientMedicationUpdateManyWithWhereWithoutBillingInput | PatientMedicationUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
  }

  export type PatientPackageUncheckedUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PatientPackageCreateWithoutBillingInput, PatientPackageUncheckedCreateWithoutBillingInput> | PatientPackageCreateWithoutBillingInput[] | PatientPackageUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientPackageCreateOrConnectWithoutBillingInput | PatientPackageCreateOrConnectWithoutBillingInput[]
    upsert?: PatientPackageUpsertWithWhereUniqueWithoutBillingInput | PatientPackageUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PatientPackageCreateManyBillingInputEnvelope
    set?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    disconnect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    delete?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    connect?: PatientPackageWhereUniqueInput | PatientPackageWhereUniqueInput[]
    update?: PatientPackageUpdateWithWhereUniqueWithoutBillingInput | PatientPackageUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PatientPackageUpdateManyWithWhereWithoutBillingInput | PatientPackageUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
  }

  export type PatientItemUncheckedUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PatientItemCreateWithoutBillingInput, PatientItemUncheckedCreateWithoutBillingInput> | PatientItemCreateWithoutBillingInput[] | PatientItemUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PatientItemCreateOrConnectWithoutBillingInput | PatientItemCreateOrConnectWithoutBillingInput[]
    upsert?: PatientItemUpsertWithWhereUniqueWithoutBillingInput | PatientItemUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PatientItemCreateManyBillingInputEnvelope
    set?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    disconnect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    delete?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    connect?: PatientItemWhereUniqueInput | PatientItemWhereUniqueInput[]
    update?: PatientItemUpdateWithWhereUniqueWithoutBillingInput | PatientItemUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PatientItemUpdateManyWithWhereWithoutBillingInput | PatientItemUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutBillingNestedInput = {
    create?: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput> | PaymentCreateWithoutBillingInput[] | PaymentUncheckedCreateWithoutBillingInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutBillingInput | PaymentCreateOrConnectWithoutBillingInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutBillingInput | PaymentUpsertWithWhereUniqueWithoutBillingInput[]
    createMany?: PaymentCreateManyBillingInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutBillingInput | PaymentUpdateWithWhereUniqueWithoutBillingInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutBillingInput | PaymentUpdateManyWithWhereWithoutBillingInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type BillingsCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<BillingsCreateWithoutPaymentsInput, BillingsUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPaymentsInput
    connect?: BillingsWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCreatedPaymentsInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPaymentsInput, EmployeeUncheckedCreateWithoutCreatedPaymentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPaymentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUpdatedPaymentsInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPaymentsInput, EmployeeUncheckedCreateWithoutUpdatedPaymentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPaymentsInput
    connect?: EmployeeWhereUniqueInput
  }

  export type BillingsUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<BillingsCreateWithoutPaymentsInput, BillingsUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: BillingsCreateOrConnectWithoutPaymentsInput
    upsert?: BillingsUpsertWithoutPaymentsInput
    connect?: BillingsWhereUniqueInput
    update?: XOR<XOR<BillingsUpdateToOneWithWhereWithoutPaymentsInput, BillingsUpdateWithoutPaymentsInput>, BillingsUncheckedUpdateWithoutPaymentsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutCreatedPaymentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutCreatedPaymentsInput, EmployeeUncheckedCreateWithoutCreatedPaymentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCreatedPaymentsInput
    upsert?: EmployeeUpsertWithoutCreatedPaymentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCreatedPaymentsInput, EmployeeUpdateWithoutCreatedPaymentsInput>, EmployeeUncheckedUpdateWithoutCreatedPaymentsInput>
  }

  export type EmployeeUpdateOneRequiredWithoutUpdatedPaymentsNestedInput = {
    create?: XOR<EmployeeCreateWithoutUpdatedPaymentsInput, EmployeeUncheckedCreateWithoutUpdatedPaymentsInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUpdatedPaymentsInput
    upsert?: EmployeeUpsertWithoutUpdatedPaymentsInput
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUpdatedPaymentsInput, EmployeeUpdateWithoutUpdatedPaymentsInput>, EmployeeUncheckedUpdateWithoutUpdatedPaymentsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPositionFilter<$PrismaModel = never> = {
    equals?: $Enums.Position | EnumPositionFieldRefInput<$PrismaModel>
    in?: $Enums.Position[] | ListEnumPositionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Position[] | ListEnumPositionFieldRefInput<$PrismaModel>
    not?: NestedEnumPositionFilter<$PrismaModel> | $Enums.Position
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumPositionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Position | EnumPositionFieldRefInput<$PrismaModel>
    in?: $Enums.Position[] | ListEnumPositionFieldRefInput<$PrismaModel>
    notIn?: $Enums.Position[] | ListEnumPositionFieldRefInput<$PrismaModel>
    not?: NestedEnumPositionWithAggregatesFilter<$PrismaModel> | $Enums.Position
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPositionFilter<$PrismaModel>
    _max?: NestedEnumPositionFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EmployeeCreateWithoutUserInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUserInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
  }

  export type EmployeeCreateWithoutCreatedByInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedByInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedByInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedByInput, EmployeeUncheckedCreateWithoutCreatedByInput>
  }

  export type EmployeeCreateManyCreatedByInputEnvelope = {
    data: EmployeeCreateManyCreatedByInput | EmployeeCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutUpdatedByInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedByInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedByInput, EmployeeUncheckedCreateWithoutUpdatedByInput>
  }

  export type EmployeeCreateManyUpdatedByInputEnvelope = {
    data: EmployeeCreateManyUpdatedByInput | EmployeeCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    entityId?: number | null
    entityType?: string | null
    action: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: number
    entityId?: number | null
    entityType?: string | null
    action: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutUserInput = {
    update: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutCreatedByInput, EmployeeUncheckedUpdateWithoutCreatedByInput>
    create: XOR<EmployeeCreateWithoutCreatedByInput, EmployeeUncheckedCreateWithoutCreatedByInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutCreatedByInput, EmployeeUncheckedUpdateWithoutCreatedByInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutCreatedByInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: IntFilter<"Employee"> | number
    userId?: IntFilter<"Employee"> | number
    firstName?: StringFilter<"Employee"> | string
    lastName?: StringFilter<"Employee"> | string
    email?: StringFilter<"Employee"> | string
    department?: StringNullableListFilter<"Employee">
    position?: EnumPositionFilter<"Employee"> | $Enums.Position
    hireDate?: DateTimeNullableFilter<"Employee"> | Date | string | null
    salary?: FloatNullableFilter<"Employee"> | number | null
    phoneNumber?: StringNullableFilter<"Employee"> | string | null
    address?: StringNullableFilter<"Employee"> | string | null
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    createdById?: IntFilter<"Employee"> | number
    updatedById?: IntFilter<"Employee"> | number
    deleted?: BoolFilter<"Employee"> | boolean
    deletedAt?: DateTimeNullableFilter<"Employee"> | Date | string | null
  }

  export type EmployeeUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutUpdatedByInput, EmployeeUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<EmployeeCreateWithoutUpdatedByInput, EmployeeUncheckedCreateWithoutUpdatedByInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutUpdatedByInput, EmployeeUncheckedUpdateWithoutUpdatedByInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutUpdatedByInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    entityId?: IntNullableFilter<"AuditLog"> | number | null
    entityType?: StringNullableFilter<"AuditLog"> | string | null
    userId?: IntFilter<"AuditLog"> | number
    action?: StringFilter<"AuditLog"> | string
    details?: JsonFilter<"AuditLog">
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserCreateWithoutEmployeeInput = {
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    createdEmployees?: EmployeeCreateNestedManyWithoutCreatedByInput
    updatedEmployees?: EmployeeCreateNestedManyWithoutUpdatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployeeInput = {
    id?: number
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    createdEmployees?: EmployeeUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEmployees?: EmployeeUncheckedCreateNestedManyWithoutUpdatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmployeeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
  }

  export type UserCreateWithoutCreatedEmployeesInput = {
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    employee?: EmployeeCreateNestedOneWithoutUserInput
    updatedEmployees?: EmployeeCreateNestedManyWithoutUpdatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedEmployeesInput = {
    id?: number
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    updatedEmployees?: EmployeeUncheckedCreateNestedManyWithoutUpdatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedEmployeesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedEmployeesInput, UserUncheckedCreateWithoutCreatedEmployeesInput>
  }

  export type UserCreateWithoutUpdatedEmployeesInput = {
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    employee?: EmployeeCreateNestedOneWithoutUserInput
    createdEmployees?: EmployeeCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedEmployeesInput = {
    id?: number
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    createdEmployees?: EmployeeUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedEmployeesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedEmployeesInput, UserUncheckedCreateWithoutUpdatedEmployeesInput>
  }

  export type ScheduleCreateWithoutEmployeeInput = {
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedSchedulesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutEmployeeInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type ScheduleCreateOrConnectWithoutEmployeeInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput>
  }

  export type ScheduleCreateManyEmployeeInputEnvelope = {
    data: ScheduleCreateManyEmployeeInput | ScheduleCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentsCreateWithoutDoctorInput = {
    patientId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedAppointmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedAppointmentsInput
  }

  export type AppointmentsUncheckedCreateWithoutDoctorInput = {
    id?: number
    patientId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    createdById: number
    updatedById: number
  }

  export type AppointmentsCreateOrConnectWithoutDoctorInput = {
    where: AppointmentsWhereUniqueInput
    create: XOR<AppointmentsCreateWithoutDoctorInput, AppointmentsUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentsCreateManyDoctorInputEnvelope = {
    data: AppointmentsCreateManyDoctorInput | AppointmentsCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type ConsultationsCreateWithoutDoctorInput = {
    status: string
    appointmentId?: number | null
    triageId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedConsultationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedConsultationsInput
    patient?: PatientsCreateNestedOneWithoutConsultationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutConsultationsInput
    patientTriage?: PatientTriageCreateNestedOneWithoutConsultationsInput
    billings?: BillingsCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsUncheckedCreateWithoutDoctorInput = {
    id?: number
    status: string
    appointmentId?: number | null
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
    billings?: BillingsUncheckedCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsCreateOrConnectWithoutDoctorInput = {
    where: ConsultationsWhereUniqueInput
    create: XOR<ConsultationsCreateWithoutDoctorInput, ConsultationsUncheckedCreateWithoutDoctorInput>
  }

  export type ConsultationsCreateManyDoctorInputEnvelope = {
    data: ConsultationsCreateManyDoctorInput | ConsultationsCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type BillingsCreateWithoutDoctorInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutDoctorInput = {
    id?: number
    patientId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutDoctorInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutDoctorInput, BillingsUncheckedCreateWithoutDoctorInput>
  }

  export type BillingsCreateManyDoctorInputEnvelope = {
    data: BillingsCreateManyDoctorInput | BillingsCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutEmployeeInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    noteType: string
    patientTriage?: PatientTriageCreateNestedOneWithoutNotesInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutEmployeeInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    noteType: string
    patientTriageId?: number | null
    patientAssessmentId?: number | null
  }

  export type NoteCreateOrConnectWithoutEmployeeInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutEmployeeInput, NoteUncheckedCreateWithoutEmployeeInput>
  }

  export type NoteCreateManyEmployeeInputEnvelope = {
    data: NoteCreateManyEmployeeInput | NoteCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type InventoryTransactionCreateWithoutEmployeeInput = {
    type: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    item?: ItemCreateNestedOneWithoutInventoryTransactionsInput
    medicine?: MedicineCreateNestedOneWithoutInventoryTransactionsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryTransactionsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryTransactionsInput
  }

  export type InventoryTransactionUncheckedCreateWithoutEmployeeInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryTransactionCreateOrConnectWithoutEmployeeInput = {
    where: InventoryTransactionWhereUniqueInput
    create: XOR<InventoryTransactionCreateWithoutEmployeeInput, InventoryTransactionUncheckedCreateWithoutEmployeeInput>
  }

  export type InventoryTransactionCreateManyEmployeeInputEnvelope = {
    data: InventoryTransactionCreateManyEmployeeInput | InventoryTransactionCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCountCreateWithoutEmployeeInput = {
    date: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InventoryCountItemCreateNestedManyWithoutInventoryCountInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryCountsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryCountsInput
  }

  export type InventoryCountUncheckedCreateWithoutEmployeeInput = {
    id?: number
    date: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    items?: InventoryCountItemUncheckedCreateNestedManyWithoutInventoryCountInput
  }

  export type InventoryCountCreateOrConnectWithoutEmployeeInput = {
    where: InventoryCountWhereUniqueInput
    create: XOR<InventoryCountCreateWithoutEmployeeInput, InventoryCountUncheckedCreateWithoutEmployeeInput>
  }

  export type InventoryCountCreateManyEmployeeInputEnvelope = {
    data: InventoryCountCreateManyEmployeeInput | InventoryCountCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseOrderCreateWithoutCreatedByInput = {
    orderNumber: string
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutPurchaseOrdersInput
    items?: PurchaseOrderItemCreateNestedManyWithoutPurchaseOrderInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPOsInput
    Employee?: EmployeeCreateNestedOneWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUncheckedCreateWithoutCreatedByInput = {
    id?: number
    orderNumber: string
    supplierId: number
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: number | null
    items?: PurchaseOrderItemUncheckedCreateNestedManyWithoutPurchaseOrderInput
  }

  export type PurchaseOrderCreateOrConnectWithoutCreatedByInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutCreatedByInput, PurchaseOrderUncheckedCreateWithoutCreatedByInput>
  }

  export type PurchaseOrderCreateManyCreatedByInputEnvelope = {
    data: PurchaseOrderCreateManyCreatedByInput | PurchaseOrderCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseOrderCreateWithoutUpdatedByInput = {
    orderNumber: string
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutPurchaseOrdersInput
    items?: PurchaseOrderItemCreateNestedManyWithoutPurchaseOrderInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPOsInput
    Employee?: EmployeeCreateNestedOneWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    orderNumber: string
    supplierId: number
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: number | null
    items?: PurchaseOrderItemUncheckedCreateNestedManyWithoutPurchaseOrderInput
  }

  export type PurchaseOrderCreateOrConnectWithoutUpdatedByInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutUpdatedByInput, PurchaseOrderUncheckedCreateWithoutUpdatedByInput>
  }

  export type PurchaseOrderCreateManyUpdatedByInputEnvelope = {
    data: PurchaseOrderCreateManyUpdatedByInput | PurchaseOrderCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseOrderCreateWithoutEmployeeInput = {
    orderNumber: string
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutPurchaseOrdersInput
    items?: PurchaseOrderItemCreateNestedManyWithoutPurchaseOrderInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPOsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPOsInput
  }

  export type PurchaseOrderUncheckedCreateWithoutEmployeeInput = {
    id?: number
    orderNumber: string
    supplierId: number
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: PurchaseOrderItemUncheckedCreateNestedManyWithoutPurchaseOrderInput
  }

  export type PurchaseOrderCreateOrConnectWithoutEmployeeInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutEmployeeInput, PurchaseOrderUncheckedCreateWithoutEmployeeInput>
  }

  export type PurchaseOrderCreateManyEmployeeInputEnvelope = {
    data: PurchaseOrderCreateManyEmployeeInput | PurchaseOrderCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type ConsultationsCreateWithoutCreatedByInput = {
    status: string
    appointmentId?: number | null
    triageId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedConsultationsInput
    doctor: EmployeeCreateNestedOneWithoutConsultationsInput
    patient?: PatientsCreateNestedOneWithoutConsultationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutConsultationsInput
    patientTriage?: PatientTriageCreateNestedOneWithoutConsultationsInput
    billings?: BillingsCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsUncheckedCreateWithoutCreatedByInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
    billings?: BillingsUncheckedCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsCreateOrConnectWithoutCreatedByInput = {
    where: ConsultationsWhereUniqueInput
    create: XOR<ConsultationsCreateWithoutCreatedByInput, ConsultationsUncheckedCreateWithoutCreatedByInput>
  }

  export type ConsultationsCreateManyCreatedByInputEnvelope = {
    data: ConsultationsCreateManyCreatedByInput | ConsultationsCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ConsultationsCreateWithoutUpdatedByInput = {
    status: string
    appointmentId?: number | null
    triageId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedConsultationsInput
    doctor: EmployeeCreateNestedOneWithoutConsultationsInput
    patient?: PatientsCreateNestedOneWithoutConsultationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutConsultationsInput
    patientTriage?: PatientTriageCreateNestedOneWithoutConsultationsInput
    billings?: BillingsCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    createdById: number
    created_at?: Date | string
    updated_at?: Date | string
    billings?: BillingsUncheckedCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsCreateOrConnectWithoutUpdatedByInput = {
    where: ConsultationsWhereUniqueInput
    create: XOR<ConsultationsCreateWithoutUpdatedByInput, ConsultationsUncheckedCreateWithoutUpdatedByInput>
  }

  export type ConsultationsCreateManyUpdatedByInputEnvelope = {
    data: ConsultationsCreateManyUpdatedByInput | ConsultationsCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentsCreateWithoutCreatedByInput = {
    patientId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    doctor: EmployeeCreateNestedOneWithoutAppointmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedAppointmentsInput
  }

  export type AppointmentsUncheckedCreateWithoutCreatedByInput = {
    id?: number
    patientId: number
    doctorId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    updatedById: number
  }

  export type AppointmentsCreateOrConnectWithoutCreatedByInput = {
    where: AppointmentsWhereUniqueInput
    create: XOR<AppointmentsCreateWithoutCreatedByInput, AppointmentsUncheckedCreateWithoutCreatedByInput>
  }

  export type AppointmentsCreateManyCreatedByInputEnvelope = {
    data: AppointmentsCreateManyCreatedByInput | AppointmentsCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentsCreateWithoutUpdatedByInput = {
    patientId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    doctor: EmployeeCreateNestedOneWithoutAppointmentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedAppointmentsInput
  }

  export type AppointmentsUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    patientId: number
    doctorId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    createdById: number
  }

  export type AppointmentsCreateOrConnectWithoutUpdatedByInput = {
    where: AppointmentsWhereUniqueInput
    create: XOR<AppointmentsCreateWithoutUpdatedByInput, AppointmentsUncheckedCreateWithoutUpdatedByInput>
  }

  export type AppointmentsCreateManyUpdatedByInputEnvelope = {
    data: AppointmentsCreateManyUpdatedByInput | AppointmentsCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientsCreateWithoutCreatedByInput = {
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    deleted?: boolean
    deletedAt?: Date | string | null
    billings?: BillingsCreateNestedManyWithoutPatientInput
    consultations?: ConsultationsCreateNestedManyWithoutPatientInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientsInput
  }

  export type PatientsUncheckedCreateWithoutCreatedByInput = {
    id?: number
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    billings?: BillingsUncheckedCreateNestedManyWithoutPatientInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientsCreateOrConnectWithoutCreatedByInput = {
    where: PatientsWhereUniqueInput
    create: XOR<PatientsCreateWithoutCreatedByInput, PatientsUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientsCreateManyCreatedByInputEnvelope = {
    data: PatientsCreateManyCreatedByInput | PatientsCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientsCreateWithoutUpdatedByInput = {
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    deleted?: boolean
    deletedAt?: Date | string | null
    billings?: BillingsCreateNestedManyWithoutPatientInput
    consultations?: ConsultationsCreateNestedManyWithoutPatientInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientsInput
  }

  export type PatientsUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    createdById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    billings?: BillingsUncheckedCreateNestedManyWithoutPatientInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientsCreateOrConnectWithoutUpdatedByInput = {
    where: PatientsWhereUniqueInput
    create: XOR<PatientsCreateWithoutUpdatedByInput, PatientsUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientsCreateManyUpdatedByInputEnvelope = {
    data: PatientsCreateManyUpdatedByInput | PatientsCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientTriageCreateWithoutCreatedByInput = {
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    problems?: TriageProblemCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsCreateNestedManyWithoutPatientTriageInput
    notes?: NoteCreateNestedManyWithoutPatientTriageInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTriagesInput
  }

  export type PatientTriageUncheckedCreateWithoutCreatedByInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    updatedById: number
    problems?: TriageProblemUncheckedCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyUncheckedCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientTriageInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientTriageInput
  }

  export type PatientTriageCreateOrConnectWithoutCreatedByInput = {
    where: PatientTriageWhereUniqueInput
    create: XOR<PatientTriageCreateWithoutCreatedByInput, PatientTriageUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientTriageCreateManyCreatedByInputEnvelope = {
    data: PatientTriageCreateManyCreatedByInput | PatientTriageCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientTriageCreateWithoutUpdatedByInput = {
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    problems?: TriageProblemCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsCreateNestedManyWithoutPatientTriageInput
    notes?: NoteCreateNestedManyWithoutPatientTriageInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTriagesInput
  }

  export type PatientTriageUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    createdById: number
    problems?: TriageProblemUncheckedCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyUncheckedCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientTriageInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientTriageInput
  }

  export type PatientTriageCreateOrConnectWithoutUpdatedByInput = {
    where: PatientTriageWhereUniqueInput
    create: XOR<PatientTriageCreateWithoutUpdatedByInput, PatientTriageUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientTriageCreateManyUpdatedByInputEnvelope = {
    data: PatientTriageCreateManyUpdatedByInput | PatientTriageCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientAssessmentCreateWithoutCreatedByInput = {
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    consultations?: ConsultationsCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteCreateNestedManyWithoutPatientAssessmentInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientAssessmentsInput
  }

  export type PatientAssessmentUncheckedCreateWithoutCreatedByInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    updatedById: number
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientAssessmentInput
  }

  export type PatientAssessmentCreateOrConnectWithoutCreatedByInput = {
    where: PatientAssessmentWhereUniqueInput
    create: XOR<PatientAssessmentCreateWithoutCreatedByInput, PatientAssessmentUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientAssessmentCreateManyCreatedByInputEnvelope = {
    data: PatientAssessmentCreateManyCreatedByInput | PatientAssessmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientAssessmentCreateWithoutUpdatedByInput = {
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    consultations?: ConsultationsCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteCreateNestedManyWithoutPatientAssessmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientAssessmentsInput
  }

  export type PatientAssessmentUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientAssessmentInput
  }

  export type PatientAssessmentCreateOrConnectWithoutUpdatedByInput = {
    where: PatientAssessmentWhereUniqueInput
    create: XOR<PatientAssessmentCreateWithoutUpdatedByInput, PatientAssessmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientAssessmentCreateManyUpdatedByInputEnvelope = {
    data: PatientAssessmentCreateManyUpdatedByInput | PatientAssessmentCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientTreatmentCreateWithoutCreatedByInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    treatment: TreatmentCreateNestedOneWithoutPatientTreatmentsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientTreatmentsInput
    billing?: BillingsCreateNestedOneWithoutPatientTreatmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateWithoutCreatedByInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PatientTreatmentCreateOrConnectWithoutCreatedByInput = {
    where: PatientTreatmentWhereUniqueInput
    create: XOR<PatientTreatmentCreateWithoutCreatedByInput, PatientTreatmentUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientTreatmentCreateManyCreatedByInputEnvelope = {
    data: PatientTreatmentCreateManyCreatedByInput | PatientTreatmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientTreatmentCreateWithoutUpdatedByInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    treatment: TreatmentCreateNestedOneWithoutPatientTreatmentsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientTreatmentsInput
    billing?: BillingsCreateNestedOneWithoutPatientTreatmentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PatientTreatmentCreateOrConnectWithoutUpdatedByInput = {
    where: PatientTreatmentWhereUniqueInput
    create: XOR<PatientTreatmentCreateWithoutUpdatedByInput, PatientTreatmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientTreatmentCreateManyUpdatedByInputEnvelope = {
    data: PatientTreatmentCreateManyUpdatedByInput | PatientTreatmentCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientMedicationCreateWithoutUpdatedByInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicine: MedicineCreateNestedOneWithoutPatientMedicationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientMedicationsInput
    billing?: BillingsCreateNestedOneWithoutPatientMedicationsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientMedicationsInput
  }

  export type PatientMedicationUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PatientMedicationCreateOrConnectWithoutUpdatedByInput = {
    where: PatientMedicationWhereUniqueInput
    create: XOR<PatientMedicationCreateWithoutUpdatedByInput, PatientMedicationUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientMedicationCreateManyUpdatedByInputEnvelope = {
    data: PatientMedicationCreateManyUpdatedByInput | PatientMedicationCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientMedicationCreateWithoutCreatedByInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicine: MedicineCreateNestedOneWithoutPatientMedicationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientMedicationsInput
    billing?: BillingsCreateNestedOneWithoutPatientMedicationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientMedicationsInput
  }

  export type PatientMedicationUncheckedCreateWithoutCreatedByInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PatientMedicationCreateOrConnectWithoutCreatedByInput = {
    where: PatientMedicationWhereUniqueInput
    create: XOR<PatientMedicationCreateWithoutCreatedByInput, PatientMedicationUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientMedicationCreateManyCreatedByInputEnvelope = {
    data: PatientMedicationCreateManyCreatedByInput | PatientMedicationCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientPackageCreateWithoutUpdatedByInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    package: PackageCreateNestedOneWithoutPatientPackagesInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientPackagesInput
    billing?: BillingsCreateNestedOneWithoutPatientPackagesInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientPackagesInput
  }

  export type PatientPackageUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PatientPackageCreateOrConnectWithoutUpdatedByInput = {
    where: PatientPackageWhereUniqueInput
    create: XOR<PatientPackageCreateWithoutUpdatedByInput, PatientPackageUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientPackageCreateManyUpdatedByInputEnvelope = {
    data: PatientPackageCreateManyUpdatedByInput | PatientPackageCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientPackageCreateWithoutCreatedByInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    package: PackageCreateNestedOneWithoutPatientPackagesInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientPackagesInput
    billing?: BillingsCreateNestedOneWithoutPatientPackagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientPackagesInput
  }

  export type PatientPackageUncheckedCreateWithoutCreatedByInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PatientPackageCreateOrConnectWithoutCreatedByInput = {
    where: PatientPackageWhereUniqueInput
    create: XOR<PatientPackageCreateWithoutCreatedByInput, PatientPackageUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientPackageCreateManyCreatedByInputEnvelope = {
    data: PatientPackageCreateManyCreatedByInput | PatientPackageCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientItemCreateWithoutCreatedByInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    item: ItemCreateNestedOneWithoutPatientItemsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientItemsInput
    billing?: BillingsCreateNestedOneWithoutPatientItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientItemsInput
  }

  export type PatientItemUncheckedCreateWithoutCreatedByInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PatientItemCreateOrConnectWithoutCreatedByInput = {
    where: PatientItemWhereUniqueInput
    create: XOR<PatientItemCreateWithoutCreatedByInput, PatientItemUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientItemCreateManyCreatedByInputEnvelope = {
    data: PatientItemCreateManyCreatedByInput | PatientItemCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientItemCreateWithoutUpdatedByInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    item: ItemCreateNestedOneWithoutPatientItemsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientItemsInput
    billing?: BillingsCreateNestedOneWithoutPatientItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientItemsInput
  }

  export type PatientItemUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PatientItemCreateOrConnectWithoutUpdatedByInput = {
    where: PatientItemWhereUniqueInput
    create: XOR<PatientItemCreateWithoutUpdatedByInput, PatientItemUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientItemCreateManyUpdatedByInputEnvelope = {
    data: PatientItemCreateManyUpdatedByInput | PatientItemCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type MedicineCreateWithoutCreatedByInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutMedicinesInput
    supplier: SupplierCreateNestedOneWithoutMedicinesInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutMedicineInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedMedicinesInput
  }

  export type MedicineUncheckedCreateWithoutCreatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicineCreateOrConnectWithoutCreatedByInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutCreatedByInput, MedicineUncheckedCreateWithoutCreatedByInput>
  }

  export type MedicineCreateManyCreatedByInputEnvelope = {
    data: MedicineCreateManyCreatedByInput | MedicineCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type MedicineCreateWithoutUpdatedByInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutMedicinesInput
    supplier: SupplierCreateNestedOneWithoutMedicinesInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutMedicineInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedMedicinesInput
  }

  export type MedicineUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicineCreateOrConnectWithoutUpdatedByInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutUpdatedByInput, MedicineUncheckedCreateWithoutUpdatedByInput>
  }

  export type MedicineCreateManyUpdatedByInputEnvelope = {
    data: MedicineCreateManyUpdatedByInput | MedicineCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ItemCreateWithoutCreatedByInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutItemsInput
    supplier: SupplierCreateNestedOneWithoutItemsInput
    patientItems?: PatientItemCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutItemInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedItemsInput
  }

  export type ItemUncheckedCreateWithoutCreatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutCreatedByInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput>
  }

  export type ItemCreateManyCreatedByInputEnvelope = {
    data: ItemCreateManyCreatedByInput | ItemCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ItemCreateWithoutUpdatedByInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutItemsInput
    supplier: SupplierCreateNestedOneWithoutItemsInput
    patientItems?: PatientItemCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutItemInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedItemsInput
  }

  export type ItemUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutUpdatedByInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutUpdatedByInput, ItemUncheckedCreateWithoutUpdatedByInput>
  }

  export type ItemCreateManyUpdatedByInputEnvelope = {
    data: ItemCreateManyUpdatedByInput | ItemCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentCreateWithoutCreatedByInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutTreatmentsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutTreatmentInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedTreatmentsInput
  }

  export type TreatmentUncheckedCreateWithoutCreatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutCreatedByInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput>
  }

  export type TreatmentCreateManyCreatedByInputEnvelope = {
    data: TreatmentCreateManyCreatedByInput | TreatmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentCreateWithoutUpdatedByInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutTreatmentsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutTreatmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedTreatmentsInput
  }

  export type TreatmentUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutUpdatedByInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutUpdatedByInput, TreatmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type TreatmentCreateManyUpdatedByInputEnvelope = {
    data: TreatmentCreateManyUpdatedByInput | TreatmentCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PackageCreateWithoutCreatedByInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutPackagesInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPackageInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPackagesInput
  }

  export type PackageUncheckedCreateWithoutCreatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutCreatedByInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput>
  }

  export type PackageCreateManyCreatedByInputEnvelope = {
    data: PackageCreateManyCreatedByInput | PackageCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PackageCreateWithoutUpdatedByInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutPackagesInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPackageInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPackagesInput
  }

  export type PackageUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutUpdatedByInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutUpdatedByInput, PackageUncheckedCreateWithoutUpdatedByInput>
  }

  export type PackageCreateManyUpdatedByInputEnvelope = {
    data: PackageCreateManyUpdatedByInput | PackageCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutCreatedByInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutCategoryInput
    items?: ItemCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentCreateNestedManyWithoutCategoryInput
    packages?: PackageCreateNestedManyWithoutCategoryInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutCreatedByInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutCategoryInput
    items?: ItemUncheckedCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutCategoryInput
    packages?: PackageUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutCreatedByInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput>
  }

  export type CategoryCreateManyCreatedByInputEnvelope = {
    data: CategoryCreateManyCreatedByInput | CategoryCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutUpdatedByInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutCategoryInput
    items?: ItemCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentCreateNestedManyWithoutCategoryInput
    packages?: PackageCreateNestedManyWithoutCategoryInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutCategoryInput
    items?: ItemUncheckedCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutCategoryInput
    packages?: PackageUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutUpdatedByInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput>
  }

  export type CategoryCreateManyUpdatedByInputEnvelope = {
    data: CategoryCreateManyUpdatedByInput | CategoryCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type SupplierCreateWithoutCreatedByInput = {
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutSupplierInput
    items?: ItemCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutSupplierInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedSuppliersInput
  }

  export type SupplierUncheckedCreateWithoutCreatedByInput = {
    id?: number
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutSupplierInput
    items?: ItemUncheckedCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutCreatedByInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutCreatedByInput, SupplierUncheckedCreateWithoutCreatedByInput>
  }

  export type SupplierCreateManyCreatedByInputEnvelope = {
    data: SupplierCreateManyCreatedByInput | SupplierCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type SupplierCreateWithoutUpdatedByInput = {
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutSupplierInput
    items?: ItemCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutSupplierInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedSuppliersInput
  }

  export type SupplierUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutSupplierInput
    items?: ItemUncheckedCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutUpdatedByInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutUpdatedByInput, SupplierUncheckedCreateWithoutUpdatedByInput>
  }

  export type SupplierCreateManyUpdatedByInputEnvelope = {
    data: SupplierCreateManyUpdatedByInput | SupplierCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type InventoryTransactionCreateWithoutCreatedByInput = {
    type: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    item?: ItemCreateNestedOneWithoutInventoryTransactionsInput
    medicine?: MedicineCreateNestedOneWithoutInventoryTransactionsInput
    employee: EmployeeCreateNestedOneWithoutInventoryTransactionInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryTransactionsInput
  }

  export type InventoryTransactionUncheckedCreateWithoutCreatedByInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type InventoryTransactionCreateOrConnectWithoutCreatedByInput = {
    where: InventoryTransactionWhereUniqueInput
    create: XOR<InventoryTransactionCreateWithoutCreatedByInput, InventoryTransactionUncheckedCreateWithoutCreatedByInput>
  }

  export type InventoryTransactionCreateManyCreatedByInputEnvelope = {
    data: InventoryTransactionCreateManyCreatedByInput | InventoryTransactionCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type InventoryTransactionCreateWithoutUpdatedByInput = {
    type: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    item?: ItemCreateNestedOneWithoutInventoryTransactionsInput
    medicine?: MedicineCreateNestedOneWithoutInventoryTransactionsInput
    employee: EmployeeCreateNestedOneWithoutInventoryTransactionInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryTransactionsInput
  }

  export type InventoryTransactionUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type InventoryTransactionCreateOrConnectWithoutUpdatedByInput = {
    where: InventoryTransactionWhereUniqueInput
    create: XOR<InventoryTransactionCreateWithoutUpdatedByInput, InventoryTransactionUncheckedCreateWithoutUpdatedByInput>
  }

  export type InventoryTransactionCreateManyUpdatedByInputEnvelope = {
    data: InventoryTransactionCreateManyUpdatedByInput | InventoryTransactionCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCountCreateWithoutCreatedByInput = {
    date: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutInventoryCountInput
    items?: InventoryCountItemCreateNestedManyWithoutInventoryCountInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryCountsInput
  }

  export type InventoryCountUncheckedCreateWithoutCreatedByInput = {
    id?: number
    date: Date | string
    status: string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    items?: InventoryCountItemUncheckedCreateNestedManyWithoutInventoryCountInput
  }

  export type InventoryCountCreateOrConnectWithoutCreatedByInput = {
    where: InventoryCountWhereUniqueInput
    create: XOR<InventoryCountCreateWithoutCreatedByInput, InventoryCountUncheckedCreateWithoutCreatedByInput>
  }

  export type InventoryCountCreateManyCreatedByInputEnvelope = {
    data: InventoryCountCreateManyCreatedByInput | InventoryCountCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCountCreateWithoutUpdatedByInput = {
    date: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutInventoryCountInput
    items?: InventoryCountItemCreateNestedManyWithoutInventoryCountInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryCountsInput
  }

  export type InventoryCountUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    date: Date | string
    status: string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    items?: InventoryCountItemUncheckedCreateNestedManyWithoutInventoryCountInput
  }

  export type InventoryCountCreateOrConnectWithoutUpdatedByInput = {
    where: InventoryCountWhereUniqueInput
    create: XOR<InventoryCountCreateWithoutUpdatedByInput, InventoryCountUncheckedCreateWithoutUpdatedByInput>
  }

  export type InventoryCountCreateManyUpdatedByInputEnvelope = {
    data: InventoryCountCreateManyUpdatedByInput | InventoryCountCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCountItemCreateWithoutCreatedByInput = {
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryCount: InventoryCountCreateNestedOneWithoutItemsInput
    item?: ItemCreateNestedOneWithoutInventoryCountItemsInput
    medicine?: MedicineCreateNestedOneWithoutInventoryCountItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryCountItemsInput
  }

  export type InventoryCountItemUncheckedCreateWithoutCreatedByInput = {
    id?: number
    inventoryCountId: number
    itemId?: number | null
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type InventoryCountItemCreateOrConnectWithoutCreatedByInput = {
    where: InventoryCountItemWhereUniqueInput
    create: XOR<InventoryCountItemCreateWithoutCreatedByInput, InventoryCountItemUncheckedCreateWithoutCreatedByInput>
  }

  export type InventoryCountItemCreateManyCreatedByInputEnvelope = {
    data: InventoryCountItemCreateManyCreatedByInput | InventoryCountItemCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCountItemCreateWithoutUpdatedByInput = {
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryCount: InventoryCountCreateNestedOneWithoutItemsInput
    item?: ItemCreateNestedOneWithoutInventoryCountItemsInput
    medicine?: MedicineCreateNestedOneWithoutInventoryCountItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryCountItemsInput
  }

  export type InventoryCountItemUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    inventoryCountId: number
    itemId?: number | null
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type InventoryCountItemCreateOrConnectWithoutUpdatedByInput = {
    where: InventoryCountItemWhereUniqueInput
    create: XOR<InventoryCountItemCreateWithoutUpdatedByInput, InventoryCountItemUncheckedCreateWithoutUpdatedByInput>
  }

  export type InventoryCountItemCreateManyUpdatedByInputEnvelope = {
    data: InventoryCountItemCreateManyUpdatedByInput | InventoryCountItemCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type BillingsCreateWithoutCreatedByInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutCreatedByInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutCreatedByInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutCreatedByInput, BillingsUncheckedCreateWithoutCreatedByInput>
  }

  export type BillingsCreateManyCreatedByInputEnvelope = {
    data: BillingsCreateManyCreatedByInput | BillingsCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type BillingsCreateWithoutUpdatedByInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutUpdatedByInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutUpdatedByInput, BillingsUncheckedCreateWithoutUpdatedByInput>
  }

  export type BillingsCreateManyUpdatedByInputEnvelope = {
    data: BillingsCreateManyUpdatedByInput | BillingsCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutCreatedByInput = {
    paymentType: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    billing: BillingsCreateNestedOneWithoutPaymentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutCreatedByInput = {
    id?: number
    paymentType: string
    amount: number
    billingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PaymentCreateOrConnectWithoutCreatedByInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput>
  }

  export type PaymentCreateManyCreatedByInputEnvelope = {
    data: PaymentCreateManyCreatedByInput | PaymentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutUpdatedByInput = {
    paymentType: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    billing: BillingsCreateNestedOneWithoutPaymentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    paymentType: string
    amount: number
    billingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PaymentCreateOrConnectWithoutUpdatedByInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutUpdatedByInput, PaymentUncheckedCreateWithoutUpdatedByInput>
  }

  export type PaymentCreateManyUpdatedByInputEnvelope = {
    data: PaymentCreateManyUpdatedByInput | PaymentCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutCreatedByInput = {
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutSchedulesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutCreatedByInput = {
    id?: number
    employeeId: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type ScheduleCreateOrConnectWithoutCreatedByInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutCreatedByInput, ScheduleUncheckedCreateWithoutCreatedByInput>
  }

  export type ScheduleCreateManyCreatedByInputEnvelope = {
    data: ScheduleCreateManyCreatedByInput | ScheduleCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ScheduleCreateWithoutUpdatedByInput = {
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutSchedulesInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    employeeId: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type ScheduleCreateOrConnectWithoutUpdatedByInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutUpdatedByInput, ScheduleUncheckedCreateWithoutUpdatedByInput>
  }

  export type ScheduleCreateManyUpdatedByInputEnvelope = {
    data: ScheduleCreateManyUpdatedByInput | ScheduleCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEmployeeInput = {
    update: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateWithoutEmployeeInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdEmployees?: EmployeeUpdateManyWithoutCreatedByNestedInput
    updatedEmployees?: EmployeeUpdateManyWithoutUpdatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdEmployees?: EmployeeUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEmployees?: EmployeeUncheckedUpdateManyWithoutUpdatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutCreatedEmployeesInput = {
    update: XOR<UserUpdateWithoutCreatedEmployeesInput, UserUncheckedUpdateWithoutCreatedEmployeesInput>
    create: XOR<UserCreateWithoutCreatedEmployeesInput, UserUncheckedCreateWithoutCreatedEmployeesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedEmployeesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedEmployeesInput, UserUncheckedUpdateWithoutCreatedEmployeesInput>
  }

  export type UserUpdateWithoutCreatedEmployeesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    updatedEmployees?: EmployeeUpdateManyWithoutUpdatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedEmployeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    updatedEmployees?: EmployeeUncheckedUpdateManyWithoutUpdatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutUpdatedEmployeesInput = {
    update: XOR<UserUpdateWithoutUpdatedEmployeesInput, UserUncheckedUpdateWithoutUpdatedEmployeesInput>
    create: XOR<UserCreateWithoutUpdatedEmployeesInput, UserUncheckedCreateWithoutUpdatedEmployeesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedEmployeesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedEmployeesInput, UserUncheckedUpdateWithoutUpdatedEmployeesInput>
  }

  export type UserUpdateWithoutUpdatedEmployeesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    createdEmployees?: EmployeeUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedEmployeesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    createdEmployees?: EmployeeUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ScheduleUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutEmployeeInput, ScheduleUncheckedUpdateWithoutEmployeeInput>
    create: XOR<ScheduleCreateWithoutEmployeeInput, ScheduleUncheckedCreateWithoutEmployeeInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutEmployeeInput, ScheduleUncheckedUpdateWithoutEmployeeInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutEmployeeInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: IntFilter<"Schedule"> | number
    employeeId?: IntFilter<"Schedule"> | number
    startTime?: DateTimeFilter<"Schedule"> | Date | string
    endTime?: DateTimeFilter<"Schedule"> | Date | string
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    createdById?: IntFilter<"Schedule"> | number
    updatedById?: IntFilter<"Schedule"> | number
  }

  export type AppointmentsUpsertWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentsWhereUniqueInput
    update: XOR<AppointmentsUpdateWithoutDoctorInput, AppointmentsUncheckedUpdateWithoutDoctorInput>
    create: XOR<AppointmentsCreateWithoutDoctorInput, AppointmentsUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentsUpdateWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentsWhereUniqueInput
    data: XOR<AppointmentsUpdateWithoutDoctorInput, AppointmentsUncheckedUpdateWithoutDoctorInput>
  }

  export type AppointmentsUpdateManyWithWhereWithoutDoctorInput = {
    where: AppointmentsScalarWhereInput
    data: XOR<AppointmentsUpdateManyMutationInput, AppointmentsUncheckedUpdateManyWithoutDoctorInput>
  }

  export type AppointmentsScalarWhereInput = {
    AND?: AppointmentsScalarWhereInput | AppointmentsScalarWhereInput[]
    OR?: AppointmentsScalarWhereInput[]
    NOT?: AppointmentsScalarWhereInput | AppointmentsScalarWhereInput[]
    id?: IntFilter<"Appointments"> | number
    patientId?: IntFilter<"Appointments"> | number
    doctorId?: IntFilter<"Appointments"> | number
    date?: DateTimeFilter<"Appointments"> | Date | string
    notes?: StringFilter<"Appointments"> | string
    email?: StringFilter<"Appointments"> | string
    endTime?: StringFilter<"Appointments"> | string
    firstName?: StringFilter<"Appointments"> | string
    lastName?: StringFilter<"Appointments"> | string
    countryCode?: StringFilter<"Appointments"> | string
    phoneNumber?: StringFilter<"Appointments"> | string
    startTime?: StringFilter<"Appointments"> | string
    created_at?: DateTimeFilter<"Appointments"> | Date | string
    updated_at?: DateTimeFilter<"Appointments"> | Date | string
    createdById?: IntFilter<"Appointments"> | number
    updatedById?: IntFilter<"Appointments"> | number
  }

  export type ConsultationsUpsertWithWhereUniqueWithoutDoctorInput = {
    where: ConsultationsWhereUniqueInput
    update: XOR<ConsultationsUpdateWithoutDoctorInput, ConsultationsUncheckedUpdateWithoutDoctorInput>
    create: XOR<ConsultationsCreateWithoutDoctorInput, ConsultationsUncheckedCreateWithoutDoctorInput>
  }

  export type ConsultationsUpdateWithWhereUniqueWithoutDoctorInput = {
    where: ConsultationsWhereUniqueInput
    data: XOR<ConsultationsUpdateWithoutDoctorInput, ConsultationsUncheckedUpdateWithoutDoctorInput>
  }

  export type ConsultationsUpdateManyWithWhereWithoutDoctorInput = {
    where: ConsultationsScalarWhereInput
    data: XOR<ConsultationsUpdateManyMutationInput, ConsultationsUncheckedUpdateManyWithoutDoctorInput>
  }

  export type ConsultationsScalarWhereInput = {
    AND?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
    OR?: ConsultationsScalarWhereInput[]
    NOT?: ConsultationsScalarWhereInput | ConsultationsScalarWhereInput[]
    id?: IntFilter<"Consultations"> | number
    status?: StringFilter<"Consultations"> | string
    appointmentId?: IntNullableFilter<"Consultations"> | number | null
    doctorId?: IntFilter<"Consultations"> | number
    patientId?: IntNullableFilter<"Consultations"> | number | null
    triageId?: IntNullableFilter<"Consultations"> | number | null
    patientAssessmentId?: IntNullableFilter<"Consultations"> | number | null
    patientTriageId?: IntNullableFilter<"Consultations"> | number | null
    createdById?: IntFilter<"Consultations"> | number
    updatedById?: IntFilter<"Consultations"> | number
    created_at?: DateTimeFilter<"Consultations"> | Date | string
    updated_at?: DateTimeFilter<"Consultations"> | Date | string
  }

  export type BillingsUpsertWithWhereUniqueWithoutDoctorInput = {
    where: BillingsWhereUniqueInput
    update: XOR<BillingsUpdateWithoutDoctorInput, BillingsUncheckedUpdateWithoutDoctorInput>
    create: XOR<BillingsCreateWithoutDoctorInput, BillingsUncheckedCreateWithoutDoctorInput>
  }

  export type BillingsUpdateWithWhereUniqueWithoutDoctorInput = {
    where: BillingsWhereUniqueInput
    data: XOR<BillingsUpdateWithoutDoctorInput, BillingsUncheckedUpdateWithoutDoctorInput>
  }

  export type BillingsUpdateManyWithWhereWithoutDoctorInput = {
    where: BillingsScalarWhereInput
    data: XOR<BillingsUpdateManyMutationInput, BillingsUncheckedUpdateManyWithoutDoctorInput>
  }

  export type BillingsScalarWhereInput = {
    AND?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
    OR?: BillingsScalarWhereInput[]
    NOT?: BillingsScalarWhereInput | BillingsScalarWhereInput[]
    id?: IntFilter<"Billings"> | number
    patientId?: IntNullableFilter<"Billings"> | number | null
    doctorId?: IntNullableFilter<"Billings"> | number | null
    consultationId?: IntFilter<"Billings"> | number
    total?: FloatNullableFilter<"Billings"> | number | null
    tax?: FloatNullableFilter<"Billings"> | number | null
    discount?: FloatNullableFilter<"Billings"> | number | null
    previousBalance?: FloatNullableFilter<"Billings"> | number | null
    paymentMade?: StringNullableFilter<"Billings"> | string | null
    subtotal?: FloatNullableFilter<"Billings"> | number | null
    status?: StringFilter<"Billings"> | string
    createdAt?: DateTimeFilter<"Billings"> | Date | string
    updatedAt?: DateTimeFilter<"Billings"> | Date | string
    createdById?: IntFilter<"Billings"> | number
    updatedById?: IntFilter<"Billings"> | number
  }

  export type NoteUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutEmployeeInput, NoteUncheckedUpdateWithoutEmployeeInput>
    create: XOR<NoteCreateWithoutEmployeeInput, NoteUncheckedCreateWithoutEmployeeInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutEmployeeInput, NoteUncheckedUpdateWithoutEmployeeInput>
  }

  export type NoteUpdateManyWithWhereWithoutEmployeeInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    id?: IntFilter<"Note"> | number
    content?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    updatedAt?: DateTimeFilter<"Note"> | Date | string
    createdBy?: IntFilter<"Note"> | number
    noteType?: StringFilter<"Note"> | string
    patientTriageId?: IntNullableFilter<"Note"> | number | null
    patientAssessmentId?: IntNullableFilter<"Note"> | number | null
  }

  export type InventoryTransactionUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: InventoryTransactionWhereUniqueInput
    update: XOR<InventoryTransactionUpdateWithoutEmployeeInput, InventoryTransactionUncheckedUpdateWithoutEmployeeInput>
    create: XOR<InventoryTransactionCreateWithoutEmployeeInput, InventoryTransactionUncheckedCreateWithoutEmployeeInput>
  }

  export type InventoryTransactionUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: InventoryTransactionWhereUniqueInput
    data: XOR<InventoryTransactionUpdateWithoutEmployeeInput, InventoryTransactionUncheckedUpdateWithoutEmployeeInput>
  }

  export type InventoryTransactionUpdateManyWithWhereWithoutEmployeeInput = {
    where: InventoryTransactionScalarWhereInput
    data: XOR<InventoryTransactionUpdateManyMutationInput, InventoryTransactionUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type InventoryTransactionScalarWhereInput = {
    AND?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
    OR?: InventoryTransactionScalarWhereInput[]
    NOT?: InventoryTransactionScalarWhereInput | InventoryTransactionScalarWhereInput[]
    id?: IntFilter<"InventoryTransaction"> | number
    itemId?: IntNullableFilter<"InventoryTransaction"> | number | null
    medicineId?: IntNullableFilter<"InventoryTransaction"> | number | null
    type?: StringFilter<"InventoryTransaction"> | string
    quantity?: IntFilter<"InventoryTransaction"> | number
    date?: DateTimeFilter<"InventoryTransaction"> | Date | string
    employeeId?: IntFilter<"InventoryTransaction"> | number
    createdAt?: DateTimeFilter<"InventoryTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryTransaction"> | Date | string
    createdById?: IntFilter<"InventoryTransaction"> | number
    updatedById?: IntFilter<"InventoryTransaction"> | number
  }

  export type InventoryCountUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: InventoryCountWhereUniqueInput
    update: XOR<InventoryCountUpdateWithoutEmployeeInput, InventoryCountUncheckedUpdateWithoutEmployeeInput>
    create: XOR<InventoryCountCreateWithoutEmployeeInput, InventoryCountUncheckedCreateWithoutEmployeeInput>
  }

  export type InventoryCountUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: InventoryCountWhereUniqueInput
    data: XOR<InventoryCountUpdateWithoutEmployeeInput, InventoryCountUncheckedUpdateWithoutEmployeeInput>
  }

  export type InventoryCountUpdateManyWithWhereWithoutEmployeeInput = {
    where: InventoryCountScalarWhereInput
    data: XOR<InventoryCountUpdateManyMutationInput, InventoryCountUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type InventoryCountScalarWhereInput = {
    AND?: InventoryCountScalarWhereInput | InventoryCountScalarWhereInput[]
    OR?: InventoryCountScalarWhereInput[]
    NOT?: InventoryCountScalarWhereInput | InventoryCountScalarWhereInput[]
    id?: IntFilter<"InventoryCount"> | number
    date?: DateTimeFilter<"InventoryCount"> | Date | string
    status?: StringFilter<"InventoryCount"> | string
    employeeId?: IntFilter<"InventoryCount"> | number
    createdAt?: DateTimeFilter<"InventoryCount"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryCount"> | Date | string
    createdById?: IntFilter<"InventoryCount"> | number
    updatedById?: IntFilter<"InventoryCount"> | number
  }

  export type PurchaseOrderUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PurchaseOrderWhereUniqueInput
    update: XOR<PurchaseOrderUpdateWithoutCreatedByInput, PurchaseOrderUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PurchaseOrderCreateWithoutCreatedByInput, PurchaseOrderUncheckedCreateWithoutCreatedByInput>
  }

  export type PurchaseOrderUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PurchaseOrderWhereUniqueInput
    data: XOR<PurchaseOrderUpdateWithoutCreatedByInput, PurchaseOrderUncheckedUpdateWithoutCreatedByInput>
  }

  export type PurchaseOrderUpdateManyWithWhereWithoutCreatedByInput = {
    where: PurchaseOrderScalarWhereInput
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PurchaseOrderScalarWhereInput = {
    AND?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
    OR?: PurchaseOrderScalarWhereInput[]
    NOT?: PurchaseOrderScalarWhereInput | PurchaseOrderScalarWhereInput[]
    id?: IntFilter<"PurchaseOrder"> | number
    orderNumber?: StringFilter<"PurchaseOrder"> | string
    supplierId?: IntFilter<"PurchaseOrder"> | number
    orderDate?: DateTimeFilter<"PurchaseOrder"> | Date | string
    status?: StringFilter<"PurchaseOrder"> | string
    totalAmount?: FloatFilter<"PurchaseOrder"> | number
    notes?: StringNullableFilter<"PurchaseOrder"> | string | null
    createdById?: IntFilter<"PurchaseOrder"> | number
    updatedById?: IntFilter<"PurchaseOrder"> | number
    createdAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseOrder"> | Date | string
    employeeId?: IntNullableFilter<"PurchaseOrder"> | number | null
  }

  export type PurchaseOrderUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PurchaseOrderWhereUniqueInput
    update: XOR<PurchaseOrderUpdateWithoutUpdatedByInput, PurchaseOrderUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PurchaseOrderCreateWithoutUpdatedByInput, PurchaseOrderUncheckedCreateWithoutUpdatedByInput>
  }

  export type PurchaseOrderUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PurchaseOrderWhereUniqueInput
    data: XOR<PurchaseOrderUpdateWithoutUpdatedByInput, PurchaseOrderUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PurchaseOrderUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PurchaseOrderScalarWhereInput
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PurchaseOrderUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: PurchaseOrderWhereUniqueInput
    update: XOR<PurchaseOrderUpdateWithoutEmployeeInput, PurchaseOrderUncheckedUpdateWithoutEmployeeInput>
    create: XOR<PurchaseOrderCreateWithoutEmployeeInput, PurchaseOrderUncheckedCreateWithoutEmployeeInput>
  }

  export type PurchaseOrderUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: PurchaseOrderWhereUniqueInput
    data: XOR<PurchaseOrderUpdateWithoutEmployeeInput, PurchaseOrderUncheckedUpdateWithoutEmployeeInput>
  }

  export type PurchaseOrderUpdateManyWithWhereWithoutEmployeeInput = {
    where: PurchaseOrderScalarWhereInput
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type ConsultationsUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ConsultationsWhereUniqueInput
    update: XOR<ConsultationsUpdateWithoutCreatedByInput, ConsultationsUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ConsultationsCreateWithoutCreatedByInput, ConsultationsUncheckedCreateWithoutCreatedByInput>
  }

  export type ConsultationsUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ConsultationsWhereUniqueInput
    data: XOR<ConsultationsUpdateWithoutCreatedByInput, ConsultationsUncheckedUpdateWithoutCreatedByInput>
  }

  export type ConsultationsUpdateManyWithWhereWithoutCreatedByInput = {
    where: ConsultationsScalarWhereInput
    data: XOR<ConsultationsUpdateManyMutationInput, ConsultationsUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ConsultationsUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ConsultationsWhereUniqueInput
    update: XOR<ConsultationsUpdateWithoutUpdatedByInput, ConsultationsUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ConsultationsCreateWithoutUpdatedByInput, ConsultationsUncheckedCreateWithoutUpdatedByInput>
  }

  export type ConsultationsUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ConsultationsWhereUniqueInput
    data: XOR<ConsultationsUpdateWithoutUpdatedByInput, ConsultationsUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ConsultationsUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ConsultationsScalarWhereInput
    data: XOR<ConsultationsUpdateManyMutationInput, ConsultationsUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type AppointmentsUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: AppointmentsWhereUniqueInput
    update: XOR<AppointmentsUpdateWithoutCreatedByInput, AppointmentsUncheckedUpdateWithoutCreatedByInput>
    create: XOR<AppointmentsCreateWithoutCreatedByInput, AppointmentsUncheckedCreateWithoutCreatedByInput>
  }

  export type AppointmentsUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: AppointmentsWhereUniqueInput
    data: XOR<AppointmentsUpdateWithoutCreatedByInput, AppointmentsUncheckedUpdateWithoutCreatedByInput>
  }

  export type AppointmentsUpdateManyWithWhereWithoutCreatedByInput = {
    where: AppointmentsScalarWhereInput
    data: XOR<AppointmentsUpdateManyMutationInput, AppointmentsUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type AppointmentsUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: AppointmentsWhereUniqueInput
    update: XOR<AppointmentsUpdateWithoutUpdatedByInput, AppointmentsUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<AppointmentsCreateWithoutUpdatedByInput, AppointmentsUncheckedCreateWithoutUpdatedByInput>
  }

  export type AppointmentsUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: AppointmentsWhereUniqueInput
    data: XOR<AppointmentsUpdateWithoutUpdatedByInput, AppointmentsUncheckedUpdateWithoutUpdatedByInput>
  }

  export type AppointmentsUpdateManyWithWhereWithoutUpdatedByInput = {
    where: AppointmentsScalarWhereInput
    data: XOR<AppointmentsUpdateManyMutationInput, AppointmentsUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PatientsUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientsWhereUniqueInput
    update: XOR<PatientsUpdateWithoutCreatedByInput, PatientsUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientsCreateWithoutCreatedByInput, PatientsUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientsUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientsWhereUniqueInput
    data: XOR<PatientsUpdateWithoutCreatedByInput, PatientsUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientsUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientsScalarWhereInput
    data: XOR<PatientsUpdateManyMutationInput, PatientsUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientsScalarWhereInput = {
    AND?: PatientsScalarWhereInput | PatientsScalarWhereInput[]
    OR?: PatientsScalarWhereInput[]
    NOT?: PatientsScalarWhereInput | PatientsScalarWhereInput[]
    id?: IntFilter<"Patients"> | number
    firstName?: StringFilter<"Patients"> | string
    middleName?: StringNullableFilter<"Patients"> | string | null
    lastName?: StringFilter<"Patients"> | string
    nationality?: StringNullableFilter<"Patients"> | string | null
    maritalStatus?: StringNullableFilter<"Patients"> | string | null
    dob?: StringNullableFilter<"Patients"> | string | null
    gender?: StringNullableFilter<"Patients"> | string | null
    source?: StringNullableFilter<"Patients"> | string | null
    email?: StringFilter<"Patients"> | string
    countryCode?: StringFilter<"Patients"> | string
    phoneNumber?: StringFilter<"Patients"> | string
    address?: StringNullableFilter<"Patients"> | string | null
    district?: StringNullableFilter<"Patients"> | string | null
    emirate?: StringNullableFilter<"Patients"> | string | null
    country?: StringNullableFilter<"Patients"> | string | null
    visaType?: StringNullableFilter<"Patients"> | string | null
    nationalID?: StringNullableFilter<"Patients"> | string | null
    otherID?: StringNullableFilter<"Patients"> | string | null
    emergencyContactNumber?: StringNullableFilter<"Patients"> | string | null
    emergencyContactName?: StringNullableFilter<"Patients"> | string | null
    emergencyContactRelationship?: StringNullableFilter<"Patients"> | string | null
    allergies?: StringNullableFilter<"Patients"> | string | null
    profilePicture?: StringNullableFilter<"Patients"> | string | null
    createdAt?: DateTimeFilter<"Patients"> | Date | string
    updatedAt?: DateTimeFilter<"Patients"> | Date | string
    doctorId?: IntNullableFilter<"Patients"> | number | null
    mrNumber?: StringFilter<"Patients"> | string
    appointmentId?: IntNullableFilter<"Patients"> | number | null
    createdById?: IntFilter<"Patients"> | number
    updatedById?: IntFilter<"Patients"> | number
    deleted?: BoolFilter<"Patients"> | boolean
    deletedAt?: DateTimeNullableFilter<"Patients"> | Date | string | null
  }

  export type PatientsUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientsWhereUniqueInput
    update: XOR<PatientsUpdateWithoutUpdatedByInput, PatientsUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PatientsCreateWithoutUpdatedByInput, PatientsUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientsUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientsWhereUniqueInput
    data: XOR<PatientsUpdateWithoutUpdatedByInput, PatientsUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PatientsUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PatientsScalarWhereInput
    data: XOR<PatientsUpdateManyMutationInput, PatientsUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PatientTriageUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientTriageWhereUniqueInput
    update: XOR<PatientTriageUpdateWithoutCreatedByInput, PatientTriageUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientTriageCreateWithoutCreatedByInput, PatientTriageUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientTriageUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientTriageWhereUniqueInput
    data: XOR<PatientTriageUpdateWithoutCreatedByInput, PatientTriageUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientTriageUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientTriageScalarWhereInput
    data: XOR<PatientTriageUpdateManyMutationInput, PatientTriageUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientTriageScalarWhereInput = {
    AND?: PatientTriageScalarWhereInput | PatientTriageScalarWhereInput[]
    OR?: PatientTriageScalarWhereInput[]
    NOT?: PatientTriageScalarWhereInput | PatientTriageScalarWhereInput[]
    id?: IntFilter<"PatientTriage"> | number
    status?: StringNullableFilter<"PatientTriage"> | string | null
    priority?: StringNullableFilter<"PatientTriage"> | string | null
    immunizationUpToDate?: StringNullableFilter<"PatientTriage"> | string | null
    immunizationRemarks?: StringNullableFilter<"PatientTriage"> | string | null
    allergenHistory?: StringNullableFilter<"PatientTriage"> | string | null
    systolic?: StringNullableFilter<"PatientTriage"> | string | null
    diastolic?: StringNullableFilter<"PatientTriage"> | string | null
    temperature?: StringNullableFilter<"PatientTriage"> | string | null
    height?: StringNullableFilter<"PatientTriage"> | string | null
    weight?: StringNullableFilter<"PatientTriage"> | string | null
    spO2?: StringNullableFilter<"PatientTriage"> | string | null
    bmi?: StringNullableFilter<"PatientTriage"> | string | null
    pulse?: StringNullableFilter<"PatientTriage"> | string | null
    pastMedicalHistory?: StringNullableFilter<"PatientTriage"> | string | null
    familyHistory?: StringNullableFilter<"PatientTriage"> | string | null
    socialHistory?: StringNullableFilter<"PatientTriage"> | string | null
    surgicalHistory?: StringNullableFilter<"PatientTriage"> | string | null
    creams?: StringNullableFilter<"PatientTriage"> | string | null
    nurseAssessment?: StringNullableFilter<"PatientTriage"> | string | null
    medications?: StringNullableFilter<"PatientTriage"> | string | null
    otherNotes?: StringNullableFilter<"PatientTriage"> | string | null
    created_at?: DateTimeFilter<"PatientTriage"> | Date | string
    updated_at?: DateTimeFilter<"PatientTriage"> | Date | string
    painScale?: IntNullableFilter<"PatientTriage"> | number | null
    currentHistory?: StringNullableFilter<"PatientTriage"> | string | null
    createdById?: IntFilter<"PatientTriage"> | number
    updatedById?: IntFilter<"PatientTriage"> | number
  }

  export type PatientTriageUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientTriageWhereUniqueInput
    update: XOR<PatientTriageUpdateWithoutUpdatedByInput, PatientTriageUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PatientTriageCreateWithoutUpdatedByInput, PatientTriageUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientTriageUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientTriageWhereUniqueInput
    data: XOR<PatientTriageUpdateWithoutUpdatedByInput, PatientTriageUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PatientTriageUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PatientTriageScalarWhereInput
    data: XOR<PatientTriageUpdateManyMutationInput, PatientTriageUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PatientAssessmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientAssessmentWhereUniqueInput
    update: XOR<PatientAssessmentUpdateWithoutCreatedByInput, PatientAssessmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientAssessmentCreateWithoutCreatedByInput, PatientAssessmentUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientAssessmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientAssessmentWhereUniqueInput
    data: XOR<PatientAssessmentUpdateWithoutCreatedByInput, PatientAssessmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientAssessmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientAssessmentScalarWhereInput
    data: XOR<PatientAssessmentUpdateManyMutationInput, PatientAssessmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientAssessmentScalarWhereInput = {
    AND?: PatientAssessmentScalarWhereInput | PatientAssessmentScalarWhereInput[]
    OR?: PatientAssessmentScalarWhereInput[]
    NOT?: PatientAssessmentScalarWhereInput | PatientAssessmentScalarWhereInput[]
    id?: IntFilter<"PatientAssessment"> | number
    visitType?: StringNullableFilter<"PatientAssessment"> | string | null
    consultationType?: StringNullableFilter<"PatientAssessment"> | string | null
    status?: StringNullableFilter<"PatientAssessment"> | string | null
    createdAt?: DateTimeFilter<"PatientAssessment"> | Date | string
    complaints?: StringNullableFilter<"PatientAssessment"> | string | null
    facial_dermapen_prp?: StringNullableFilter<"PatientAssessment"> | string | null
    instructions?: StringNullableFilter<"PatientAssessment"> | string | null
    laser_q_note?: StringNullableFilter<"PatientAssessment"> | string | null
    prescription?: StringNullableFilter<"PatientAssessment"> | string | null
    provider_notes?: StringNullableFilter<"PatientAssessment"> | string | null
    recommendations?: StringNullableFilter<"PatientAssessment"> | string | null
    slimming_note?: StringNullableFilter<"PatientAssessment"> | string | null
    images?: StringNullableListFilter<"PatientAssessment">
    createdById?: IntFilter<"PatientAssessment"> | number
    updatedById?: IntFilter<"PatientAssessment"> | number
  }

  export type PatientAssessmentUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientAssessmentWhereUniqueInput
    update: XOR<PatientAssessmentUpdateWithoutUpdatedByInput, PatientAssessmentUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PatientAssessmentCreateWithoutUpdatedByInput, PatientAssessmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientAssessmentUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientAssessmentWhereUniqueInput
    data: XOR<PatientAssessmentUpdateWithoutUpdatedByInput, PatientAssessmentUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PatientAssessmentUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PatientAssessmentScalarWhereInput
    data: XOR<PatientAssessmentUpdateManyMutationInput, PatientAssessmentUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PatientTreatmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientTreatmentWhereUniqueInput
    update: XOR<PatientTreatmentUpdateWithoutCreatedByInput, PatientTreatmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientTreatmentCreateWithoutCreatedByInput, PatientTreatmentUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientTreatmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientTreatmentWhereUniqueInput
    data: XOR<PatientTreatmentUpdateWithoutCreatedByInput, PatientTreatmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientTreatmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientTreatmentScalarWhereInput
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientTreatmentScalarWhereInput = {
    AND?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
    OR?: PatientTreatmentScalarWhereInput[]
    NOT?: PatientTreatmentScalarWhereInput | PatientTreatmentScalarWhereInput[]
    id?: IntFilter<"PatientTreatment"> | number
    quantity?: IntFilter<"PatientTreatment"> | number
    notes?: StringNullableFilter<"PatientTreatment"> | string | null
    treatmentId?: IntFilter<"PatientTreatment"> | number
    patientAssessmentId?: IntNullableFilter<"PatientTreatment"> | number | null
    billingId?: IntNullableFilter<"PatientTreatment"> | number | null
    createdAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    updatedAt?: DateTimeFilter<"PatientTreatment"> | Date | string
    createdById?: IntFilter<"PatientTreatment"> | number
    updatedById?: IntFilter<"PatientTreatment"> | number
  }

  export type PatientTreatmentUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientTreatmentWhereUniqueInput
    update: XOR<PatientTreatmentUpdateWithoutUpdatedByInput, PatientTreatmentUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PatientTreatmentCreateWithoutUpdatedByInput, PatientTreatmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientTreatmentUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientTreatmentWhereUniqueInput
    data: XOR<PatientTreatmentUpdateWithoutUpdatedByInput, PatientTreatmentUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PatientTreatmentUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PatientTreatmentScalarWhereInput
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PatientMedicationUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientMedicationWhereUniqueInput
    update: XOR<PatientMedicationUpdateWithoutUpdatedByInput, PatientMedicationUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PatientMedicationCreateWithoutUpdatedByInput, PatientMedicationUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientMedicationUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientMedicationWhereUniqueInput
    data: XOR<PatientMedicationUpdateWithoutUpdatedByInput, PatientMedicationUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PatientMedicationUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PatientMedicationScalarWhereInput
    data: XOR<PatientMedicationUpdateManyMutationInput, PatientMedicationUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PatientMedicationScalarWhereInput = {
    AND?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
    OR?: PatientMedicationScalarWhereInput[]
    NOT?: PatientMedicationScalarWhereInput | PatientMedicationScalarWhereInput[]
    id?: IntFilter<"PatientMedication"> | number
    quantity?: IntFilter<"PatientMedication"> | number
    notes?: StringNullableFilter<"PatientMedication"> | string | null
    medicineId?: IntFilter<"PatientMedication"> | number
    patientAssessmentId?: IntNullableFilter<"PatientMedication"> | number | null
    billingId?: IntNullableFilter<"PatientMedication"> | number | null
    createdAt?: DateTimeFilter<"PatientMedication"> | Date | string
    updatedAt?: DateTimeFilter<"PatientMedication"> | Date | string
    createdById?: IntFilter<"PatientMedication"> | number
    updatedById?: IntFilter<"PatientMedication"> | number
  }

  export type PatientMedicationUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientMedicationWhereUniqueInput
    update: XOR<PatientMedicationUpdateWithoutCreatedByInput, PatientMedicationUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientMedicationCreateWithoutCreatedByInput, PatientMedicationUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientMedicationUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientMedicationWhereUniqueInput
    data: XOR<PatientMedicationUpdateWithoutCreatedByInput, PatientMedicationUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientMedicationUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientMedicationScalarWhereInput
    data: XOR<PatientMedicationUpdateManyMutationInput, PatientMedicationUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientPackageUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientPackageWhereUniqueInput
    update: XOR<PatientPackageUpdateWithoutUpdatedByInput, PatientPackageUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PatientPackageCreateWithoutUpdatedByInput, PatientPackageUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientPackageUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientPackageWhereUniqueInput
    data: XOR<PatientPackageUpdateWithoutUpdatedByInput, PatientPackageUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PatientPackageUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PatientPackageScalarWhereInput
    data: XOR<PatientPackageUpdateManyMutationInput, PatientPackageUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PatientPackageScalarWhereInput = {
    AND?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
    OR?: PatientPackageScalarWhereInput[]
    NOT?: PatientPackageScalarWhereInput | PatientPackageScalarWhereInput[]
    id?: IntFilter<"PatientPackage"> | number
    packageId?: IntFilter<"PatientPackage"> | number
    quantity?: IntFilter<"PatientPackage"> | number
    notes?: StringNullableFilter<"PatientPackage"> | string | null
    patientAssessmentId?: IntNullableFilter<"PatientPackage"> | number | null
    billingId?: IntNullableFilter<"PatientPackage"> | number | null
    createdAt?: DateTimeFilter<"PatientPackage"> | Date | string
    updatedAt?: DateTimeFilter<"PatientPackage"> | Date | string
    createdById?: IntFilter<"PatientPackage"> | number
    updatedById?: IntFilter<"PatientPackage"> | number
  }

  export type PatientPackageUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientPackageWhereUniqueInput
    update: XOR<PatientPackageUpdateWithoutCreatedByInput, PatientPackageUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientPackageCreateWithoutCreatedByInput, PatientPackageUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientPackageUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientPackageWhereUniqueInput
    data: XOR<PatientPackageUpdateWithoutCreatedByInput, PatientPackageUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientPackageUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientPackageScalarWhereInput
    data: XOR<PatientPackageUpdateManyMutationInput, PatientPackageUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientItemUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientItemWhereUniqueInput
    update: XOR<PatientItemUpdateWithoutCreatedByInput, PatientItemUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientItemCreateWithoutCreatedByInput, PatientItemUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientItemUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientItemWhereUniqueInput
    data: XOR<PatientItemUpdateWithoutCreatedByInput, PatientItemUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientItemUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientItemScalarWhereInput
    data: XOR<PatientItemUpdateManyMutationInput, PatientItemUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientItemScalarWhereInput = {
    AND?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
    OR?: PatientItemScalarWhereInput[]
    NOT?: PatientItemScalarWhereInput | PatientItemScalarWhereInput[]
    id?: IntFilter<"PatientItem"> | number
    itemId?: IntFilter<"PatientItem"> | number
    quantity?: IntFilter<"PatientItem"> | number
    notes?: StringNullableFilter<"PatientItem"> | string | null
    patientAssessmentId?: IntNullableFilter<"PatientItem"> | number | null
    billingId?: IntNullableFilter<"PatientItem"> | number | null
    createdAt?: DateTimeFilter<"PatientItem"> | Date | string
    updatedAt?: DateTimeFilter<"PatientItem"> | Date | string
    createdById?: IntFilter<"PatientItem"> | number
    updatedById?: IntFilter<"PatientItem"> | number
  }

  export type PatientItemUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientItemWhereUniqueInput
    update: XOR<PatientItemUpdateWithoutUpdatedByInput, PatientItemUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PatientItemCreateWithoutUpdatedByInput, PatientItemUncheckedCreateWithoutUpdatedByInput>
  }

  export type PatientItemUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PatientItemWhereUniqueInput
    data: XOR<PatientItemUpdateWithoutUpdatedByInput, PatientItemUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PatientItemUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PatientItemScalarWhereInput
    data: XOR<PatientItemUpdateManyMutationInput, PatientItemUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type MedicineUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: MedicineWhereUniqueInput
    update: XOR<MedicineUpdateWithoutCreatedByInput, MedicineUncheckedUpdateWithoutCreatedByInput>
    create: XOR<MedicineCreateWithoutCreatedByInput, MedicineUncheckedCreateWithoutCreatedByInput>
  }

  export type MedicineUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: MedicineWhereUniqueInput
    data: XOR<MedicineUpdateWithoutCreatedByInput, MedicineUncheckedUpdateWithoutCreatedByInput>
  }

  export type MedicineUpdateManyWithWhereWithoutCreatedByInput = {
    where: MedicineScalarWhereInput
    data: XOR<MedicineUpdateManyMutationInput, MedicineUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type MedicineScalarWhereInput = {
    AND?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
    OR?: MedicineScalarWhereInput[]
    NOT?: MedicineScalarWhereInput | MedicineScalarWhereInput[]
    id?: IntFilter<"Medicine"> | number
    code?: StringFilter<"Medicine"> | string
    name?: StringFilter<"Medicine"> | string
    description?: StringNullableFilter<"Medicine"> | string | null
    cost?: FloatFilter<"Medicine"> | number
    price?: FloatFilter<"Medicine"> | number
    quantity?: IntFilter<"Medicine"> | number
    reorderPoint?: IntFilter<"Medicine"> | number
    unit?: StringFilter<"Medicine"> | string
    expirationDate?: DateTimeNullableFilter<"Medicine"> | Date | string | null
    categoryId?: IntFilter<"Medicine"> | number
    supplierId?: IntFilter<"Medicine"> | number
    createdAt?: DateTimeFilter<"Medicine"> | Date | string
    updatedAt?: DateTimeFilter<"Medicine"> | Date | string
    createdById?: IntFilter<"Medicine"> | number
    updatedById?: IntFilter<"Medicine"> | number
  }

  export type MedicineUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: MedicineWhereUniqueInput
    update: XOR<MedicineUpdateWithoutUpdatedByInput, MedicineUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<MedicineCreateWithoutUpdatedByInput, MedicineUncheckedCreateWithoutUpdatedByInput>
  }

  export type MedicineUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: MedicineWhereUniqueInput
    data: XOR<MedicineUpdateWithoutUpdatedByInput, MedicineUncheckedUpdateWithoutUpdatedByInput>
  }

  export type MedicineUpdateManyWithWhereWithoutUpdatedByInput = {
    where: MedicineScalarWhereInput
    data: XOR<MedicineUpdateManyMutationInput, MedicineUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ItemUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutCreatedByInput, ItemUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ItemCreateWithoutCreatedByInput, ItemUncheckedCreateWithoutCreatedByInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutCreatedByInput, ItemUncheckedUpdateWithoutCreatedByInput>
  }

  export type ItemUpdateManyWithWhereWithoutCreatedByInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ItemScalarWhereInput = {
    AND?: ItemScalarWhereInput | ItemScalarWhereInput[]
    OR?: ItemScalarWhereInput[]
    NOT?: ItemScalarWhereInput | ItemScalarWhereInput[]
    id?: IntFilter<"Item"> | number
    code?: StringFilter<"Item"> | string
    name?: StringFilter<"Item"> | string
    description?: StringNullableFilter<"Item"> | string | null
    cost?: FloatFilter<"Item"> | number
    price?: FloatFilter<"Item"> | number
    quantity?: IntFilter<"Item"> | number
    reorderPoint?: IntFilter<"Item"> | number
    unit?: StringFilter<"Item"> | string
    categoryId?: IntFilter<"Item"> | number
    supplierId?: IntFilter<"Item"> | number
    createdAt?: DateTimeFilter<"Item"> | Date | string
    updatedAt?: DateTimeFilter<"Item"> | Date | string
    createdById?: IntFilter<"Item"> | number
    updatedById?: IntFilter<"Item"> | number
  }

  export type ItemUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutUpdatedByInput, ItemUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ItemCreateWithoutUpdatedByInput, ItemUncheckedCreateWithoutUpdatedByInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutUpdatedByInput, ItemUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ItemUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type TreatmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TreatmentWhereUniqueInput
    update: XOR<TreatmentUpdateWithoutCreatedByInput, TreatmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TreatmentCreateWithoutCreatedByInput, TreatmentUncheckedCreateWithoutCreatedByInput>
  }

  export type TreatmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TreatmentWhereUniqueInput
    data: XOR<TreatmentUpdateWithoutCreatedByInput, TreatmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type TreatmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: TreatmentScalarWhereInput
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type TreatmentScalarWhereInput = {
    AND?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
    OR?: TreatmentScalarWhereInput[]
    NOT?: TreatmentScalarWhereInput | TreatmentScalarWhereInput[]
    id?: IntFilter<"Treatment"> | number
    code?: StringFilter<"Treatment"> | string
    name?: StringFilter<"Treatment"> | string
    description?: StringNullableFilter<"Treatment"> | string | null
    cost?: FloatFilter<"Treatment"> | number
    price?: FloatFilter<"Treatment"> | number
    categoryId?: IntFilter<"Treatment"> | number
    createdAt?: DateTimeFilter<"Treatment"> | Date | string
    updatedAt?: DateTimeFilter<"Treatment"> | Date | string
    createdById?: IntFilter<"Treatment"> | number
    updatedById?: IntFilter<"Treatment"> | number
  }

  export type TreatmentUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: TreatmentWhereUniqueInput
    update: XOR<TreatmentUpdateWithoutUpdatedByInput, TreatmentUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<TreatmentCreateWithoutUpdatedByInput, TreatmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type TreatmentUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: TreatmentWhereUniqueInput
    data: XOR<TreatmentUpdateWithoutUpdatedByInput, TreatmentUncheckedUpdateWithoutUpdatedByInput>
  }

  export type TreatmentUpdateManyWithWhereWithoutUpdatedByInput = {
    where: TreatmentScalarWhereInput
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PackageUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PackageWhereUniqueInput
    update: XOR<PackageUpdateWithoutCreatedByInput, PackageUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput>
  }

  export type PackageUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PackageWhereUniqueInput
    data: XOR<PackageUpdateWithoutCreatedByInput, PackageUncheckedUpdateWithoutCreatedByInput>
  }

  export type PackageUpdateManyWithWhereWithoutCreatedByInput = {
    where: PackageScalarWhereInput
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PackageScalarWhereInput = {
    AND?: PackageScalarWhereInput | PackageScalarWhereInput[]
    OR?: PackageScalarWhereInput[]
    NOT?: PackageScalarWhereInput | PackageScalarWhereInput[]
    id?: IntFilter<"Package"> | number
    code?: StringFilter<"Package"> | string
    name?: StringFilter<"Package"> | string
    description?: StringNullableFilter<"Package"> | string | null
    cost?: FloatFilter<"Package"> | number
    price?: FloatFilter<"Package"> | number
    duration?: StringFilter<"Package"> | string
    categoryId?: IntFilter<"Package"> | number
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    createdById?: IntFilter<"Package"> | number
    updatedById?: IntFilter<"Package"> | number
  }

  export type PackageUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PackageWhereUniqueInput
    update: XOR<PackageUpdateWithoutUpdatedByInput, PackageUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PackageCreateWithoutUpdatedByInput, PackageUncheckedCreateWithoutUpdatedByInput>
  }

  export type PackageUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PackageWhereUniqueInput
    data: XOR<PackageUpdateWithoutUpdatedByInput, PackageUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PackageUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PackageScalarWhereInput
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutCreatedByInput, CategoryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CategoryCreateWithoutCreatedByInput, CategoryUncheckedCreateWithoutCreatedByInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutCreatedByInput, CategoryUncheckedUpdateWithoutCreatedByInput>
  }

  export type CategoryUpdateManyWithWhereWithoutCreatedByInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    description?: StringNullableFilter<"Category"> | string | null
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    createdById?: IntFilter<"Category"> | number
    updatedById?: IntFilter<"Category"> | number
  }

  export type CategoryUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutUpdatedByInput, CategoryUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<CategoryCreateWithoutUpdatedByInput, CategoryUncheckedCreateWithoutUpdatedByInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutUpdatedByInput, CategoryUncheckedUpdateWithoutUpdatedByInput>
  }

  export type CategoryUpdateManyWithWhereWithoutUpdatedByInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type SupplierUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: SupplierWhereUniqueInput
    update: XOR<SupplierUpdateWithoutCreatedByInput, SupplierUncheckedUpdateWithoutCreatedByInput>
    create: XOR<SupplierCreateWithoutCreatedByInput, SupplierUncheckedCreateWithoutCreatedByInput>
  }

  export type SupplierUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: SupplierWhereUniqueInput
    data: XOR<SupplierUpdateWithoutCreatedByInput, SupplierUncheckedUpdateWithoutCreatedByInput>
  }

  export type SupplierUpdateManyWithWhereWithoutCreatedByInput = {
    where: SupplierScalarWhereInput
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type SupplierScalarWhereInput = {
    AND?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
    OR?: SupplierScalarWhereInput[]
    NOT?: SupplierScalarWhereInput | SupplierScalarWhereInput[]
    id?: IntFilter<"Supplier"> | number
    name?: StringFilter<"Supplier"> | string
    contactName?: StringNullableFilter<"Supplier"> | string | null
    email?: StringNullableFilter<"Supplier"> | string | null
    phone?: StringNullableFilter<"Supplier"> | string | null
    address?: StringNullableFilter<"Supplier"> | string | null
    createdAt?: DateTimeFilter<"Supplier"> | Date | string
    updatedAt?: DateTimeFilter<"Supplier"> | Date | string
    createdById?: IntFilter<"Supplier"> | number
    updatedById?: IntFilter<"Supplier"> | number
  }

  export type SupplierUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: SupplierWhereUniqueInput
    update: XOR<SupplierUpdateWithoutUpdatedByInput, SupplierUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<SupplierCreateWithoutUpdatedByInput, SupplierUncheckedCreateWithoutUpdatedByInput>
  }

  export type SupplierUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: SupplierWhereUniqueInput
    data: XOR<SupplierUpdateWithoutUpdatedByInput, SupplierUncheckedUpdateWithoutUpdatedByInput>
  }

  export type SupplierUpdateManyWithWhereWithoutUpdatedByInput = {
    where: SupplierScalarWhereInput
    data: XOR<SupplierUpdateManyMutationInput, SupplierUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: InventoryTransactionWhereUniqueInput
    update: XOR<InventoryTransactionUpdateWithoutCreatedByInput, InventoryTransactionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<InventoryTransactionCreateWithoutCreatedByInput, InventoryTransactionUncheckedCreateWithoutCreatedByInput>
  }

  export type InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: InventoryTransactionWhereUniqueInput
    data: XOR<InventoryTransactionUpdateWithoutCreatedByInput, InventoryTransactionUncheckedUpdateWithoutCreatedByInput>
  }

  export type InventoryTransactionUpdateManyWithWhereWithoutCreatedByInput = {
    where: InventoryTransactionScalarWhereInput
    data: XOR<InventoryTransactionUpdateManyMutationInput, InventoryTransactionUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type InventoryTransactionUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: InventoryTransactionWhereUniqueInput
    update: XOR<InventoryTransactionUpdateWithoutUpdatedByInput, InventoryTransactionUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<InventoryTransactionCreateWithoutUpdatedByInput, InventoryTransactionUncheckedCreateWithoutUpdatedByInput>
  }

  export type InventoryTransactionUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: InventoryTransactionWhereUniqueInput
    data: XOR<InventoryTransactionUpdateWithoutUpdatedByInput, InventoryTransactionUncheckedUpdateWithoutUpdatedByInput>
  }

  export type InventoryTransactionUpdateManyWithWhereWithoutUpdatedByInput = {
    where: InventoryTransactionScalarWhereInput
    data: XOR<InventoryTransactionUpdateManyMutationInput, InventoryTransactionUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type InventoryCountUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: InventoryCountWhereUniqueInput
    update: XOR<InventoryCountUpdateWithoutCreatedByInput, InventoryCountUncheckedUpdateWithoutCreatedByInput>
    create: XOR<InventoryCountCreateWithoutCreatedByInput, InventoryCountUncheckedCreateWithoutCreatedByInput>
  }

  export type InventoryCountUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: InventoryCountWhereUniqueInput
    data: XOR<InventoryCountUpdateWithoutCreatedByInput, InventoryCountUncheckedUpdateWithoutCreatedByInput>
  }

  export type InventoryCountUpdateManyWithWhereWithoutCreatedByInput = {
    where: InventoryCountScalarWhereInput
    data: XOR<InventoryCountUpdateManyMutationInput, InventoryCountUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type InventoryCountUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: InventoryCountWhereUniqueInput
    update: XOR<InventoryCountUpdateWithoutUpdatedByInput, InventoryCountUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<InventoryCountCreateWithoutUpdatedByInput, InventoryCountUncheckedCreateWithoutUpdatedByInput>
  }

  export type InventoryCountUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: InventoryCountWhereUniqueInput
    data: XOR<InventoryCountUpdateWithoutUpdatedByInput, InventoryCountUncheckedUpdateWithoutUpdatedByInput>
  }

  export type InventoryCountUpdateManyWithWhereWithoutUpdatedByInput = {
    where: InventoryCountScalarWhereInput
    data: XOR<InventoryCountUpdateManyMutationInput, InventoryCountUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type InventoryCountItemUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: InventoryCountItemWhereUniqueInput
    update: XOR<InventoryCountItemUpdateWithoutCreatedByInput, InventoryCountItemUncheckedUpdateWithoutCreatedByInput>
    create: XOR<InventoryCountItemCreateWithoutCreatedByInput, InventoryCountItemUncheckedCreateWithoutCreatedByInput>
  }

  export type InventoryCountItemUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: InventoryCountItemWhereUniqueInput
    data: XOR<InventoryCountItemUpdateWithoutCreatedByInput, InventoryCountItemUncheckedUpdateWithoutCreatedByInput>
  }

  export type InventoryCountItemUpdateManyWithWhereWithoutCreatedByInput = {
    where: InventoryCountItemScalarWhereInput
    data: XOR<InventoryCountItemUpdateManyMutationInput, InventoryCountItemUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type InventoryCountItemScalarWhereInput = {
    AND?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
    OR?: InventoryCountItemScalarWhereInput[]
    NOT?: InventoryCountItemScalarWhereInput | InventoryCountItemScalarWhereInput[]
    id?: IntFilter<"InventoryCountItem"> | number
    inventoryCountId?: IntFilter<"InventoryCountItem"> | number
    itemId?: IntNullableFilter<"InventoryCountItem"> | number | null
    medicineId?: IntNullableFilter<"InventoryCountItem"> | number | null
    expectedQuantity?: IntFilter<"InventoryCountItem"> | number
    actualQuantity?: IntFilter<"InventoryCountItem"> | number
    notes?: StringNullableFilter<"InventoryCountItem"> | string | null
    createdAt?: DateTimeFilter<"InventoryCountItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryCountItem"> | Date | string
    createdById?: IntFilter<"InventoryCountItem"> | number
    updatedById?: IntFilter<"InventoryCountItem"> | number
  }

  export type InventoryCountItemUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: InventoryCountItemWhereUniqueInput
    update: XOR<InventoryCountItemUpdateWithoutUpdatedByInput, InventoryCountItemUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<InventoryCountItemCreateWithoutUpdatedByInput, InventoryCountItemUncheckedCreateWithoutUpdatedByInput>
  }

  export type InventoryCountItemUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: InventoryCountItemWhereUniqueInput
    data: XOR<InventoryCountItemUpdateWithoutUpdatedByInput, InventoryCountItemUncheckedUpdateWithoutUpdatedByInput>
  }

  export type InventoryCountItemUpdateManyWithWhereWithoutUpdatedByInput = {
    where: InventoryCountItemScalarWhereInput
    data: XOR<InventoryCountItemUpdateManyMutationInput, InventoryCountItemUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type BillingsUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: BillingsWhereUniqueInput
    update: XOR<BillingsUpdateWithoutCreatedByInput, BillingsUncheckedUpdateWithoutCreatedByInput>
    create: XOR<BillingsCreateWithoutCreatedByInput, BillingsUncheckedCreateWithoutCreatedByInput>
  }

  export type BillingsUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: BillingsWhereUniqueInput
    data: XOR<BillingsUpdateWithoutCreatedByInput, BillingsUncheckedUpdateWithoutCreatedByInput>
  }

  export type BillingsUpdateManyWithWhereWithoutCreatedByInput = {
    where: BillingsScalarWhereInput
    data: XOR<BillingsUpdateManyMutationInput, BillingsUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type BillingsUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: BillingsWhereUniqueInput
    update: XOR<BillingsUpdateWithoutUpdatedByInput, BillingsUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<BillingsCreateWithoutUpdatedByInput, BillingsUncheckedCreateWithoutUpdatedByInput>
  }

  export type BillingsUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: BillingsWhereUniqueInput
    data: XOR<BillingsUpdateWithoutUpdatedByInput, BillingsUncheckedUpdateWithoutUpdatedByInput>
  }

  export type BillingsUpdateManyWithWhereWithoutUpdatedByInput = {
    where: BillingsScalarWhereInput
    data: XOR<BillingsUpdateManyMutationInput, BillingsUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutCreatedByInput, PaymentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutCreatedByInput, PaymentUncheckedUpdateWithoutCreatedByInput>
  }

  export type PaymentUpdateManyWithWhereWithoutCreatedByInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: IntFilter<"Payment"> | number
    paymentType?: StringFilter<"Payment"> | string
    amount?: FloatFilter<"Payment"> | number
    billingId?: IntFilter<"Payment"> | number
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    createdById?: IntFilter<"Payment"> | number
    updatedById?: IntFilter<"Payment"> | number
  }

  export type PaymentUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutUpdatedByInput, PaymentUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PaymentCreateWithoutUpdatedByInput, PaymentUncheckedCreateWithoutUpdatedByInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutUpdatedByInput, PaymentUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PaymentUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ScheduleUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutCreatedByInput, ScheduleUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ScheduleCreateWithoutCreatedByInput, ScheduleUncheckedCreateWithoutCreatedByInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutCreatedByInput, ScheduleUncheckedUpdateWithoutCreatedByInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutCreatedByInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ScheduleUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutUpdatedByInput, ScheduleUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ScheduleCreateWithoutUpdatedByInput, ScheduleUncheckedCreateWithoutUpdatedByInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutUpdatedByInput, ScheduleUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type UserCreateWithoutAuditLogsInput = {
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    employee?: EmployeeCreateNestedOneWithoutUserInput
    createdEmployees?: EmployeeCreateNestedManyWithoutCreatedByInput
    updatedEmployees?: EmployeeCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: number
    email: string
    password: string
    role: string
    firstName: string
    lastName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
    createdEmployees?: EmployeeUncheckedCreateNestedManyWithoutCreatedByInput
    updatedEmployees?: EmployeeUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUpdateOneWithoutUserNestedInput
    createdEmployees?: EmployeeUpdateManyWithoutCreatedByNestedInput
    updatedEmployees?: EmployeeUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
    createdEmployees?: EmployeeUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedEmployees?: EmployeeUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeCreateWithoutSchedulesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutSchedulesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutSchedulesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutSchedulesInput, EmployeeUncheckedCreateWithoutSchedulesInput>
  }

  export type EmployeeCreateWithoutCreatedSchedulesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedSchedulesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedSchedulesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedSchedulesInput, EmployeeUncheckedCreateWithoutCreatedSchedulesInput>
  }

  export type EmployeeCreateWithoutUpdatedSchedulesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedSchedulesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedSchedulesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedSchedulesInput, EmployeeUncheckedCreateWithoutUpdatedSchedulesInput>
  }

  export type EmployeeUpsertWithoutSchedulesInput = {
    update: XOR<EmployeeUpdateWithoutSchedulesInput, EmployeeUncheckedUpdateWithoutSchedulesInput>
    create: XOR<EmployeeCreateWithoutSchedulesInput, EmployeeUncheckedCreateWithoutSchedulesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutSchedulesInput, EmployeeUncheckedUpdateWithoutSchedulesInput>
  }

  export type EmployeeUpdateWithoutSchedulesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutCreatedSchedulesInput = {
    update: XOR<EmployeeUpdateWithoutCreatedSchedulesInput, EmployeeUncheckedUpdateWithoutCreatedSchedulesInput>
    create: XOR<EmployeeCreateWithoutCreatedSchedulesInput, EmployeeUncheckedCreateWithoutCreatedSchedulesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedSchedulesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedSchedulesInput, EmployeeUncheckedUpdateWithoutCreatedSchedulesInput>
  }

  export type EmployeeUpdateWithoutCreatedSchedulesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedSchedulesInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedSchedulesInput, EmployeeUncheckedUpdateWithoutUpdatedSchedulesInput>
    create: XOR<EmployeeCreateWithoutUpdatedSchedulesInput, EmployeeUncheckedCreateWithoutUpdatedSchedulesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedSchedulesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedSchedulesInput, EmployeeUncheckedUpdateWithoutUpdatedSchedulesInput>
  }

  export type EmployeeUpdateWithoutUpdatedSchedulesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type BillingsCreateWithoutPatientInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutPatientInput = {
    id?: number
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutPatientInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutPatientInput, BillingsUncheckedCreateWithoutPatientInput>
  }

  export type BillingsCreateManyPatientInputEnvelope = {
    data: BillingsCreateManyPatientInput | BillingsCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type ConsultationsCreateWithoutPatientInput = {
    status: string
    appointmentId?: number | null
    triageId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedConsultationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedConsultationsInput
    doctor: EmployeeCreateNestedOneWithoutConsultationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutConsultationsInput
    patientTriage?: PatientTriageCreateNestedOneWithoutConsultationsInput
    billings?: BillingsCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsUncheckedCreateWithoutPatientInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
    billings?: BillingsUncheckedCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsCreateOrConnectWithoutPatientInput = {
    where: ConsultationsWhereUniqueInput
    create: XOR<ConsultationsCreateWithoutPatientInput, ConsultationsUncheckedCreateWithoutPatientInput>
  }

  export type ConsultationsCreateManyPatientInputEnvelope = {
    data: ConsultationsCreateManyPatientInput | ConsultationsCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedPatientsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPatientsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPatientsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPatientsInput, EmployeeUncheckedCreateWithoutCreatedPatientsInput>
  }

  export type EmployeeCreateWithoutUpdatedPatientsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPatientsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPatientsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPatientsInput, EmployeeUncheckedCreateWithoutUpdatedPatientsInput>
  }

  export type BillingsUpsertWithWhereUniqueWithoutPatientInput = {
    where: BillingsWhereUniqueInput
    update: XOR<BillingsUpdateWithoutPatientInput, BillingsUncheckedUpdateWithoutPatientInput>
    create: XOR<BillingsCreateWithoutPatientInput, BillingsUncheckedCreateWithoutPatientInput>
  }

  export type BillingsUpdateWithWhereUniqueWithoutPatientInput = {
    where: BillingsWhereUniqueInput
    data: XOR<BillingsUpdateWithoutPatientInput, BillingsUncheckedUpdateWithoutPatientInput>
  }

  export type BillingsUpdateManyWithWhereWithoutPatientInput = {
    where: BillingsScalarWhereInput
    data: XOR<BillingsUpdateManyMutationInput, BillingsUncheckedUpdateManyWithoutPatientInput>
  }

  export type ConsultationsUpsertWithWhereUniqueWithoutPatientInput = {
    where: ConsultationsWhereUniqueInput
    update: XOR<ConsultationsUpdateWithoutPatientInput, ConsultationsUncheckedUpdateWithoutPatientInput>
    create: XOR<ConsultationsCreateWithoutPatientInput, ConsultationsUncheckedCreateWithoutPatientInput>
  }

  export type ConsultationsUpdateWithWhereUniqueWithoutPatientInput = {
    where: ConsultationsWhereUniqueInput
    data: XOR<ConsultationsUpdateWithoutPatientInput, ConsultationsUncheckedUpdateWithoutPatientInput>
  }

  export type ConsultationsUpdateManyWithWhereWithoutPatientInput = {
    where: ConsultationsScalarWhereInput
    data: XOR<ConsultationsUpdateManyMutationInput, ConsultationsUncheckedUpdateManyWithoutPatientInput>
  }

  export type EmployeeUpsertWithoutCreatedPatientsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPatientsInput, EmployeeUncheckedUpdateWithoutCreatedPatientsInput>
    create: XOR<EmployeeCreateWithoutCreatedPatientsInput, EmployeeUncheckedCreateWithoutCreatedPatientsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPatientsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPatientsInput, EmployeeUncheckedUpdateWithoutCreatedPatientsInput>
  }

  export type EmployeeUpdateWithoutCreatedPatientsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPatientsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPatientsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientsInput>
    create: XOR<EmployeeCreateWithoutUpdatedPatientsInput, EmployeeUncheckedCreateWithoutUpdatedPatientsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPatientsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPatientsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientsInput>
  }

  export type EmployeeUpdateWithoutUpdatedPatientsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeCreateWithoutCreatedConsultationsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedConsultationsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedConsultationsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedConsultationsInput, EmployeeUncheckedCreateWithoutCreatedConsultationsInput>
  }

  export type EmployeeCreateWithoutUpdatedConsultationsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedConsultationsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedConsultationsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedConsultationsInput, EmployeeUncheckedCreateWithoutUpdatedConsultationsInput>
  }

  export type EmployeeCreateWithoutConsultationsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutConsultationsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutConsultationsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutConsultationsInput, EmployeeUncheckedCreateWithoutConsultationsInput>
  }

  export type PatientsCreateWithoutConsultationsInput = {
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    deleted?: boolean
    deletedAt?: Date | string | null
    billings?: BillingsCreateNestedManyWithoutPatientInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientsInput
  }

  export type PatientsUncheckedCreateWithoutConsultationsInput = {
    id?: number
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    billings?: BillingsUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientsCreateOrConnectWithoutConsultationsInput = {
    where: PatientsWhereUniqueInput
    create: XOR<PatientsCreateWithoutConsultationsInput, PatientsUncheckedCreateWithoutConsultationsInput>
  }

  export type PatientAssessmentCreateWithoutConsultationsInput = {
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    patientMedications?: PatientMedicationCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteCreateNestedManyWithoutPatientAssessmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientAssessmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientAssessmentsInput
  }

  export type PatientAssessmentUncheckedCreateWithoutConsultationsInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
    updatedById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientAssessmentInput
  }

  export type PatientAssessmentCreateOrConnectWithoutConsultationsInput = {
    where: PatientAssessmentWhereUniqueInput
    create: XOR<PatientAssessmentCreateWithoutConsultationsInput, PatientAssessmentUncheckedCreateWithoutConsultationsInput>
  }

  export type PatientTriageCreateWithoutConsultationsInput = {
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    problems?: TriageProblemCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyCreateNestedManyWithoutPatientTriageInput
    notes?: NoteCreateNestedManyWithoutPatientTriageInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTriagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTriagesInput
  }

  export type PatientTriageUncheckedCreateWithoutConsultationsInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    createdById: number
    updatedById: number
    problems?: TriageProblemUncheckedCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyUncheckedCreateNestedManyWithoutPatientTriageInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientTriageInput
  }

  export type PatientTriageCreateOrConnectWithoutConsultationsInput = {
    where: PatientTriageWhereUniqueInput
    create: XOR<PatientTriageCreateWithoutConsultationsInput, PatientTriageUncheckedCreateWithoutConsultationsInput>
  }

  export type BillingsCreateWithoutConsultationInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutConsultationInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutConsultationInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutConsultationInput, BillingsUncheckedCreateWithoutConsultationInput>
  }

  export type BillingsCreateManyConsultationInputEnvelope = {
    data: BillingsCreateManyConsultationInput | BillingsCreateManyConsultationInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeUpsertWithoutCreatedConsultationsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedConsultationsInput, EmployeeUncheckedUpdateWithoutCreatedConsultationsInput>
    create: XOR<EmployeeCreateWithoutCreatedConsultationsInput, EmployeeUncheckedCreateWithoutCreatedConsultationsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedConsultationsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedConsultationsInput, EmployeeUncheckedUpdateWithoutCreatedConsultationsInput>
  }

  export type EmployeeUpdateWithoutCreatedConsultationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedConsultationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedConsultationsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedConsultationsInput, EmployeeUncheckedUpdateWithoutUpdatedConsultationsInput>
    create: XOR<EmployeeCreateWithoutUpdatedConsultationsInput, EmployeeUncheckedCreateWithoutUpdatedConsultationsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedConsultationsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedConsultationsInput, EmployeeUncheckedUpdateWithoutUpdatedConsultationsInput>
  }

  export type EmployeeUpdateWithoutUpdatedConsultationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedConsultationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutConsultationsInput = {
    update: XOR<EmployeeUpdateWithoutConsultationsInput, EmployeeUncheckedUpdateWithoutConsultationsInput>
    create: XOR<EmployeeCreateWithoutConsultationsInput, EmployeeUncheckedCreateWithoutConsultationsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutConsultationsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutConsultationsInput, EmployeeUncheckedUpdateWithoutConsultationsInput>
  }

  export type EmployeeUpdateWithoutConsultationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutConsultationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type PatientsUpsertWithoutConsultationsInput = {
    update: XOR<PatientsUpdateWithoutConsultationsInput, PatientsUncheckedUpdateWithoutConsultationsInput>
    create: XOR<PatientsCreateWithoutConsultationsInput, PatientsUncheckedCreateWithoutConsultationsInput>
    where?: PatientsWhereInput
  }

  export type PatientsUpdateToOneWithWhereWithoutConsultationsInput = {
    where?: PatientsWhereInput
    data: XOR<PatientsUpdateWithoutConsultationsInput, PatientsUncheckedUpdateWithoutConsultationsInput>
  }

  export type PatientsUpdateWithoutConsultationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billings?: BillingsUpdateManyWithoutPatientNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientsNestedInput
  }

  export type PatientsUncheckedUpdateWithoutConsultationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billings?: BillingsUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientAssessmentUpsertWithoutConsultationsInput = {
    update: XOR<PatientAssessmentUpdateWithoutConsultationsInput, PatientAssessmentUncheckedUpdateWithoutConsultationsInput>
    create: XOR<PatientAssessmentCreateWithoutConsultationsInput, PatientAssessmentUncheckedCreateWithoutConsultationsInput>
    where?: PatientAssessmentWhereInput
  }

  export type PatientAssessmentUpdateToOneWithWhereWithoutConsultationsInput = {
    where?: PatientAssessmentWhereInput
    data: XOR<PatientAssessmentUpdateWithoutConsultationsInput, PatientAssessmentUncheckedUpdateWithoutConsultationsInput>
  }

  export type PatientAssessmentUpdateWithoutConsultationsInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    patientMedications?: PatientMedicationUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUpdateManyWithoutPatientAssessmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientAssessmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientAssessmentsNestedInput
  }

  export type PatientAssessmentUncheckedUpdateWithoutConsultationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientAssessmentNestedInput
  }

  export type PatientTriageUpsertWithoutConsultationsInput = {
    update: XOR<PatientTriageUpdateWithoutConsultationsInput, PatientTriageUncheckedUpdateWithoutConsultationsInput>
    create: XOR<PatientTriageCreateWithoutConsultationsInput, PatientTriageUncheckedCreateWithoutConsultationsInput>
    where?: PatientTriageWhereInput
  }

  export type PatientTriageUpdateToOneWithWhereWithoutConsultationsInput = {
    where?: PatientTriageWhereInput
    data: XOR<PatientTriageUpdateWithoutConsultationsInput, PatientTriageUncheckedUpdateWithoutConsultationsInput>
  }

  export type PatientTriageUpdateWithoutConsultationsInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    problems?: TriageProblemUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUpdateManyWithoutPatientTriageNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTriagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTriagesNestedInput
  }

  export type PatientTriageUncheckedUpdateWithoutConsultationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    problems?: TriageProblemUncheckedUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUncheckedUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientTriageNestedInput
  }

  export type BillingsUpsertWithWhereUniqueWithoutConsultationInput = {
    where: BillingsWhereUniqueInput
    update: XOR<BillingsUpdateWithoutConsultationInput, BillingsUncheckedUpdateWithoutConsultationInput>
    create: XOR<BillingsCreateWithoutConsultationInput, BillingsUncheckedCreateWithoutConsultationInput>
  }

  export type BillingsUpdateWithWhereUniqueWithoutConsultationInput = {
    where: BillingsWhereUniqueInput
    data: XOR<BillingsUpdateWithoutConsultationInput, BillingsUncheckedUpdateWithoutConsultationInput>
  }

  export type BillingsUpdateManyWithWhereWithoutConsultationInput = {
    where: BillingsScalarWhereInput
    data: XOR<BillingsUpdateManyMutationInput, BillingsUncheckedUpdateManyWithoutConsultationInput>
  }

  export type EmployeeCreateWithoutAppointmentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutAppointmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutAppointmentsInput, EmployeeUncheckedCreateWithoutAppointmentsInput>
  }

  export type EmployeeCreateWithoutCreatedAppointmentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedAppointmentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedAppointmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedAppointmentsInput, EmployeeUncheckedCreateWithoutCreatedAppointmentsInput>
  }

  export type EmployeeCreateWithoutUpdatedAppointmentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedAppointmentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedAppointmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedAppointmentsInput, EmployeeUncheckedCreateWithoutUpdatedAppointmentsInput>
  }

  export type EmployeeUpsertWithoutAppointmentsInput = {
    update: XOR<EmployeeUpdateWithoutAppointmentsInput, EmployeeUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<EmployeeCreateWithoutAppointmentsInput, EmployeeUncheckedCreateWithoutAppointmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutAppointmentsInput, EmployeeUncheckedUpdateWithoutAppointmentsInput>
  }

  export type EmployeeUpdateWithoutAppointmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutCreatedAppointmentsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedAppointmentsInput, EmployeeUncheckedUpdateWithoutCreatedAppointmentsInput>
    create: XOR<EmployeeCreateWithoutCreatedAppointmentsInput, EmployeeUncheckedCreateWithoutCreatedAppointmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedAppointmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedAppointmentsInput, EmployeeUncheckedUpdateWithoutCreatedAppointmentsInput>
  }

  export type EmployeeUpdateWithoutCreatedAppointmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedAppointmentsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedAppointmentsInput, EmployeeUncheckedUpdateWithoutUpdatedAppointmentsInput>
    create: XOR<EmployeeCreateWithoutUpdatedAppointmentsInput, EmployeeUncheckedCreateWithoutUpdatedAppointmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedAppointmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedAppointmentsInput, EmployeeUncheckedUpdateWithoutUpdatedAppointmentsInput>
  }

  export type EmployeeUpdateWithoutUpdatedAppointmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type AvailabilityCreateWithoutDoctorInput = {
    date: Date | string
    startTime: string
    endTime: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AvailabilityUncheckedCreateWithoutDoctorInput = {
    id?: number
    date: Date | string
    startTime: string
    endTime: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AvailabilityCreateOrConnectWithoutDoctorInput = {
    where: AvailabilityWhereUniqueInput
    create: XOR<AvailabilityCreateWithoutDoctorInput, AvailabilityUncheckedCreateWithoutDoctorInput>
  }

  export type AvailabilityCreateManyDoctorInputEnvelope = {
    data: AvailabilityCreateManyDoctorInput | AvailabilityCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type AvailabilityUpsertWithWhereUniqueWithoutDoctorInput = {
    where: AvailabilityWhereUniqueInput
    update: XOR<AvailabilityUpdateWithoutDoctorInput, AvailabilityUncheckedUpdateWithoutDoctorInput>
    create: XOR<AvailabilityCreateWithoutDoctorInput, AvailabilityUncheckedCreateWithoutDoctorInput>
  }

  export type AvailabilityUpdateWithWhereUniqueWithoutDoctorInput = {
    where: AvailabilityWhereUniqueInput
    data: XOR<AvailabilityUpdateWithoutDoctorInput, AvailabilityUncheckedUpdateWithoutDoctorInput>
  }

  export type AvailabilityUpdateManyWithWhereWithoutDoctorInput = {
    where: AvailabilityScalarWhereInput
    data: XOR<AvailabilityUpdateManyMutationInput, AvailabilityUncheckedUpdateManyWithoutDoctorInput>
  }

  export type AvailabilityScalarWhereInput = {
    AND?: AvailabilityScalarWhereInput | AvailabilityScalarWhereInput[]
    OR?: AvailabilityScalarWhereInput[]
    NOT?: AvailabilityScalarWhereInput | AvailabilityScalarWhereInput[]
    id?: IntFilter<"Availability"> | number
    doctorId?: IntFilter<"Availability"> | number
    date?: DateTimeFilter<"Availability"> | Date | string
    startTime?: StringFilter<"Availability"> | string
    endTime?: StringFilter<"Availability"> | string
    created_at?: DateTimeFilter<"Availability"> | Date | string
    updated_at?: DateTimeFilter<"Availability"> | Date | string
  }

  export type DoctorsCreateWithoutAvaialabilityInput = {
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    created_at?: Date | string
    updated_at?: Date | string
    password: string
  }

  export type DoctorsUncheckedCreateWithoutAvaialabilityInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    created_at?: Date | string
    updated_at?: Date | string
    password: string
  }

  export type DoctorsCreateOrConnectWithoutAvaialabilityInput = {
    where: DoctorsWhereUniqueInput
    create: XOR<DoctorsCreateWithoutAvaialabilityInput, DoctorsUncheckedCreateWithoutAvaialabilityInput>
  }

  export type DoctorsUpsertWithoutAvaialabilityInput = {
    update: XOR<DoctorsUpdateWithoutAvaialabilityInput, DoctorsUncheckedUpdateWithoutAvaialabilityInput>
    create: XOR<DoctorsCreateWithoutAvaialabilityInput, DoctorsUncheckedCreateWithoutAvaialabilityInput>
    where?: DoctorsWhereInput
  }

  export type DoctorsUpdateToOneWithWhereWithoutAvaialabilityInput = {
    where?: DoctorsWhereInput
    data: XOR<DoctorsUpdateWithoutAvaialabilityInput, DoctorsUncheckedUpdateWithoutAvaialabilityInput>
  }

  export type DoctorsUpdateWithoutAvaialabilityInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorsUncheckedUpdateWithoutAvaialabilityInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type TriageAllergyCreateWithoutAllergyInput = {
    patientTriage?: PatientTriageCreateNestedOneWithoutAllergiesInput
  }

  export type TriageAllergyUncheckedCreateWithoutAllergyInput = {
    id?: number
    patientTriageId?: number | null
  }

  export type TriageAllergyCreateOrConnectWithoutAllergyInput = {
    where: TriageAllergyWhereUniqueInput
    create: XOR<TriageAllergyCreateWithoutAllergyInput, TriageAllergyUncheckedCreateWithoutAllergyInput>
  }

  export type TriageAllergyCreateManyAllergyInputEnvelope = {
    data: TriageAllergyCreateManyAllergyInput | TriageAllergyCreateManyAllergyInput[]
    skipDuplicates?: boolean
  }

  export type TriageAllergyUpsertWithWhereUniqueWithoutAllergyInput = {
    where: TriageAllergyWhereUniqueInput
    update: XOR<TriageAllergyUpdateWithoutAllergyInput, TriageAllergyUncheckedUpdateWithoutAllergyInput>
    create: XOR<TriageAllergyCreateWithoutAllergyInput, TriageAllergyUncheckedCreateWithoutAllergyInput>
  }

  export type TriageAllergyUpdateWithWhereUniqueWithoutAllergyInput = {
    where: TriageAllergyWhereUniqueInput
    data: XOR<TriageAllergyUpdateWithoutAllergyInput, TriageAllergyUncheckedUpdateWithoutAllergyInput>
  }

  export type TriageAllergyUpdateManyWithWhereWithoutAllergyInput = {
    where: TriageAllergyScalarWhereInput
    data: XOR<TriageAllergyUpdateManyMutationInput, TriageAllergyUncheckedUpdateManyWithoutAllergyInput>
  }

  export type TriageAllergyScalarWhereInput = {
    AND?: TriageAllergyScalarWhereInput | TriageAllergyScalarWhereInput[]
    OR?: TriageAllergyScalarWhereInput[]
    NOT?: TriageAllergyScalarWhereInput | TriageAllergyScalarWhereInput[]
    id?: IntFilter<"TriageAllergy"> | number
    patientTriageId?: IntNullableFilter<"TriageAllergy"> | number | null
    allergyId?: IntNullableFilter<"TriageAllergy"> | number | null
  }

  export type PatientTriageCreateWithoutAllergiesInput = {
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    problems?: TriageProblemCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsCreateNestedManyWithoutPatientTriageInput
    notes?: NoteCreateNestedManyWithoutPatientTriageInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTriagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTriagesInput
  }

  export type PatientTriageUncheckedCreateWithoutAllergiesInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    createdById: number
    updatedById: number
    problems?: TriageProblemUncheckedCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientTriageInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientTriageInput
  }

  export type PatientTriageCreateOrConnectWithoutAllergiesInput = {
    where: PatientTriageWhereUniqueInput
    create: XOR<PatientTriageCreateWithoutAllergiesInput, PatientTriageUncheckedCreateWithoutAllergiesInput>
  }

  export type AllergyCreateWithoutTriageAllergyInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AllergyUncheckedCreateWithoutTriageAllergyInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AllergyCreateOrConnectWithoutTriageAllergyInput = {
    where: AllergyWhereUniqueInput
    create: XOR<AllergyCreateWithoutTriageAllergyInput, AllergyUncheckedCreateWithoutTriageAllergyInput>
  }

  export type PatientTriageUpsertWithoutAllergiesInput = {
    update: XOR<PatientTriageUpdateWithoutAllergiesInput, PatientTriageUncheckedUpdateWithoutAllergiesInput>
    create: XOR<PatientTriageCreateWithoutAllergiesInput, PatientTriageUncheckedCreateWithoutAllergiesInput>
    where?: PatientTriageWhereInput
  }

  export type PatientTriageUpdateToOneWithWhereWithoutAllergiesInput = {
    where?: PatientTriageWhereInput
    data: XOR<PatientTriageUpdateWithoutAllergiesInput, PatientTriageUncheckedUpdateWithoutAllergiesInput>
  }

  export type PatientTriageUpdateWithoutAllergiesInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    problems?: TriageProblemUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUpdateManyWithoutPatientTriageNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTriagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTriagesNestedInput
  }

  export type PatientTriageUncheckedUpdateWithoutAllergiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    problems?: TriageProblemUncheckedUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientTriageNestedInput
  }

  export type AllergyUpsertWithoutTriageAllergyInput = {
    update: XOR<AllergyUpdateWithoutTriageAllergyInput, AllergyUncheckedUpdateWithoutTriageAllergyInput>
    create: XOR<AllergyCreateWithoutTriageAllergyInput, AllergyUncheckedCreateWithoutTriageAllergyInput>
    where?: AllergyWhereInput
  }

  export type AllergyUpdateToOneWithWhereWithoutTriageAllergyInput = {
    where?: AllergyWhereInput
    data: XOR<AllergyUpdateWithoutTriageAllergyInput, AllergyUncheckedUpdateWithoutTriageAllergyInput>
  }

  export type AllergyUpdateWithoutTriageAllergyInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllergyUncheckedUpdateWithoutTriageAllergyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriageProblemCreateWithoutProblemInput = {
    patientTriage?: PatientTriageCreateNestedOneWithoutProblemsInput
  }

  export type TriageProblemUncheckedCreateWithoutProblemInput = {
    id?: number
    patientTriageId?: number | null
  }

  export type TriageProblemCreateOrConnectWithoutProblemInput = {
    where: TriageProblemWhereUniqueInput
    create: XOR<TriageProblemCreateWithoutProblemInput, TriageProblemUncheckedCreateWithoutProblemInput>
  }

  export type TriageProblemCreateManyProblemInputEnvelope = {
    data: TriageProblemCreateManyProblemInput | TriageProblemCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type TriageProblemUpsertWithWhereUniqueWithoutProblemInput = {
    where: TriageProblemWhereUniqueInput
    update: XOR<TriageProblemUpdateWithoutProblemInput, TriageProblemUncheckedUpdateWithoutProblemInput>
    create: XOR<TriageProblemCreateWithoutProblemInput, TriageProblemUncheckedCreateWithoutProblemInput>
  }

  export type TriageProblemUpdateWithWhereUniqueWithoutProblemInput = {
    where: TriageProblemWhereUniqueInput
    data: XOR<TriageProblemUpdateWithoutProblemInput, TriageProblemUncheckedUpdateWithoutProblemInput>
  }

  export type TriageProblemUpdateManyWithWhereWithoutProblemInput = {
    where: TriageProblemScalarWhereInput
    data: XOR<TriageProblemUpdateManyMutationInput, TriageProblemUncheckedUpdateManyWithoutProblemInput>
  }

  export type TriageProblemScalarWhereInput = {
    AND?: TriageProblemScalarWhereInput | TriageProblemScalarWhereInput[]
    OR?: TriageProblemScalarWhereInput[]
    NOT?: TriageProblemScalarWhereInput | TriageProblemScalarWhereInput[]
    id?: IntFilter<"TriageProblem"> | number
    patientTriageId?: IntNullableFilter<"TriageProblem"> | number | null
    problemId?: IntNullableFilter<"TriageProblem"> | number | null
  }

  export type PatientTriageCreateWithoutProblemsInput = {
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    allergies?: TriageAllergyCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsCreateNestedManyWithoutPatientTriageInput
    notes?: NoteCreateNestedManyWithoutPatientTriageInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTriagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTriagesInput
  }

  export type PatientTriageUncheckedCreateWithoutProblemsInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    createdById: number
    updatedById: number
    allergies?: TriageAllergyUncheckedCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientTriageInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientTriageInput
  }

  export type PatientTriageCreateOrConnectWithoutProblemsInput = {
    where: PatientTriageWhereUniqueInput
    create: XOR<PatientTriageCreateWithoutProblemsInput, PatientTriageUncheckedCreateWithoutProblemsInput>
  }

  export type ProblemCreateWithoutTriageProblemInput = {
    name: string
  }

  export type ProblemUncheckedCreateWithoutTriageProblemInput = {
    id?: number
    name: string
  }

  export type ProblemCreateOrConnectWithoutTriageProblemInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutTriageProblemInput, ProblemUncheckedCreateWithoutTriageProblemInput>
  }

  export type PatientTriageUpsertWithoutProblemsInput = {
    update: XOR<PatientTriageUpdateWithoutProblemsInput, PatientTriageUncheckedUpdateWithoutProblemsInput>
    create: XOR<PatientTriageCreateWithoutProblemsInput, PatientTriageUncheckedCreateWithoutProblemsInput>
    where?: PatientTriageWhereInput
  }

  export type PatientTriageUpdateToOneWithWhereWithoutProblemsInput = {
    where?: PatientTriageWhereInput
    data: XOR<PatientTriageUpdateWithoutProblemsInput, PatientTriageUncheckedUpdateWithoutProblemsInput>
  }

  export type PatientTriageUpdateWithoutProblemsInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: TriageAllergyUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUpdateManyWithoutPatientTriageNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTriagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTriagesNestedInput
  }

  export type PatientTriageUncheckedUpdateWithoutProblemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    allergies?: TriageAllergyUncheckedUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientTriageNestedInput
  }

  export type ProblemUpsertWithoutTriageProblemInput = {
    update: XOR<ProblemUpdateWithoutTriageProblemInput, ProblemUncheckedUpdateWithoutTriageProblemInput>
    create: XOR<ProblemCreateWithoutTriageProblemInput, ProblemUncheckedCreateWithoutTriageProblemInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutTriageProblemInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutTriageProblemInput, ProblemUncheckedUpdateWithoutTriageProblemInput>
  }

  export type ProblemUpdateWithoutTriageProblemInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProblemUncheckedUpdateWithoutTriageProblemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TriageProblemCreateWithoutPatientTriageInput = {
    problem?: ProblemCreateNestedOneWithoutTriageProblemInput
  }

  export type TriageProblemUncheckedCreateWithoutPatientTriageInput = {
    id?: number
    problemId?: number | null
  }

  export type TriageProblemCreateOrConnectWithoutPatientTriageInput = {
    where: TriageProblemWhereUniqueInput
    create: XOR<TriageProblemCreateWithoutPatientTriageInput, TriageProblemUncheckedCreateWithoutPatientTriageInput>
  }

  export type TriageProblemCreateManyPatientTriageInputEnvelope = {
    data: TriageProblemCreateManyPatientTriageInput | TriageProblemCreateManyPatientTriageInput[]
    skipDuplicates?: boolean
  }

  export type TriageAllergyCreateWithoutPatientTriageInput = {
    allergy?: AllergyCreateNestedOneWithoutTriageAllergyInput
  }

  export type TriageAllergyUncheckedCreateWithoutPatientTriageInput = {
    id?: number
    allergyId?: number | null
  }

  export type TriageAllergyCreateOrConnectWithoutPatientTriageInput = {
    where: TriageAllergyWhereUniqueInput
    create: XOR<TriageAllergyCreateWithoutPatientTriageInput, TriageAllergyUncheckedCreateWithoutPatientTriageInput>
  }

  export type TriageAllergyCreateManyPatientTriageInputEnvelope = {
    data: TriageAllergyCreateManyPatientTriageInput | TriageAllergyCreateManyPatientTriageInput[]
    skipDuplicates?: boolean
  }

  export type ConsultationsCreateWithoutPatientTriageInput = {
    status: string
    appointmentId?: number | null
    triageId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedConsultationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedConsultationsInput
    doctor: EmployeeCreateNestedOneWithoutConsultationsInput
    patient?: PatientsCreateNestedOneWithoutConsultationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutConsultationsInput
    billings?: BillingsCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsUncheckedCreateWithoutPatientTriageInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
    billings?: BillingsUncheckedCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsCreateOrConnectWithoutPatientTriageInput = {
    where: ConsultationsWhereUniqueInput
    create: XOR<ConsultationsCreateWithoutPatientTriageInput, ConsultationsUncheckedCreateWithoutPatientTriageInput>
  }

  export type ConsultationsCreateManyPatientTriageInputEnvelope = {
    data: ConsultationsCreateManyPatientTriageInput | ConsultationsCreateManyPatientTriageInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutPatientTriageInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    noteType: string
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutNotesInput
    employee: EmployeeCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutPatientTriageInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    noteType: string
    patientAssessmentId?: number | null
  }

  export type NoteCreateOrConnectWithoutPatientTriageInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutPatientTriageInput, NoteUncheckedCreateWithoutPatientTriageInput>
  }

  export type NoteCreateManyPatientTriageInputEnvelope = {
    data: NoteCreateManyPatientTriageInput | NoteCreateManyPatientTriageInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedPatientTriagesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPatientTriagesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPatientTriagesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPatientTriagesInput, EmployeeUncheckedCreateWithoutCreatedPatientTriagesInput>
  }

  export type EmployeeCreateWithoutUpdatedPatientTriagesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPatientTriagesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPatientTriagesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPatientTriagesInput, EmployeeUncheckedCreateWithoutUpdatedPatientTriagesInput>
  }

  export type TriageProblemUpsertWithWhereUniqueWithoutPatientTriageInput = {
    where: TriageProblemWhereUniqueInput
    update: XOR<TriageProblemUpdateWithoutPatientTriageInput, TriageProblemUncheckedUpdateWithoutPatientTriageInput>
    create: XOR<TriageProblemCreateWithoutPatientTriageInput, TriageProblemUncheckedCreateWithoutPatientTriageInput>
  }

  export type TriageProblemUpdateWithWhereUniqueWithoutPatientTriageInput = {
    where: TriageProblemWhereUniqueInput
    data: XOR<TriageProblemUpdateWithoutPatientTriageInput, TriageProblemUncheckedUpdateWithoutPatientTriageInput>
  }

  export type TriageProblemUpdateManyWithWhereWithoutPatientTriageInput = {
    where: TriageProblemScalarWhereInput
    data: XOR<TriageProblemUpdateManyMutationInput, TriageProblemUncheckedUpdateManyWithoutPatientTriageInput>
  }

  export type TriageAllergyUpsertWithWhereUniqueWithoutPatientTriageInput = {
    where: TriageAllergyWhereUniqueInput
    update: XOR<TriageAllergyUpdateWithoutPatientTriageInput, TriageAllergyUncheckedUpdateWithoutPatientTriageInput>
    create: XOR<TriageAllergyCreateWithoutPatientTriageInput, TriageAllergyUncheckedCreateWithoutPatientTriageInput>
  }

  export type TriageAllergyUpdateWithWhereUniqueWithoutPatientTriageInput = {
    where: TriageAllergyWhereUniqueInput
    data: XOR<TriageAllergyUpdateWithoutPatientTriageInput, TriageAllergyUncheckedUpdateWithoutPatientTriageInput>
  }

  export type TriageAllergyUpdateManyWithWhereWithoutPatientTriageInput = {
    where: TriageAllergyScalarWhereInput
    data: XOR<TriageAllergyUpdateManyMutationInput, TriageAllergyUncheckedUpdateManyWithoutPatientTriageInput>
  }

  export type ConsultationsUpsertWithWhereUniqueWithoutPatientTriageInput = {
    where: ConsultationsWhereUniqueInput
    update: XOR<ConsultationsUpdateWithoutPatientTriageInput, ConsultationsUncheckedUpdateWithoutPatientTriageInput>
    create: XOR<ConsultationsCreateWithoutPatientTriageInput, ConsultationsUncheckedCreateWithoutPatientTriageInput>
  }

  export type ConsultationsUpdateWithWhereUniqueWithoutPatientTriageInput = {
    where: ConsultationsWhereUniqueInput
    data: XOR<ConsultationsUpdateWithoutPatientTriageInput, ConsultationsUncheckedUpdateWithoutPatientTriageInput>
  }

  export type ConsultationsUpdateManyWithWhereWithoutPatientTriageInput = {
    where: ConsultationsScalarWhereInput
    data: XOR<ConsultationsUpdateManyMutationInput, ConsultationsUncheckedUpdateManyWithoutPatientTriageInput>
  }

  export type NoteUpsertWithWhereUniqueWithoutPatientTriageInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutPatientTriageInput, NoteUncheckedUpdateWithoutPatientTriageInput>
    create: XOR<NoteCreateWithoutPatientTriageInput, NoteUncheckedCreateWithoutPatientTriageInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutPatientTriageInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutPatientTriageInput, NoteUncheckedUpdateWithoutPatientTriageInput>
  }

  export type NoteUpdateManyWithWhereWithoutPatientTriageInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutPatientTriageInput>
  }

  export type EmployeeUpsertWithoutCreatedPatientTriagesInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPatientTriagesInput, EmployeeUncheckedUpdateWithoutCreatedPatientTriagesInput>
    create: XOR<EmployeeCreateWithoutCreatedPatientTriagesInput, EmployeeUncheckedCreateWithoutCreatedPatientTriagesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPatientTriagesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPatientTriagesInput, EmployeeUncheckedUpdateWithoutCreatedPatientTriagesInput>
  }

  export type EmployeeUpdateWithoutCreatedPatientTriagesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPatientTriagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPatientTriagesInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPatientTriagesInput, EmployeeUncheckedUpdateWithoutUpdatedPatientTriagesInput>
    create: XOR<EmployeeCreateWithoutUpdatedPatientTriagesInput, EmployeeUncheckedCreateWithoutUpdatedPatientTriagesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPatientTriagesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPatientTriagesInput, EmployeeUncheckedUpdateWithoutUpdatedPatientTriagesInput>
  }

  export type EmployeeUpdateWithoutUpdatedPatientTriagesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPatientTriagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ConsultationsCreateWithoutPatientAssessmentInput = {
    status: string
    appointmentId?: number | null
    triageId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedConsultationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedConsultationsInput
    doctor: EmployeeCreateNestedOneWithoutConsultationsInput
    patient?: PatientsCreateNestedOneWithoutConsultationsInput
    patientTriage?: PatientTriageCreateNestedOneWithoutConsultationsInput
    billings?: BillingsCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsUncheckedCreateWithoutPatientAssessmentInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientTriageId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
    billings?: BillingsUncheckedCreateNestedManyWithoutConsultationInput
  }

  export type ConsultationsCreateOrConnectWithoutPatientAssessmentInput = {
    where: ConsultationsWhereUniqueInput
    create: XOR<ConsultationsCreateWithoutPatientAssessmentInput, ConsultationsUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type ConsultationsCreateManyPatientAssessmentInputEnvelope = {
    data: ConsultationsCreateManyPatientAssessmentInput | ConsultationsCreateManyPatientAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type PatientMedicationCreateWithoutPatientAssessmentInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicine: MedicineCreateNestedOneWithoutPatientMedicationsInput
    billing?: BillingsCreateNestedOneWithoutPatientMedicationsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientMedicationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientMedicationsInput
  }

  export type PatientMedicationUncheckedCreateWithoutPatientAssessmentInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientMedicationCreateOrConnectWithoutPatientAssessmentInput = {
    where: PatientMedicationWhereUniqueInput
    create: XOR<PatientMedicationCreateWithoutPatientAssessmentInput, PatientMedicationUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type PatientMedicationCreateManyPatientAssessmentInputEnvelope = {
    data: PatientMedicationCreateManyPatientAssessmentInput | PatientMedicationCreateManyPatientAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type PatientTreatmentCreateWithoutPatientAssessmentInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    treatment: TreatmentCreateNestedOneWithoutPatientTreatmentsInput
    billing?: BillingsCreateNestedOneWithoutPatientTreatmentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTreatmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientTreatmentCreateOrConnectWithoutPatientAssessmentInput = {
    where: PatientTreatmentWhereUniqueInput
    create: XOR<PatientTreatmentCreateWithoutPatientAssessmentInput, PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type PatientTreatmentCreateManyPatientAssessmentInputEnvelope = {
    data: PatientTreatmentCreateManyPatientAssessmentInput | PatientTreatmentCreateManyPatientAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type PatientPackageCreateWithoutPatientAssessmentInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    package: PackageCreateNestedOneWithoutPatientPackagesInput
    billing?: BillingsCreateNestedOneWithoutPatientPackagesInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientPackagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientPackagesInput
  }

  export type PatientPackageUncheckedCreateWithoutPatientAssessmentInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientPackageCreateOrConnectWithoutPatientAssessmentInput = {
    where: PatientPackageWhereUniqueInput
    create: XOR<PatientPackageCreateWithoutPatientAssessmentInput, PatientPackageUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type PatientPackageCreateManyPatientAssessmentInputEnvelope = {
    data: PatientPackageCreateManyPatientAssessmentInput | PatientPackageCreateManyPatientAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type PatientItemCreateWithoutPatientAssessmentInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    item: ItemCreateNestedOneWithoutPatientItemsInput
    billing?: BillingsCreateNestedOneWithoutPatientItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientItemsInput
  }

  export type PatientItemUncheckedCreateWithoutPatientAssessmentInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientItemCreateOrConnectWithoutPatientAssessmentInput = {
    where: PatientItemWhereUniqueInput
    create: XOR<PatientItemCreateWithoutPatientAssessmentInput, PatientItemUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type PatientItemCreateManyPatientAssessmentInputEnvelope = {
    data: PatientItemCreateManyPatientAssessmentInput | PatientItemCreateManyPatientAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutPatientAssessmentInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    noteType: string
    patientTriage?: PatientTriageCreateNestedOneWithoutNotesInput
    employee: EmployeeCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutPatientAssessmentInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    noteType: string
    patientTriageId?: number | null
  }

  export type NoteCreateOrConnectWithoutPatientAssessmentInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutPatientAssessmentInput, NoteUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type NoteCreateManyPatientAssessmentInputEnvelope = {
    data: NoteCreateManyPatientAssessmentInput | NoteCreateManyPatientAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedPatientAssessmentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPatientAssessmentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPatientAssessmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPatientAssessmentsInput, EmployeeUncheckedCreateWithoutCreatedPatientAssessmentsInput>
  }

  export type EmployeeCreateWithoutUpdatedPatientAssessmentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPatientAssessmentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPatientAssessmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPatientAssessmentsInput, EmployeeUncheckedCreateWithoutUpdatedPatientAssessmentsInput>
  }

  export type ConsultationsUpsertWithWhereUniqueWithoutPatientAssessmentInput = {
    where: ConsultationsWhereUniqueInput
    update: XOR<ConsultationsUpdateWithoutPatientAssessmentInput, ConsultationsUncheckedUpdateWithoutPatientAssessmentInput>
    create: XOR<ConsultationsCreateWithoutPatientAssessmentInput, ConsultationsUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type ConsultationsUpdateWithWhereUniqueWithoutPatientAssessmentInput = {
    where: ConsultationsWhereUniqueInput
    data: XOR<ConsultationsUpdateWithoutPatientAssessmentInput, ConsultationsUncheckedUpdateWithoutPatientAssessmentInput>
  }

  export type ConsultationsUpdateManyWithWhereWithoutPatientAssessmentInput = {
    where: ConsultationsScalarWhereInput
    data: XOR<ConsultationsUpdateManyMutationInput, ConsultationsUncheckedUpdateManyWithoutPatientAssessmentInput>
  }

  export type PatientMedicationUpsertWithWhereUniqueWithoutPatientAssessmentInput = {
    where: PatientMedicationWhereUniqueInput
    update: XOR<PatientMedicationUpdateWithoutPatientAssessmentInput, PatientMedicationUncheckedUpdateWithoutPatientAssessmentInput>
    create: XOR<PatientMedicationCreateWithoutPatientAssessmentInput, PatientMedicationUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type PatientMedicationUpdateWithWhereUniqueWithoutPatientAssessmentInput = {
    where: PatientMedicationWhereUniqueInput
    data: XOR<PatientMedicationUpdateWithoutPatientAssessmentInput, PatientMedicationUncheckedUpdateWithoutPatientAssessmentInput>
  }

  export type PatientMedicationUpdateManyWithWhereWithoutPatientAssessmentInput = {
    where: PatientMedicationScalarWhereInput
    data: XOR<PatientMedicationUpdateManyMutationInput, PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentInput>
  }

  export type PatientTreatmentUpsertWithWhereUniqueWithoutPatientAssessmentInput = {
    where: PatientTreatmentWhereUniqueInput
    update: XOR<PatientTreatmentUpdateWithoutPatientAssessmentInput, PatientTreatmentUncheckedUpdateWithoutPatientAssessmentInput>
    create: XOR<PatientTreatmentCreateWithoutPatientAssessmentInput, PatientTreatmentUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type PatientTreatmentUpdateWithWhereUniqueWithoutPatientAssessmentInput = {
    where: PatientTreatmentWhereUniqueInput
    data: XOR<PatientTreatmentUpdateWithoutPatientAssessmentInput, PatientTreatmentUncheckedUpdateWithoutPatientAssessmentInput>
  }

  export type PatientTreatmentUpdateManyWithWhereWithoutPatientAssessmentInput = {
    where: PatientTreatmentScalarWhereInput
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentInput>
  }

  export type PatientPackageUpsertWithWhereUniqueWithoutPatientAssessmentInput = {
    where: PatientPackageWhereUniqueInput
    update: XOR<PatientPackageUpdateWithoutPatientAssessmentInput, PatientPackageUncheckedUpdateWithoutPatientAssessmentInput>
    create: XOR<PatientPackageCreateWithoutPatientAssessmentInput, PatientPackageUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type PatientPackageUpdateWithWhereUniqueWithoutPatientAssessmentInput = {
    where: PatientPackageWhereUniqueInput
    data: XOR<PatientPackageUpdateWithoutPatientAssessmentInput, PatientPackageUncheckedUpdateWithoutPatientAssessmentInput>
  }

  export type PatientPackageUpdateManyWithWhereWithoutPatientAssessmentInput = {
    where: PatientPackageScalarWhereInput
    data: XOR<PatientPackageUpdateManyMutationInput, PatientPackageUncheckedUpdateManyWithoutPatientAssessmentInput>
  }

  export type PatientItemUpsertWithWhereUniqueWithoutPatientAssessmentInput = {
    where: PatientItemWhereUniqueInput
    update: XOR<PatientItemUpdateWithoutPatientAssessmentInput, PatientItemUncheckedUpdateWithoutPatientAssessmentInput>
    create: XOR<PatientItemCreateWithoutPatientAssessmentInput, PatientItemUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type PatientItemUpdateWithWhereUniqueWithoutPatientAssessmentInput = {
    where: PatientItemWhereUniqueInput
    data: XOR<PatientItemUpdateWithoutPatientAssessmentInput, PatientItemUncheckedUpdateWithoutPatientAssessmentInput>
  }

  export type PatientItemUpdateManyWithWhereWithoutPatientAssessmentInput = {
    where: PatientItemScalarWhereInput
    data: XOR<PatientItemUpdateManyMutationInput, PatientItemUncheckedUpdateManyWithoutPatientAssessmentInput>
  }

  export type NoteUpsertWithWhereUniqueWithoutPatientAssessmentInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutPatientAssessmentInput, NoteUncheckedUpdateWithoutPatientAssessmentInput>
    create: XOR<NoteCreateWithoutPatientAssessmentInput, NoteUncheckedCreateWithoutPatientAssessmentInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutPatientAssessmentInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutPatientAssessmentInput, NoteUncheckedUpdateWithoutPatientAssessmentInput>
  }

  export type NoteUpdateManyWithWhereWithoutPatientAssessmentInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutPatientAssessmentInput>
  }

  export type EmployeeUpsertWithoutCreatedPatientAssessmentsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPatientAssessmentsInput, EmployeeUncheckedUpdateWithoutCreatedPatientAssessmentsInput>
    create: XOR<EmployeeCreateWithoutCreatedPatientAssessmentsInput, EmployeeUncheckedCreateWithoutCreatedPatientAssessmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPatientAssessmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPatientAssessmentsInput, EmployeeUncheckedUpdateWithoutCreatedPatientAssessmentsInput>
  }

  export type EmployeeUpdateWithoutCreatedPatientAssessmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPatientAssessmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPatientAssessmentsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPatientAssessmentsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientAssessmentsInput>
    create: XOR<EmployeeCreateWithoutUpdatedPatientAssessmentsInput, EmployeeUncheckedCreateWithoutUpdatedPatientAssessmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPatientAssessmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPatientAssessmentsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientAssessmentsInput>
  }

  export type EmployeeUpdateWithoutUpdatedPatientAssessmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPatientAssessmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type PatientTriageCreateWithoutNotesInput = {
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    problems?: TriageProblemCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsCreateNestedManyWithoutPatientTriageInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTriagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTriagesInput
  }

  export type PatientTriageUncheckedCreateWithoutNotesInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    createdById: number
    updatedById: number
    problems?: TriageProblemUncheckedCreateNestedManyWithoutPatientTriageInput
    allergies?: TriageAllergyUncheckedCreateNestedManyWithoutPatientTriageInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientTriageInput
  }

  export type PatientTriageCreateOrConnectWithoutNotesInput = {
    where: PatientTriageWhereUniqueInput
    create: XOR<PatientTriageCreateWithoutNotesInput, PatientTriageUncheckedCreateWithoutNotesInput>
  }

  export type PatientAssessmentCreateWithoutNotesInput = {
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    consultations?: ConsultationsCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemCreateNestedManyWithoutPatientAssessmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientAssessmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientAssessmentsInput
  }

  export type PatientAssessmentUncheckedCreateWithoutNotesInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
    updatedById: number
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutPatientAssessmentInput
  }

  export type PatientAssessmentCreateOrConnectWithoutNotesInput = {
    where: PatientAssessmentWhereUniqueInput
    create: XOR<PatientAssessmentCreateWithoutNotesInput, PatientAssessmentUncheckedCreateWithoutNotesInput>
  }

  export type EmployeeCreateWithoutNotesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutNotesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutNotesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutNotesInput, EmployeeUncheckedCreateWithoutNotesInput>
  }

  export type PatientTriageUpsertWithoutNotesInput = {
    update: XOR<PatientTriageUpdateWithoutNotesInput, PatientTriageUncheckedUpdateWithoutNotesInput>
    create: XOR<PatientTriageCreateWithoutNotesInput, PatientTriageUncheckedCreateWithoutNotesInput>
    where?: PatientTriageWhereInput
  }

  export type PatientTriageUpdateToOneWithWhereWithoutNotesInput = {
    where?: PatientTriageWhereInput
    data: XOR<PatientTriageUpdateWithoutNotesInput, PatientTriageUncheckedUpdateWithoutNotesInput>
  }

  export type PatientTriageUpdateWithoutNotesInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    problems?: TriageProblemUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUpdateManyWithoutPatientTriageNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTriagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTriagesNestedInput
  }

  export type PatientTriageUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    problems?: TriageProblemUncheckedUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUncheckedUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientTriageNestedInput
  }

  export type PatientAssessmentUpsertWithoutNotesInput = {
    update: XOR<PatientAssessmentUpdateWithoutNotesInput, PatientAssessmentUncheckedUpdateWithoutNotesInput>
    create: XOR<PatientAssessmentCreateWithoutNotesInput, PatientAssessmentUncheckedCreateWithoutNotesInput>
    where?: PatientAssessmentWhereInput
  }

  export type PatientAssessmentUpdateToOneWithWhereWithoutNotesInput = {
    where?: PatientAssessmentWhereInput
    data: XOR<PatientAssessmentUpdateWithoutNotesInput, PatientAssessmentUncheckedUpdateWithoutNotesInput>
  }

  export type PatientAssessmentUpdateWithoutNotesInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    consultations?: ConsultationsUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUpdateManyWithoutPatientAssessmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientAssessmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientAssessmentsNestedInput
  }

  export type PatientAssessmentUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutPatientAssessmentNestedInput
  }

  export type EmployeeUpsertWithoutNotesInput = {
    update: XOR<EmployeeUpdateWithoutNotesInput, EmployeeUncheckedUpdateWithoutNotesInput>
    create: XOR<EmployeeCreateWithoutNotesInput, EmployeeUncheckedCreateWithoutNotesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutNotesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutNotesInput, EmployeeUncheckedUpdateWithoutNotesInput>
  }

  export type EmployeeUpdateWithoutNotesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutNotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type TreatmentCreateWithoutPatientTreatmentsInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutTreatmentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedTreatmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedTreatmentsInput
  }

  export type TreatmentUncheckedCreateWithoutPatientTreatmentsInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type TreatmentCreateOrConnectWithoutPatientTreatmentsInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutPatientTreatmentsInput, TreatmentUncheckedCreateWithoutPatientTreatmentsInput>
  }

  export type PatientAssessmentCreateWithoutPatientTreatmentsInput = {
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    consultations?: ConsultationsCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteCreateNestedManyWithoutPatientAssessmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientAssessmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientAssessmentsInput
  }

  export type PatientAssessmentUncheckedCreateWithoutPatientTreatmentsInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
    updatedById: number
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientAssessmentInput
  }

  export type PatientAssessmentCreateOrConnectWithoutPatientTreatmentsInput = {
    where: PatientAssessmentWhereUniqueInput
    create: XOR<PatientAssessmentCreateWithoutPatientTreatmentsInput, PatientAssessmentUncheckedCreateWithoutPatientTreatmentsInput>
  }

  export type BillingsCreateWithoutPatientTreatmentsInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutPatientTreatmentsInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutPatientTreatmentsInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutPatientTreatmentsInput, BillingsUncheckedCreateWithoutPatientTreatmentsInput>
  }

  export type EmployeeCreateWithoutCreatedPatientTreatmentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPatientTreatmentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPatientTreatmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPatientTreatmentsInput, EmployeeUncheckedCreateWithoutCreatedPatientTreatmentsInput>
  }

  export type EmployeeCreateWithoutUpdatedPatientTreatmentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPatientTreatmentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPatientTreatmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPatientTreatmentsInput, EmployeeUncheckedCreateWithoutUpdatedPatientTreatmentsInput>
  }

  export type TreatmentUpsertWithoutPatientTreatmentsInput = {
    update: XOR<TreatmentUpdateWithoutPatientTreatmentsInput, TreatmentUncheckedUpdateWithoutPatientTreatmentsInput>
    create: XOR<TreatmentCreateWithoutPatientTreatmentsInput, TreatmentUncheckedCreateWithoutPatientTreatmentsInput>
    where?: TreatmentWhereInput
  }

  export type TreatmentUpdateToOneWithWhereWithoutPatientTreatmentsInput = {
    where?: TreatmentWhereInput
    data: XOR<TreatmentUpdateWithoutPatientTreatmentsInput, TreatmentUncheckedUpdateWithoutPatientTreatmentsInput>
  }

  export type TreatmentUpdateWithoutPatientTreatmentsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutTreatmentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedTreatmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedTreatmentsNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutPatientTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientAssessmentUpsertWithoutPatientTreatmentsInput = {
    update: XOR<PatientAssessmentUpdateWithoutPatientTreatmentsInput, PatientAssessmentUncheckedUpdateWithoutPatientTreatmentsInput>
    create: XOR<PatientAssessmentCreateWithoutPatientTreatmentsInput, PatientAssessmentUncheckedCreateWithoutPatientTreatmentsInput>
    where?: PatientAssessmentWhereInput
  }

  export type PatientAssessmentUpdateToOneWithWhereWithoutPatientTreatmentsInput = {
    where?: PatientAssessmentWhereInput
    data: XOR<PatientAssessmentUpdateWithoutPatientTreatmentsInput, PatientAssessmentUncheckedUpdateWithoutPatientTreatmentsInput>
  }

  export type PatientAssessmentUpdateWithoutPatientTreatmentsInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    consultations?: ConsultationsUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUpdateManyWithoutPatientAssessmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientAssessmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientAssessmentsNestedInput
  }

  export type PatientAssessmentUncheckedUpdateWithoutPatientTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientAssessmentNestedInput
  }

  export type BillingsUpsertWithoutPatientTreatmentsInput = {
    update: XOR<BillingsUpdateWithoutPatientTreatmentsInput, BillingsUncheckedUpdateWithoutPatientTreatmentsInput>
    create: XOR<BillingsCreateWithoutPatientTreatmentsInput, BillingsUncheckedCreateWithoutPatientTreatmentsInput>
    where?: BillingsWhereInput
  }

  export type BillingsUpdateToOneWithWhereWithoutPatientTreatmentsInput = {
    where?: BillingsWhereInput
    data: XOR<BillingsUpdateWithoutPatientTreatmentsInput, BillingsUncheckedUpdateWithoutPatientTreatmentsInput>
  }

  export type BillingsUpdateWithoutPatientTreatmentsInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutPatientTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type EmployeeUpsertWithoutCreatedPatientTreatmentsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPatientTreatmentsInput, EmployeeUncheckedUpdateWithoutCreatedPatientTreatmentsInput>
    create: XOR<EmployeeCreateWithoutCreatedPatientTreatmentsInput, EmployeeUncheckedCreateWithoutCreatedPatientTreatmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPatientTreatmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPatientTreatmentsInput, EmployeeUncheckedUpdateWithoutCreatedPatientTreatmentsInput>
  }

  export type EmployeeUpdateWithoutCreatedPatientTreatmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPatientTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPatientTreatmentsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPatientTreatmentsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientTreatmentsInput>
    create: XOR<EmployeeCreateWithoutUpdatedPatientTreatmentsInput, EmployeeUncheckedCreateWithoutUpdatedPatientTreatmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPatientTreatmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPatientTreatmentsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientTreatmentsInput>
  }

  export type EmployeeUpdateWithoutUpdatedPatientTreatmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPatientTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type MedicineCreateWithoutPatientMedicationsInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutMedicinesInput
    supplier: SupplierCreateNestedOneWithoutMedicinesInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutMedicineInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedMedicinesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedMedicinesInput
  }

  export type MedicineUncheckedCreateWithoutPatientMedicationsInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicineCreateOrConnectWithoutPatientMedicationsInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutPatientMedicationsInput, MedicineUncheckedCreateWithoutPatientMedicationsInput>
  }

  export type PatientAssessmentCreateWithoutPatientMedicationsInput = {
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    consultations?: ConsultationsCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteCreateNestedManyWithoutPatientAssessmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientAssessmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientAssessmentsInput
  }

  export type PatientAssessmentUncheckedCreateWithoutPatientMedicationsInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
    updatedById: number
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientAssessmentInput
  }

  export type PatientAssessmentCreateOrConnectWithoutPatientMedicationsInput = {
    where: PatientAssessmentWhereUniqueInput
    create: XOR<PatientAssessmentCreateWithoutPatientMedicationsInput, PatientAssessmentUncheckedCreateWithoutPatientMedicationsInput>
  }

  export type BillingsCreateWithoutPatientMedicationsInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutPatientMedicationsInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutPatientMedicationsInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutPatientMedicationsInput, BillingsUncheckedCreateWithoutPatientMedicationsInput>
  }

  export type EmployeeCreateWithoutCreatedPatientMedicationsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPatientMedicationsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPatientMedicationsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPatientMedicationsInput, EmployeeUncheckedCreateWithoutCreatedPatientMedicationsInput>
  }

  export type EmployeeCreateWithoutUpdatedPatientMedicationsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPatientMedicationsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPatientMedicationsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPatientMedicationsInput, EmployeeUncheckedCreateWithoutUpdatedPatientMedicationsInput>
  }

  export type MedicineUpsertWithoutPatientMedicationsInput = {
    update: XOR<MedicineUpdateWithoutPatientMedicationsInput, MedicineUncheckedUpdateWithoutPatientMedicationsInput>
    create: XOR<MedicineCreateWithoutPatientMedicationsInput, MedicineUncheckedCreateWithoutPatientMedicationsInput>
    where?: MedicineWhereInput
  }

  export type MedicineUpdateToOneWithWhereWithoutPatientMedicationsInput = {
    where?: MedicineWhereInput
    data: XOR<MedicineUpdateWithoutPatientMedicationsInput, MedicineUncheckedUpdateWithoutPatientMedicationsInput>
  }

  export type MedicineUpdateWithoutPatientMedicationsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutMedicinesNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutMedicineNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedMedicinesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutPatientMedicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type PatientAssessmentUpsertWithoutPatientMedicationsInput = {
    update: XOR<PatientAssessmentUpdateWithoutPatientMedicationsInput, PatientAssessmentUncheckedUpdateWithoutPatientMedicationsInput>
    create: XOR<PatientAssessmentCreateWithoutPatientMedicationsInput, PatientAssessmentUncheckedCreateWithoutPatientMedicationsInput>
    where?: PatientAssessmentWhereInput
  }

  export type PatientAssessmentUpdateToOneWithWhereWithoutPatientMedicationsInput = {
    where?: PatientAssessmentWhereInput
    data: XOR<PatientAssessmentUpdateWithoutPatientMedicationsInput, PatientAssessmentUncheckedUpdateWithoutPatientMedicationsInput>
  }

  export type PatientAssessmentUpdateWithoutPatientMedicationsInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    consultations?: ConsultationsUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUpdateManyWithoutPatientAssessmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientAssessmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientAssessmentsNestedInput
  }

  export type PatientAssessmentUncheckedUpdateWithoutPatientMedicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientAssessmentNestedInput
  }

  export type BillingsUpsertWithoutPatientMedicationsInput = {
    update: XOR<BillingsUpdateWithoutPatientMedicationsInput, BillingsUncheckedUpdateWithoutPatientMedicationsInput>
    create: XOR<BillingsCreateWithoutPatientMedicationsInput, BillingsUncheckedCreateWithoutPatientMedicationsInput>
    where?: BillingsWhereInput
  }

  export type BillingsUpdateToOneWithWhereWithoutPatientMedicationsInput = {
    where?: BillingsWhereInput
    data: XOR<BillingsUpdateWithoutPatientMedicationsInput, BillingsUncheckedUpdateWithoutPatientMedicationsInput>
  }

  export type BillingsUpdateWithoutPatientMedicationsInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutPatientMedicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type EmployeeUpsertWithoutCreatedPatientMedicationsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPatientMedicationsInput, EmployeeUncheckedUpdateWithoutCreatedPatientMedicationsInput>
    create: XOR<EmployeeCreateWithoutCreatedPatientMedicationsInput, EmployeeUncheckedCreateWithoutCreatedPatientMedicationsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPatientMedicationsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPatientMedicationsInput, EmployeeUncheckedUpdateWithoutCreatedPatientMedicationsInput>
  }

  export type EmployeeUpdateWithoutCreatedPatientMedicationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPatientMedicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPatientMedicationsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPatientMedicationsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientMedicationsInput>
    create: XOR<EmployeeCreateWithoutUpdatedPatientMedicationsInput, EmployeeUncheckedCreateWithoutUpdatedPatientMedicationsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPatientMedicationsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPatientMedicationsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientMedicationsInput>
  }

  export type EmployeeUpdateWithoutUpdatedPatientMedicationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPatientMedicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type PackageCreateWithoutPatientPackagesInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutPackagesInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPackagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPackagesInput
  }

  export type PackageUncheckedCreateWithoutPatientPackagesInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PackageCreateOrConnectWithoutPatientPackagesInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutPatientPackagesInput, PackageUncheckedCreateWithoutPatientPackagesInput>
  }

  export type PatientAssessmentCreateWithoutPatientPackagesInput = {
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    consultations?: ConsultationsCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteCreateNestedManyWithoutPatientAssessmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientAssessmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientAssessmentsInput
  }

  export type PatientAssessmentUncheckedCreateWithoutPatientPackagesInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
    updatedById: number
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientAssessmentInput
  }

  export type PatientAssessmentCreateOrConnectWithoutPatientPackagesInput = {
    where: PatientAssessmentWhereUniqueInput
    create: XOR<PatientAssessmentCreateWithoutPatientPackagesInput, PatientAssessmentUncheckedCreateWithoutPatientPackagesInput>
  }

  export type BillingsCreateWithoutPatientPackagesInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutPatientPackagesInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutPatientPackagesInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutPatientPackagesInput, BillingsUncheckedCreateWithoutPatientPackagesInput>
  }

  export type EmployeeCreateWithoutCreatedPatientPackagesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPatientPackagesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPatientPackagesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPatientPackagesInput, EmployeeUncheckedCreateWithoutCreatedPatientPackagesInput>
  }

  export type EmployeeCreateWithoutUpdatedPatientPackagesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPatientPackagesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPatientPackagesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPatientPackagesInput, EmployeeUncheckedCreateWithoutUpdatedPatientPackagesInput>
  }

  export type PackageUpsertWithoutPatientPackagesInput = {
    update: XOR<PackageUpdateWithoutPatientPackagesInput, PackageUncheckedUpdateWithoutPatientPackagesInput>
    create: XOR<PackageCreateWithoutPatientPackagesInput, PackageUncheckedCreateWithoutPatientPackagesInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutPatientPackagesInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutPatientPackagesInput, PackageUncheckedUpdateWithoutPatientPackagesInput>
  }

  export type PackageUpdateWithoutPatientPackagesInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutPackagesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPackagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPackagesNestedInput
  }

  export type PackageUncheckedUpdateWithoutPatientPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientAssessmentUpsertWithoutPatientPackagesInput = {
    update: XOR<PatientAssessmentUpdateWithoutPatientPackagesInput, PatientAssessmentUncheckedUpdateWithoutPatientPackagesInput>
    create: XOR<PatientAssessmentCreateWithoutPatientPackagesInput, PatientAssessmentUncheckedCreateWithoutPatientPackagesInput>
    where?: PatientAssessmentWhereInput
  }

  export type PatientAssessmentUpdateToOneWithWhereWithoutPatientPackagesInput = {
    where?: PatientAssessmentWhereInput
    data: XOR<PatientAssessmentUpdateWithoutPatientPackagesInput, PatientAssessmentUncheckedUpdateWithoutPatientPackagesInput>
  }

  export type PatientAssessmentUpdateWithoutPatientPackagesInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    consultations?: ConsultationsUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUpdateManyWithoutPatientAssessmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientAssessmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientAssessmentsNestedInput
  }

  export type PatientAssessmentUncheckedUpdateWithoutPatientPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientAssessmentNestedInput
  }

  export type BillingsUpsertWithoutPatientPackagesInput = {
    update: XOR<BillingsUpdateWithoutPatientPackagesInput, BillingsUncheckedUpdateWithoutPatientPackagesInput>
    create: XOR<BillingsCreateWithoutPatientPackagesInput, BillingsUncheckedCreateWithoutPatientPackagesInput>
    where?: BillingsWhereInput
  }

  export type BillingsUpdateToOneWithWhereWithoutPatientPackagesInput = {
    where?: BillingsWhereInput
    data: XOR<BillingsUpdateWithoutPatientPackagesInput, BillingsUncheckedUpdateWithoutPatientPackagesInput>
  }

  export type BillingsUpdateWithoutPatientPackagesInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutPatientPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type EmployeeUpsertWithoutCreatedPatientPackagesInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPatientPackagesInput, EmployeeUncheckedUpdateWithoutCreatedPatientPackagesInput>
    create: XOR<EmployeeCreateWithoutCreatedPatientPackagesInput, EmployeeUncheckedCreateWithoutCreatedPatientPackagesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPatientPackagesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPatientPackagesInput, EmployeeUncheckedUpdateWithoutCreatedPatientPackagesInput>
  }

  export type EmployeeUpdateWithoutCreatedPatientPackagesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPatientPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPatientPackagesInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPatientPackagesInput, EmployeeUncheckedUpdateWithoutUpdatedPatientPackagesInput>
    create: XOR<EmployeeCreateWithoutUpdatedPatientPackagesInput, EmployeeUncheckedCreateWithoutUpdatedPatientPackagesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPatientPackagesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPatientPackagesInput, EmployeeUncheckedUpdateWithoutUpdatedPatientPackagesInput>
  }

  export type EmployeeUpdateWithoutUpdatedPatientPackagesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPatientPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ItemCreateWithoutPatientItemsInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutItemsInput
    supplier: SupplierCreateNestedOneWithoutItemsInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutItemInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedItemsInput
  }

  export type ItemUncheckedCreateWithoutPatientItemsInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutPatientItemsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutPatientItemsInput, ItemUncheckedCreateWithoutPatientItemsInput>
  }

  export type PatientAssessmentCreateWithoutPatientItemsInput = {
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    consultations?: ConsultationsCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteCreateNestedManyWithoutPatientAssessmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientAssessmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientAssessmentsInput
  }

  export type PatientAssessmentUncheckedCreateWithoutPatientItemsInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
    updatedById: number
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutPatientAssessmentInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPatientAssessmentInput
    notes?: NoteUncheckedCreateNestedManyWithoutPatientAssessmentInput
  }

  export type PatientAssessmentCreateOrConnectWithoutPatientItemsInput = {
    where: PatientAssessmentWhereUniqueInput
    create: XOR<PatientAssessmentCreateWithoutPatientItemsInput, PatientAssessmentUncheckedCreateWithoutPatientItemsInput>
  }

  export type BillingsCreateWithoutPatientItemsInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    payments?: PaymentCreateNestedManyWithoutBillingInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutPatientItemsInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    payments?: PaymentUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutPatientItemsInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutPatientItemsInput, BillingsUncheckedCreateWithoutPatientItemsInput>
  }

  export type EmployeeCreateWithoutCreatedPatientItemsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPatientItemsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPatientItemsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPatientItemsInput, EmployeeUncheckedCreateWithoutCreatedPatientItemsInput>
  }

  export type EmployeeCreateWithoutUpdatedPatientItemsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPatientItemsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPatientItemsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPatientItemsInput, EmployeeUncheckedCreateWithoutUpdatedPatientItemsInput>
  }

  export type ItemUpsertWithoutPatientItemsInput = {
    update: XOR<ItemUpdateWithoutPatientItemsInput, ItemUncheckedUpdateWithoutPatientItemsInput>
    create: XOR<ItemCreateWithoutPatientItemsInput, ItemUncheckedCreateWithoutPatientItemsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutPatientItemsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutPatientItemsInput, ItemUncheckedUpdateWithoutPatientItemsInput>
  }

  export type ItemUpdateWithoutPatientItemsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutItemsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutItemsNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutItemNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutPatientItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type PatientAssessmentUpsertWithoutPatientItemsInput = {
    update: XOR<PatientAssessmentUpdateWithoutPatientItemsInput, PatientAssessmentUncheckedUpdateWithoutPatientItemsInput>
    create: XOR<PatientAssessmentCreateWithoutPatientItemsInput, PatientAssessmentUncheckedCreateWithoutPatientItemsInput>
    where?: PatientAssessmentWhereInput
  }

  export type PatientAssessmentUpdateToOneWithWhereWithoutPatientItemsInput = {
    where?: PatientAssessmentWhereInput
    data: XOR<PatientAssessmentUpdateWithoutPatientItemsInput, PatientAssessmentUncheckedUpdateWithoutPatientItemsInput>
  }

  export type PatientAssessmentUpdateWithoutPatientItemsInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    consultations?: ConsultationsUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUpdateManyWithoutPatientAssessmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientAssessmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientAssessmentsNestedInput
  }

  export type PatientAssessmentUncheckedUpdateWithoutPatientItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientAssessmentNestedInput
  }

  export type BillingsUpsertWithoutPatientItemsInput = {
    update: XOR<BillingsUpdateWithoutPatientItemsInput, BillingsUncheckedUpdateWithoutPatientItemsInput>
    create: XOR<BillingsCreateWithoutPatientItemsInput, BillingsUncheckedCreateWithoutPatientItemsInput>
    where?: BillingsWhereInput
  }

  export type BillingsUpdateToOneWithWhereWithoutPatientItemsInput = {
    where?: BillingsWhereInput
    data: XOR<BillingsUpdateWithoutPatientItemsInput, BillingsUncheckedUpdateWithoutPatientItemsInput>
  }

  export type BillingsUpdateWithoutPatientItemsInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutPatientItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type EmployeeUpsertWithoutCreatedPatientItemsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPatientItemsInput, EmployeeUncheckedUpdateWithoutCreatedPatientItemsInput>
    create: XOR<EmployeeCreateWithoutCreatedPatientItemsInput, EmployeeUncheckedCreateWithoutCreatedPatientItemsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPatientItemsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPatientItemsInput, EmployeeUncheckedUpdateWithoutCreatedPatientItemsInput>
  }

  export type EmployeeUpdateWithoutCreatedPatientItemsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPatientItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPatientItemsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPatientItemsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientItemsInput>
    create: XOR<EmployeeCreateWithoutUpdatedPatientItemsInput, EmployeeUncheckedCreateWithoutUpdatedPatientItemsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPatientItemsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPatientItemsInput, EmployeeUncheckedUpdateWithoutUpdatedPatientItemsInput>
  }

  export type EmployeeUpdateWithoutUpdatedPatientItemsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPatientItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type CategoryCreateWithoutMedicinesInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentCreateNestedManyWithoutCategoryInput
    packages?: PackageCreateNestedManyWithoutCategoryInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutMedicinesInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    items?: ItemUncheckedCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutCategoryInput
    packages?: PackageUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutMedicinesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutMedicinesInput, CategoryUncheckedCreateWithoutMedicinesInput>
  }

  export type SupplierCreateWithoutMedicinesInput = {
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ItemCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutSupplierInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedSuppliersInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedSuppliersInput
  }

  export type SupplierUncheckedCreateWithoutMedicinesInput = {
    id?: number
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    items?: ItemUncheckedCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutMedicinesInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutMedicinesInput, SupplierUncheckedCreateWithoutMedicinesInput>
  }

  export type PatientMedicationCreateWithoutMedicineInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientMedicationsInput
    billing?: BillingsCreateNestedOneWithoutPatientMedicationsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientMedicationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientMedicationsInput
  }

  export type PatientMedicationUncheckedCreateWithoutMedicineInput = {
    id?: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientMedicationCreateOrConnectWithoutMedicineInput = {
    where: PatientMedicationWhereUniqueInput
    create: XOR<PatientMedicationCreateWithoutMedicineInput, PatientMedicationUncheckedCreateWithoutMedicineInput>
  }

  export type PatientMedicationCreateManyMedicineInputEnvelope = {
    data: PatientMedicationCreateManyMedicineInput | PatientMedicationCreateManyMedicineInput[]
    skipDuplicates?: boolean
  }

  export type InventoryTransactionCreateWithoutMedicineInput = {
    type: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    item?: ItemCreateNestedOneWithoutInventoryTransactionsInput
    employee: EmployeeCreateNestedOneWithoutInventoryTransactionInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryTransactionsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryTransactionsInput
  }

  export type InventoryTransactionUncheckedCreateWithoutMedicineInput = {
    id?: number
    itemId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryTransactionCreateOrConnectWithoutMedicineInput = {
    where: InventoryTransactionWhereUniqueInput
    create: XOR<InventoryTransactionCreateWithoutMedicineInput, InventoryTransactionUncheckedCreateWithoutMedicineInput>
  }

  export type InventoryTransactionCreateManyMedicineInputEnvelope = {
    data: InventoryTransactionCreateManyMedicineInput | InventoryTransactionCreateManyMedicineInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCountItemCreateWithoutMedicineInput = {
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryCount: InventoryCountCreateNestedOneWithoutItemsInput
    item?: ItemCreateNestedOneWithoutInventoryCountItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryCountItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryCountItemsInput
  }

  export type InventoryCountItemUncheckedCreateWithoutMedicineInput = {
    id?: number
    inventoryCountId: number
    itemId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountItemCreateOrConnectWithoutMedicineInput = {
    where: InventoryCountItemWhereUniqueInput
    create: XOR<InventoryCountItemCreateWithoutMedicineInput, InventoryCountItemUncheckedCreateWithoutMedicineInput>
  }

  export type InventoryCountItemCreateManyMedicineInputEnvelope = {
    data: InventoryCountItemCreateManyMedicineInput | InventoryCountItemCreateManyMedicineInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseOrderItemCreateWithoutMedicineInput = {
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    purchaseOrder: PurchaseOrderCreateNestedOneWithoutItemsInput
    item?: ItemCreateNestedOneWithoutPurchaseOrderItemsInput
  }

  export type PurchaseOrderItemUncheckedCreateWithoutMedicineInput = {
    id?: number
    purchaseOrderId: number
    itemId?: number | null
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderItemCreateOrConnectWithoutMedicineInput = {
    where: PurchaseOrderItemWhereUniqueInput
    create: XOR<PurchaseOrderItemCreateWithoutMedicineInput, PurchaseOrderItemUncheckedCreateWithoutMedicineInput>
  }

  export type PurchaseOrderItemCreateManyMedicineInputEnvelope = {
    data: PurchaseOrderItemCreateManyMedicineInput | PurchaseOrderItemCreateManyMedicineInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedMedicinesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedMedicinesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedMedicinesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedMedicinesInput, EmployeeUncheckedCreateWithoutCreatedMedicinesInput>
  }

  export type EmployeeCreateWithoutUpdatedMedicinesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedMedicinesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedMedicinesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedMedicinesInput, EmployeeUncheckedCreateWithoutUpdatedMedicinesInput>
  }

  export type CategoryUpsertWithoutMedicinesInput = {
    update: XOR<CategoryUpdateWithoutMedicinesInput, CategoryUncheckedUpdateWithoutMedicinesInput>
    create: XOR<CategoryCreateWithoutMedicinesInput, CategoryUncheckedCreateWithoutMedicinesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutMedicinesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutMedicinesInput, CategoryUncheckedUpdateWithoutMedicinesInput>
  }

  export type CategoryUpdateWithoutMedicinesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUpdateManyWithoutCategoryNestedInput
    packages?: PackageUpdateManyWithoutCategoryNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedCategoriesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutMedicinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    items?: ItemUncheckedUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutCategoryNestedInput
    packages?: PackageUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type SupplierUpsertWithoutMedicinesInput = {
    update: XOR<SupplierUpdateWithoutMedicinesInput, SupplierUncheckedUpdateWithoutMedicinesInput>
    create: XOR<SupplierCreateWithoutMedicinesInput, SupplierUncheckedCreateWithoutMedicinesInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutMedicinesInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutMedicinesInput, SupplierUncheckedUpdateWithoutMedicinesInput>
  }

  export type SupplierUpdateWithoutMedicinesInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ItemUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutSupplierNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedSuppliersNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedSuppliersNestedInput
  }

  export type SupplierUncheckedUpdateWithoutMedicinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    items?: ItemUncheckedUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type PatientMedicationUpsertWithWhereUniqueWithoutMedicineInput = {
    where: PatientMedicationWhereUniqueInput
    update: XOR<PatientMedicationUpdateWithoutMedicineInput, PatientMedicationUncheckedUpdateWithoutMedicineInput>
    create: XOR<PatientMedicationCreateWithoutMedicineInput, PatientMedicationUncheckedCreateWithoutMedicineInput>
  }

  export type PatientMedicationUpdateWithWhereUniqueWithoutMedicineInput = {
    where: PatientMedicationWhereUniqueInput
    data: XOR<PatientMedicationUpdateWithoutMedicineInput, PatientMedicationUncheckedUpdateWithoutMedicineInput>
  }

  export type PatientMedicationUpdateManyWithWhereWithoutMedicineInput = {
    where: PatientMedicationScalarWhereInput
    data: XOR<PatientMedicationUpdateManyMutationInput, PatientMedicationUncheckedUpdateManyWithoutMedicineInput>
  }

  export type InventoryTransactionUpsertWithWhereUniqueWithoutMedicineInput = {
    where: InventoryTransactionWhereUniqueInput
    update: XOR<InventoryTransactionUpdateWithoutMedicineInput, InventoryTransactionUncheckedUpdateWithoutMedicineInput>
    create: XOR<InventoryTransactionCreateWithoutMedicineInput, InventoryTransactionUncheckedCreateWithoutMedicineInput>
  }

  export type InventoryTransactionUpdateWithWhereUniqueWithoutMedicineInput = {
    where: InventoryTransactionWhereUniqueInput
    data: XOR<InventoryTransactionUpdateWithoutMedicineInput, InventoryTransactionUncheckedUpdateWithoutMedicineInput>
  }

  export type InventoryTransactionUpdateManyWithWhereWithoutMedicineInput = {
    where: InventoryTransactionScalarWhereInput
    data: XOR<InventoryTransactionUpdateManyMutationInput, InventoryTransactionUncheckedUpdateManyWithoutMedicineInput>
  }

  export type InventoryCountItemUpsertWithWhereUniqueWithoutMedicineInput = {
    where: InventoryCountItemWhereUniqueInput
    update: XOR<InventoryCountItemUpdateWithoutMedicineInput, InventoryCountItemUncheckedUpdateWithoutMedicineInput>
    create: XOR<InventoryCountItemCreateWithoutMedicineInput, InventoryCountItemUncheckedCreateWithoutMedicineInput>
  }

  export type InventoryCountItemUpdateWithWhereUniqueWithoutMedicineInput = {
    where: InventoryCountItemWhereUniqueInput
    data: XOR<InventoryCountItemUpdateWithoutMedicineInput, InventoryCountItemUncheckedUpdateWithoutMedicineInput>
  }

  export type InventoryCountItemUpdateManyWithWhereWithoutMedicineInput = {
    where: InventoryCountItemScalarWhereInput
    data: XOR<InventoryCountItemUpdateManyMutationInput, InventoryCountItemUncheckedUpdateManyWithoutMedicineInput>
  }

  export type PurchaseOrderItemUpsertWithWhereUniqueWithoutMedicineInput = {
    where: PurchaseOrderItemWhereUniqueInput
    update: XOR<PurchaseOrderItemUpdateWithoutMedicineInput, PurchaseOrderItemUncheckedUpdateWithoutMedicineInput>
    create: XOR<PurchaseOrderItemCreateWithoutMedicineInput, PurchaseOrderItemUncheckedCreateWithoutMedicineInput>
  }

  export type PurchaseOrderItemUpdateWithWhereUniqueWithoutMedicineInput = {
    where: PurchaseOrderItemWhereUniqueInput
    data: XOR<PurchaseOrderItemUpdateWithoutMedicineInput, PurchaseOrderItemUncheckedUpdateWithoutMedicineInput>
  }

  export type PurchaseOrderItemUpdateManyWithWhereWithoutMedicineInput = {
    where: PurchaseOrderItemScalarWhereInput
    data: XOR<PurchaseOrderItemUpdateManyMutationInput, PurchaseOrderItemUncheckedUpdateManyWithoutMedicineInput>
  }

  export type PurchaseOrderItemScalarWhereInput = {
    AND?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
    OR?: PurchaseOrderItemScalarWhereInput[]
    NOT?: PurchaseOrderItemScalarWhereInput | PurchaseOrderItemScalarWhereInput[]
    id?: IntFilter<"PurchaseOrderItem"> | number
    purchaseOrderId?: IntFilter<"PurchaseOrderItem"> | number
    itemId?: IntNullableFilter<"PurchaseOrderItem"> | number | null
    medicineId?: IntNullableFilter<"PurchaseOrderItem"> | number | null
    quantity?: IntFilter<"PurchaseOrderItem"> | number
    unitPrice?: FloatFilter<"PurchaseOrderItem"> | number
    totalPrice?: FloatFilter<"PurchaseOrderItem"> | number
    createdAt?: DateTimeFilter<"PurchaseOrderItem"> | Date | string
    updatedAt?: DateTimeFilter<"PurchaseOrderItem"> | Date | string
  }

  export type EmployeeUpsertWithoutCreatedMedicinesInput = {
    update: XOR<EmployeeUpdateWithoutCreatedMedicinesInput, EmployeeUncheckedUpdateWithoutCreatedMedicinesInput>
    create: XOR<EmployeeCreateWithoutCreatedMedicinesInput, EmployeeUncheckedCreateWithoutCreatedMedicinesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedMedicinesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedMedicinesInput, EmployeeUncheckedUpdateWithoutCreatedMedicinesInput>
  }

  export type EmployeeUpdateWithoutCreatedMedicinesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedMedicinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedMedicinesInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedMedicinesInput, EmployeeUncheckedUpdateWithoutUpdatedMedicinesInput>
    create: XOR<EmployeeCreateWithoutUpdatedMedicinesInput, EmployeeUncheckedCreateWithoutUpdatedMedicinesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedMedicinesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedMedicinesInput, EmployeeUncheckedUpdateWithoutUpdatedMedicinesInput>
  }

  export type EmployeeUpdateWithoutUpdatedMedicinesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedMedicinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type CategoryCreateWithoutItemsInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentCreateNestedManyWithoutCategoryInput
    packages?: PackageCreateNestedManyWithoutCategoryInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutCategoryInput
    packages?: PackageUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutItemsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutItemsInput, CategoryUncheckedCreateWithoutItemsInput>
  }

  export type SupplierCreateWithoutItemsInput = {
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderCreateNestedManyWithoutSupplierInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedSuppliersInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedSuppliersInput
  }

  export type SupplierUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutSupplierInput
    purchaseOrders?: PurchaseOrderUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutItemsInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutItemsInput, SupplierUncheckedCreateWithoutItemsInput>
  }

  export type PatientItemCreateWithoutItemInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientItemsInput
    billing?: BillingsCreateNestedOneWithoutPatientItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientItemsInput
  }

  export type PatientItemUncheckedCreateWithoutItemInput = {
    id?: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientItemCreateOrConnectWithoutItemInput = {
    where: PatientItemWhereUniqueInput
    create: XOR<PatientItemCreateWithoutItemInput, PatientItemUncheckedCreateWithoutItemInput>
  }

  export type PatientItemCreateManyItemInputEnvelope = {
    data: PatientItemCreateManyItemInput | PatientItemCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type InventoryTransactionCreateWithoutItemInput = {
    type: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    medicine?: MedicineCreateNestedOneWithoutInventoryTransactionsInput
    employee: EmployeeCreateNestedOneWithoutInventoryTransactionInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryTransactionsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryTransactionsInput
  }

  export type InventoryTransactionUncheckedCreateWithoutItemInput = {
    id?: number
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryTransactionCreateOrConnectWithoutItemInput = {
    where: InventoryTransactionWhereUniqueInput
    create: XOR<InventoryTransactionCreateWithoutItemInput, InventoryTransactionUncheckedCreateWithoutItemInput>
  }

  export type InventoryTransactionCreateManyItemInputEnvelope = {
    data: InventoryTransactionCreateManyItemInput | InventoryTransactionCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCountItemCreateWithoutItemInput = {
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inventoryCount: InventoryCountCreateNestedOneWithoutItemsInput
    medicine?: MedicineCreateNestedOneWithoutInventoryCountItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryCountItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryCountItemsInput
  }

  export type InventoryCountItemUncheckedCreateWithoutItemInput = {
    id?: number
    inventoryCountId: number
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountItemCreateOrConnectWithoutItemInput = {
    where: InventoryCountItemWhereUniqueInput
    create: XOR<InventoryCountItemCreateWithoutItemInput, InventoryCountItemUncheckedCreateWithoutItemInput>
  }

  export type InventoryCountItemCreateManyItemInputEnvelope = {
    data: InventoryCountItemCreateManyItemInput | InventoryCountItemCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseOrderItemCreateWithoutItemInput = {
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    purchaseOrder: PurchaseOrderCreateNestedOneWithoutItemsInput
    medicine?: MedicineCreateNestedOneWithoutPurchaseOrderItemsInput
  }

  export type PurchaseOrderItemUncheckedCreateWithoutItemInput = {
    id?: number
    purchaseOrderId: number
    medicineId?: number | null
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderItemCreateOrConnectWithoutItemInput = {
    where: PurchaseOrderItemWhereUniqueInput
    create: XOR<PurchaseOrderItemCreateWithoutItemInput, PurchaseOrderItemUncheckedCreateWithoutItemInput>
  }

  export type PurchaseOrderItemCreateManyItemInputEnvelope = {
    data: PurchaseOrderItemCreateManyItemInput | PurchaseOrderItemCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedItemsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedItemsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedItemsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedItemsInput, EmployeeUncheckedCreateWithoutCreatedItemsInput>
  }

  export type EmployeeCreateWithoutUpdatedItemsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedItemsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedItemsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedItemsInput, EmployeeUncheckedCreateWithoutUpdatedItemsInput>
  }

  export type CategoryUpsertWithoutItemsInput = {
    update: XOR<CategoryUpdateWithoutItemsInput, CategoryUncheckedUpdateWithoutItemsInput>
    create: XOR<CategoryCreateWithoutItemsInput, CategoryUncheckedCreateWithoutItemsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutItemsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutItemsInput, CategoryUncheckedUpdateWithoutItemsInput>
  }

  export type CategoryUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUpdateManyWithoutCategoryNestedInput
    packages?: PackageUpdateManyWithoutCategoryNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedCategoriesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutCategoryNestedInput
    packages?: PackageUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type SupplierUpsertWithoutItemsInput = {
    update: XOR<SupplierUpdateWithoutItemsInput, SupplierUncheckedUpdateWithoutItemsInput>
    create: XOR<SupplierCreateWithoutItemsInput, SupplierUncheckedCreateWithoutItemsInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutItemsInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutItemsInput, SupplierUncheckedUpdateWithoutItemsInput>
  }

  export type SupplierUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutSupplierNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedSuppliersNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedSuppliersNestedInput
  }

  export type SupplierUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type PatientItemUpsertWithWhereUniqueWithoutItemInput = {
    where: PatientItemWhereUniqueInput
    update: XOR<PatientItemUpdateWithoutItemInput, PatientItemUncheckedUpdateWithoutItemInput>
    create: XOR<PatientItemCreateWithoutItemInput, PatientItemUncheckedCreateWithoutItemInput>
  }

  export type PatientItemUpdateWithWhereUniqueWithoutItemInput = {
    where: PatientItemWhereUniqueInput
    data: XOR<PatientItemUpdateWithoutItemInput, PatientItemUncheckedUpdateWithoutItemInput>
  }

  export type PatientItemUpdateManyWithWhereWithoutItemInput = {
    where: PatientItemScalarWhereInput
    data: XOR<PatientItemUpdateManyMutationInput, PatientItemUncheckedUpdateManyWithoutItemInput>
  }

  export type InventoryTransactionUpsertWithWhereUniqueWithoutItemInput = {
    where: InventoryTransactionWhereUniqueInput
    update: XOR<InventoryTransactionUpdateWithoutItemInput, InventoryTransactionUncheckedUpdateWithoutItemInput>
    create: XOR<InventoryTransactionCreateWithoutItemInput, InventoryTransactionUncheckedCreateWithoutItemInput>
  }

  export type InventoryTransactionUpdateWithWhereUniqueWithoutItemInput = {
    where: InventoryTransactionWhereUniqueInput
    data: XOR<InventoryTransactionUpdateWithoutItemInput, InventoryTransactionUncheckedUpdateWithoutItemInput>
  }

  export type InventoryTransactionUpdateManyWithWhereWithoutItemInput = {
    where: InventoryTransactionScalarWhereInput
    data: XOR<InventoryTransactionUpdateManyMutationInput, InventoryTransactionUncheckedUpdateManyWithoutItemInput>
  }

  export type InventoryCountItemUpsertWithWhereUniqueWithoutItemInput = {
    where: InventoryCountItemWhereUniqueInput
    update: XOR<InventoryCountItemUpdateWithoutItemInput, InventoryCountItemUncheckedUpdateWithoutItemInput>
    create: XOR<InventoryCountItemCreateWithoutItemInput, InventoryCountItemUncheckedCreateWithoutItemInput>
  }

  export type InventoryCountItemUpdateWithWhereUniqueWithoutItemInput = {
    where: InventoryCountItemWhereUniqueInput
    data: XOR<InventoryCountItemUpdateWithoutItemInput, InventoryCountItemUncheckedUpdateWithoutItemInput>
  }

  export type InventoryCountItemUpdateManyWithWhereWithoutItemInput = {
    where: InventoryCountItemScalarWhereInput
    data: XOR<InventoryCountItemUpdateManyMutationInput, InventoryCountItemUncheckedUpdateManyWithoutItemInput>
  }

  export type PurchaseOrderItemUpsertWithWhereUniqueWithoutItemInput = {
    where: PurchaseOrderItemWhereUniqueInput
    update: XOR<PurchaseOrderItemUpdateWithoutItemInput, PurchaseOrderItemUncheckedUpdateWithoutItemInput>
    create: XOR<PurchaseOrderItemCreateWithoutItemInput, PurchaseOrderItemUncheckedCreateWithoutItemInput>
  }

  export type PurchaseOrderItemUpdateWithWhereUniqueWithoutItemInput = {
    where: PurchaseOrderItemWhereUniqueInput
    data: XOR<PurchaseOrderItemUpdateWithoutItemInput, PurchaseOrderItemUncheckedUpdateWithoutItemInput>
  }

  export type PurchaseOrderItemUpdateManyWithWhereWithoutItemInput = {
    where: PurchaseOrderItemScalarWhereInput
    data: XOR<PurchaseOrderItemUpdateManyMutationInput, PurchaseOrderItemUncheckedUpdateManyWithoutItemInput>
  }

  export type EmployeeUpsertWithoutCreatedItemsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedItemsInput, EmployeeUncheckedUpdateWithoutCreatedItemsInput>
    create: XOR<EmployeeCreateWithoutCreatedItemsInput, EmployeeUncheckedCreateWithoutCreatedItemsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedItemsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedItemsInput, EmployeeUncheckedUpdateWithoutCreatedItemsInput>
  }

  export type EmployeeUpdateWithoutCreatedItemsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedItemsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedItemsInput, EmployeeUncheckedUpdateWithoutUpdatedItemsInput>
    create: XOR<EmployeeCreateWithoutUpdatedItemsInput, EmployeeUncheckedCreateWithoutUpdatedItemsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedItemsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedItemsInput, EmployeeUncheckedUpdateWithoutUpdatedItemsInput>
  }

  export type EmployeeUpdateWithoutUpdatedItemsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type CategoryCreateWithoutTreatmentsInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutCategoryInput
    items?: ItemCreateNestedManyWithoutCategoryInput
    packages?: PackageCreateNestedManyWithoutCategoryInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutTreatmentsInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutCategoryInput
    items?: ItemUncheckedCreateNestedManyWithoutCategoryInput
    packages?: PackageUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutTreatmentsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutTreatmentsInput, CategoryUncheckedCreateWithoutTreatmentsInput>
  }

  export type PatientTreatmentCreateWithoutTreatmentInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientTreatmentsInput
    billing?: BillingsCreateNestedOneWithoutPatientTreatmentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTreatmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateWithoutTreatmentInput = {
    id?: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientTreatmentCreateOrConnectWithoutTreatmentInput = {
    where: PatientTreatmentWhereUniqueInput
    create: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput>
  }

  export type PatientTreatmentCreateManyTreatmentInputEnvelope = {
    data: PatientTreatmentCreateManyTreatmentInput | PatientTreatmentCreateManyTreatmentInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedTreatmentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedTreatmentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedTreatmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedTreatmentsInput, EmployeeUncheckedCreateWithoutCreatedTreatmentsInput>
  }

  export type EmployeeCreateWithoutUpdatedTreatmentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedTreatmentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedTreatmentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedTreatmentsInput, EmployeeUncheckedCreateWithoutUpdatedTreatmentsInput>
  }

  export type CategoryUpsertWithoutTreatmentsInput = {
    update: XOR<CategoryUpdateWithoutTreatmentsInput, CategoryUncheckedUpdateWithoutTreatmentsInput>
    create: XOR<CategoryCreateWithoutTreatmentsInput, CategoryUncheckedCreateWithoutTreatmentsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutTreatmentsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutTreatmentsInput, CategoryUncheckedUpdateWithoutTreatmentsInput>
  }

  export type CategoryUpdateWithoutTreatmentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutCategoryNestedInput
    items?: ItemUpdateManyWithoutCategoryNestedInput
    packages?: PackageUpdateManyWithoutCategoryNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedCategoriesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutCategoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutCategoryNestedInput
    packages?: PackageUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type PatientTreatmentUpsertWithWhereUniqueWithoutTreatmentInput = {
    where: PatientTreatmentWhereUniqueInput
    update: XOR<PatientTreatmentUpdateWithoutTreatmentInput, PatientTreatmentUncheckedUpdateWithoutTreatmentInput>
    create: XOR<PatientTreatmentCreateWithoutTreatmentInput, PatientTreatmentUncheckedCreateWithoutTreatmentInput>
  }

  export type PatientTreatmentUpdateWithWhereUniqueWithoutTreatmentInput = {
    where: PatientTreatmentWhereUniqueInput
    data: XOR<PatientTreatmentUpdateWithoutTreatmentInput, PatientTreatmentUncheckedUpdateWithoutTreatmentInput>
  }

  export type PatientTreatmentUpdateManyWithWhereWithoutTreatmentInput = {
    where: PatientTreatmentScalarWhereInput
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyWithoutTreatmentInput>
  }

  export type EmployeeUpsertWithoutCreatedTreatmentsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedTreatmentsInput, EmployeeUncheckedUpdateWithoutCreatedTreatmentsInput>
    create: XOR<EmployeeCreateWithoutCreatedTreatmentsInput, EmployeeUncheckedCreateWithoutCreatedTreatmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedTreatmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedTreatmentsInput, EmployeeUncheckedUpdateWithoutCreatedTreatmentsInput>
  }

  export type EmployeeUpdateWithoutCreatedTreatmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedTreatmentsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedTreatmentsInput, EmployeeUncheckedUpdateWithoutUpdatedTreatmentsInput>
    create: XOR<EmployeeCreateWithoutUpdatedTreatmentsInput, EmployeeUncheckedCreateWithoutUpdatedTreatmentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedTreatmentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedTreatmentsInput, EmployeeUncheckedUpdateWithoutUpdatedTreatmentsInput>
  }

  export type EmployeeUpdateWithoutUpdatedTreatmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedTreatmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type CategoryCreateWithoutPackagesInput = {
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutCategoryInput
    items?: ItemCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentCreateNestedManyWithoutCategoryInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedCategoriesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutPackagesInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutCategoryInput
    items?: ItemUncheckedCreateNestedManyWithoutCategoryInput
    treatments?: TreatmentUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutPackagesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutPackagesInput, CategoryUncheckedCreateWithoutPackagesInput>
  }

  export type PatientPackageCreateWithoutPackageInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientPackagesInput
    billing?: BillingsCreateNestedOneWithoutPatientPackagesInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientPackagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientPackagesInput
  }

  export type PatientPackageUncheckedCreateWithoutPackageInput = {
    id?: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientPackageCreateOrConnectWithoutPackageInput = {
    where: PatientPackageWhereUniqueInput
    create: XOR<PatientPackageCreateWithoutPackageInput, PatientPackageUncheckedCreateWithoutPackageInput>
  }

  export type PatientPackageCreateManyPackageInputEnvelope = {
    data: PatientPackageCreateManyPackageInput | PatientPackageCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedPackagesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPackagesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPackagesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPackagesInput, EmployeeUncheckedCreateWithoutCreatedPackagesInput>
  }

  export type EmployeeCreateWithoutUpdatedPackagesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPackagesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPackagesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPackagesInput, EmployeeUncheckedCreateWithoutUpdatedPackagesInput>
  }

  export type CategoryUpsertWithoutPackagesInput = {
    update: XOR<CategoryUpdateWithoutPackagesInput, CategoryUncheckedUpdateWithoutPackagesInput>
    create: XOR<CategoryCreateWithoutPackagesInput, CategoryUncheckedCreateWithoutPackagesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutPackagesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutPackagesInput, CategoryUncheckedUpdateWithoutPackagesInput>
  }

  export type CategoryUpdateWithoutPackagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutCategoryNestedInput
    items?: ItemUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUpdateManyWithoutCategoryNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedCategoriesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutCategoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type PatientPackageUpsertWithWhereUniqueWithoutPackageInput = {
    where: PatientPackageWhereUniqueInput
    update: XOR<PatientPackageUpdateWithoutPackageInput, PatientPackageUncheckedUpdateWithoutPackageInput>
    create: XOR<PatientPackageCreateWithoutPackageInput, PatientPackageUncheckedCreateWithoutPackageInput>
  }

  export type PatientPackageUpdateWithWhereUniqueWithoutPackageInput = {
    where: PatientPackageWhereUniqueInput
    data: XOR<PatientPackageUpdateWithoutPackageInput, PatientPackageUncheckedUpdateWithoutPackageInput>
  }

  export type PatientPackageUpdateManyWithWhereWithoutPackageInput = {
    where: PatientPackageScalarWhereInput
    data: XOR<PatientPackageUpdateManyMutationInput, PatientPackageUncheckedUpdateManyWithoutPackageInput>
  }

  export type EmployeeUpsertWithoutCreatedPackagesInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPackagesInput, EmployeeUncheckedUpdateWithoutCreatedPackagesInput>
    create: XOR<EmployeeCreateWithoutCreatedPackagesInput, EmployeeUncheckedCreateWithoutCreatedPackagesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPackagesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPackagesInput, EmployeeUncheckedUpdateWithoutCreatedPackagesInput>
  }

  export type EmployeeUpdateWithoutCreatedPackagesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPackagesInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPackagesInput, EmployeeUncheckedUpdateWithoutUpdatedPackagesInput>
    create: XOR<EmployeeCreateWithoutUpdatedPackagesInput, EmployeeUncheckedCreateWithoutUpdatedPackagesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPackagesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPackagesInput, EmployeeUncheckedUpdateWithoutUpdatedPackagesInput>
  }

  export type EmployeeUpdateWithoutUpdatedPackagesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type MedicineCreateWithoutCategoryInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutMedicinesInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutMedicineInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedMedicinesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedMedicinesInput
  }

  export type MedicineUncheckedCreateWithoutCategoryInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicineCreateOrConnectWithoutCategoryInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutCategoryInput, MedicineUncheckedCreateWithoutCategoryInput>
  }

  export type MedicineCreateManyCategoryInputEnvelope = {
    data: MedicineCreateManyCategoryInput | MedicineCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ItemCreateWithoutCategoryInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutItemsInput
    patientItems?: PatientItemCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutItemInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedItemsInput
  }

  export type ItemUncheckedCreateWithoutCategoryInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutCategoryInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput>
  }

  export type ItemCreateManyCategoryInputEnvelope = {
    data: ItemCreateManyCategoryInput | ItemCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentCreateWithoutCategoryInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutTreatmentInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedTreatmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedTreatmentsInput
  }

  export type TreatmentUncheckedCreateWithoutCategoryInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutTreatmentInput
  }

  export type TreatmentCreateOrConnectWithoutCategoryInput = {
    where: TreatmentWhereUniqueInput
    create: XOR<TreatmentCreateWithoutCategoryInput, TreatmentUncheckedCreateWithoutCategoryInput>
  }

  export type TreatmentCreateManyCategoryInputEnvelope = {
    data: TreatmentCreateManyCategoryInput | TreatmentCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type PackageCreateWithoutCategoryInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientPackages?: PatientPackageCreateNestedManyWithoutPackageInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPackagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPackagesInput
  }

  export type PackageUncheckedCreateWithoutCategoryInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutCategoryInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutCategoryInput, PackageUncheckedCreateWithoutCategoryInput>
  }

  export type PackageCreateManyCategoryInputEnvelope = {
    data: PackageCreateManyCategoryInput | PackageCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedCategoriesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedCategoriesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedCategoriesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedCategoriesInput, EmployeeUncheckedCreateWithoutCreatedCategoriesInput>
  }

  export type EmployeeCreateWithoutUpdatedCategoriesInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedCategoriesInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedCategoriesInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedCategoriesInput, EmployeeUncheckedCreateWithoutUpdatedCategoriesInput>
  }

  export type MedicineUpsertWithWhereUniqueWithoutCategoryInput = {
    where: MedicineWhereUniqueInput
    update: XOR<MedicineUpdateWithoutCategoryInput, MedicineUncheckedUpdateWithoutCategoryInput>
    create: XOR<MedicineCreateWithoutCategoryInput, MedicineUncheckedCreateWithoutCategoryInput>
  }

  export type MedicineUpdateWithWhereUniqueWithoutCategoryInput = {
    where: MedicineWhereUniqueInput
    data: XOR<MedicineUpdateWithoutCategoryInput, MedicineUncheckedUpdateWithoutCategoryInput>
  }

  export type MedicineUpdateManyWithWhereWithoutCategoryInput = {
    where: MedicineScalarWhereInput
    data: XOR<MedicineUpdateManyMutationInput, MedicineUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ItemUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutCategoryInput, ItemUncheckedUpdateWithoutCategoryInput>
    create: XOR<ItemCreateWithoutCategoryInput, ItemUncheckedCreateWithoutCategoryInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutCategoryInput, ItemUncheckedUpdateWithoutCategoryInput>
  }

  export type ItemUpdateManyWithWhereWithoutCategoryInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutCategoryInput>
  }

  export type TreatmentUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TreatmentWhereUniqueInput
    update: XOR<TreatmentUpdateWithoutCategoryInput, TreatmentUncheckedUpdateWithoutCategoryInput>
    create: XOR<TreatmentCreateWithoutCategoryInput, TreatmentUncheckedCreateWithoutCategoryInput>
  }

  export type TreatmentUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TreatmentWhereUniqueInput
    data: XOR<TreatmentUpdateWithoutCategoryInput, TreatmentUncheckedUpdateWithoutCategoryInput>
  }

  export type TreatmentUpdateManyWithWhereWithoutCategoryInput = {
    where: TreatmentScalarWhereInput
    data: XOR<TreatmentUpdateManyMutationInput, TreatmentUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PackageUpsertWithWhereUniqueWithoutCategoryInput = {
    where: PackageWhereUniqueInput
    update: XOR<PackageUpdateWithoutCategoryInput, PackageUncheckedUpdateWithoutCategoryInput>
    create: XOR<PackageCreateWithoutCategoryInput, PackageUncheckedCreateWithoutCategoryInput>
  }

  export type PackageUpdateWithWhereUniqueWithoutCategoryInput = {
    where: PackageWhereUniqueInput
    data: XOR<PackageUpdateWithoutCategoryInput, PackageUncheckedUpdateWithoutCategoryInput>
  }

  export type PackageUpdateManyWithWhereWithoutCategoryInput = {
    where: PackageScalarWhereInput
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyWithoutCategoryInput>
  }

  export type EmployeeUpsertWithoutCreatedCategoriesInput = {
    update: XOR<EmployeeUpdateWithoutCreatedCategoriesInput, EmployeeUncheckedUpdateWithoutCreatedCategoriesInput>
    create: XOR<EmployeeCreateWithoutCreatedCategoriesInput, EmployeeUncheckedCreateWithoutCreatedCategoriesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedCategoriesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedCategoriesInput, EmployeeUncheckedUpdateWithoutCreatedCategoriesInput>
  }

  export type EmployeeUpdateWithoutCreatedCategoriesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedCategoriesInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedCategoriesInput, EmployeeUncheckedUpdateWithoutUpdatedCategoriesInput>
    create: XOR<EmployeeCreateWithoutUpdatedCategoriesInput, EmployeeUncheckedCreateWithoutUpdatedCategoriesInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedCategoriesInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedCategoriesInput, EmployeeUncheckedUpdateWithoutUpdatedCategoriesInput>
  }

  export type EmployeeUpdateWithoutUpdatedCategoriesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type MedicineCreateWithoutSupplierInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutMedicinesInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutMedicineInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedMedicinesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedMedicinesInput
  }

  export type MedicineUncheckedCreateWithoutSupplierInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicineCreateOrConnectWithoutSupplierInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutSupplierInput, MedicineUncheckedCreateWithoutSupplierInput>
  }

  export type MedicineCreateManySupplierInputEnvelope = {
    data: MedicineCreateManySupplierInput | MedicineCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type ItemCreateWithoutSupplierInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutItemsInput
    patientItems?: PatientItemCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutItemInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedItemsInput
  }

  export type ItemUncheckedCreateWithoutSupplierInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutSupplierInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutSupplierInput, ItemUncheckedCreateWithoutSupplierInput>
  }

  export type ItemCreateManySupplierInputEnvelope = {
    data: ItemCreateManySupplierInput | ItemCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type PurchaseOrderCreateWithoutSupplierInput = {
    orderNumber: string
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: PurchaseOrderItemCreateNestedManyWithoutPurchaseOrderInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPOsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPOsInput
    Employee?: EmployeeCreateNestedOneWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUncheckedCreateWithoutSupplierInput = {
    id?: number
    orderNumber: string
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: number | null
    items?: PurchaseOrderItemUncheckedCreateNestedManyWithoutPurchaseOrderInput
  }

  export type PurchaseOrderCreateOrConnectWithoutSupplierInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutSupplierInput, PurchaseOrderUncheckedCreateWithoutSupplierInput>
  }

  export type PurchaseOrderCreateManySupplierInputEnvelope = {
    data: PurchaseOrderCreateManySupplierInput | PurchaseOrderCreateManySupplierInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedSuppliersInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedSuppliersInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedSuppliersInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedSuppliersInput, EmployeeUncheckedCreateWithoutCreatedSuppliersInput>
  }

  export type EmployeeCreateWithoutUpdatedSuppliersInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedSuppliersInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedSuppliersInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedSuppliersInput, EmployeeUncheckedCreateWithoutUpdatedSuppliersInput>
  }

  export type MedicineUpsertWithWhereUniqueWithoutSupplierInput = {
    where: MedicineWhereUniqueInput
    update: XOR<MedicineUpdateWithoutSupplierInput, MedicineUncheckedUpdateWithoutSupplierInput>
    create: XOR<MedicineCreateWithoutSupplierInput, MedicineUncheckedCreateWithoutSupplierInput>
  }

  export type MedicineUpdateWithWhereUniqueWithoutSupplierInput = {
    where: MedicineWhereUniqueInput
    data: XOR<MedicineUpdateWithoutSupplierInput, MedicineUncheckedUpdateWithoutSupplierInput>
  }

  export type MedicineUpdateManyWithWhereWithoutSupplierInput = {
    where: MedicineScalarWhereInput
    data: XOR<MedicineUpdateManyMutationInput, MedicineUncheckedUpdateManyWithoutSupplierInput>
  }

  export type ItemUpsertWithWhereUniqueWithoutSupplierInput = {
    where: ItemWhereUniqueInput
    update: XOR<ItemUpdateWithoutSupplierInput, ItemUncheckedUpdateWithoutSupplierInput>
    create: XOR<ItemCreateWithoutSupplierInput, ItemUncheckedCreateWithoutSupplierInput>
  }

  export type ItemUpdateWithWhereUniqueWithoutSupplierInput = {
    where: ItemWhereUniqueInput
    data: XOR<ItemUpdateWithoutSupplierInput, ItemUncheckedUpdateWithoutSupplierInput>
  }

  export type ItemUpdateManyWithWhereWithoutSupplierInput = {
    where: ItemScalarWhereInput
    data: XOR<ItemUpdateManyMutationInput, ItemUncheckedUpdateManyWithoutSupplierInput>
  }

  export type PurchaseOrderUpsertWithWhereUniqueWithoutSupplierInput = {
    where: PurchaseOrderWhereUniqueInput
    update: XOR<PurchaseOrderUpdateWithoutSupplierInput, PurchaseOrderUncheckedUpdateWithoutSupplierInput>
    create: XOR<PurchaseOrderCreateWithoutSupplierInput, PurchaseOrderUncheckedCreateWithoutSupplierInput>
  }

  export type PurchaseOrderUpdateWithWhereUniqueWithoutSupplierInput = {
    where: PurchaseOrderWhereUniqueInput
    data: XOR<PurchaseOrderUpdateWithoutSupplierInput, PurchaseOrderUncheckedUpdateWithoutSupplierInput>
  }

  export type PurchaseOrderUpdateManyWithWhereWithoutSupplierInput = {
    where: PurchaseOrderScalarWhereInput
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyWithoutSupplierInput>
  }

  export type EmployeeUpsertWithoutCreatedSuppliersInput = {
    update: XOR<EmployeeUpdateWithoutCreatedSuppliersInput, EmployeeUncheckedUpdateWithoutCreatedSuppliersInput>
    create: XOR<EmployeeCreateWithoutCreatedSuppliersInput, EmployeeUncheckedCreateWithoutCreatedSuppliersInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedSuppliersInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedSuppliersInput, EmployeeUncheckedUpdateWithoutCreatedSuppliersInput>
  }

  export type EmployeeUpdateWithoutCreatedSuppliersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedSuppliersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedSuppliersInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedSuppliersInput, EmployeeUncheckedUpdateWithoutUpdatedSuppliersInput>
    create: XOR<EmployeeCreateWithoutUpdatedSuppliersInput, EmployeeUncheckedCreateWithoutUpdatedSuppliersInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedSuppliersInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedSuppliersInput, EmployeeUncheckedUpdateWithoutUpdatedSuppliersInput>
  }

  export type EmployeeUpdateWithoutUpdatedSuppliersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedSuppliersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ItemCreateWithoutInventoryTransactionsInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutItemsInput
    supplier: SupplierCreateNestedOneWithoutItemsInput
    patientItems?: PatientItemCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutItemInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedItemsInput
  }

  export type ItemUncheckedCreateWithoutInventoryTransactionsInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutInventoryTransactionsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutInventoryTransactionsInput, ItemUncheckedCreateWithoutInventoryTransactionsInput>
  }

  export type MedicineCreateWithoutInventoryTransactionsInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutMedicinesInput
    supplier: SupplierCreateNestedOneWithoutMedicinesInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutMedicineInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedMedicinesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedMedicinesInput
  }

  export type MedicineUncheckedCreateWithoutInventoryTransactionsInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicineCreateOrConnectWithoutInventoryTransactionsInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutInventoryTransactionsInput, MedicineUncheckedCreateWithoutInventoryTransactionsInput>
  }

  export type EmployeeCreateWithoutInventoryTransactionInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutInventoryTransactionInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutInventoryTransactionInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutInventoryTransactionInput, EmployeeUncheckedCreateWithoutInventoryTransactionInput>
  }

  export type EmployeeCreateWithoutCreatedInventoryTransactionsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedInventoryTransactionsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedInventoryTransactionsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedInventoryTransactionsInput, EmployeeUncheckedCreateWithoutCreatedInventoryTransactionsInput>
  }

  export type EmployeeCreateWithoutUpdatedInventoryTransactionsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedInventoryTransactionsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedInventoryTransactionsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedInventoryTransactionsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryTransactionsInput>
  }

  export type ItemUpsertWithoutInventoryTransactionsInput = {
    update: XOR<ItemUpdateWithoutInventoryTransactionsInput, ItemUncheckedUpdateWithoutInventoryTransactionsInput>
    create: XOR<ItemCreateWithoutInventoryTransactionsInput, ItemUncheckedCreateWithoutInventoryTransactionsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutInventoryTransactionsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutInventoryTransactionsInput, ItemUncheckedUpdateWithoutInventoryTransactionsInput>
  }

  export type ItemUpdateWithoutInventoryTransactionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutItemsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutItemsNestedInput
    patientItems?: PatientItemUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutItemNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutInventoryTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientItems?: PatientItemUncheckedUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type MedicineUpsertWithoutInventoryTransactionsInput = {
    update: XOR<MedicineUpdateWithoutInventoryTransactionsInput, MedicineUncheckedUpdateWithoutInventoryTransactionsInput>
    create: XOR<MedicineCreateWithoutInventoryTransactionsInput, MedicineUncheckedCreateWithoutInventoryTransactionsInput>
    where?: MedicineWhereInput
  }

  export type MedicineUpdateToOneWithWhereWithoutInventoryTransactionsInput = {
    where?: MedicineWhereInput
    data: XOR<MedicineUpdateWithoutInventoryTransactionsInput, MedicineUncheckedUpdateWithoutInventoryTransactionsInput>
  }

  export type MedicineUpdateWithoutInventoryTransactionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutMedicinesNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutMedicineNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedMedicinesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutInventoryTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type EmployeeUpsertWithoutInventoryTransactionInput = {
    update: XOR<EmployeeUpdateWithoutInventoryTransactionInput, EmployeeUncheckedUpdateWithoutInventoryTransactionInput>
    create: XOR<EmployeeCreateWithoutInventoryTransactionInput, EmployeeUncheckedCreateWithoutInventoryTransactionInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutInventoryTransactionInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutInventoryTransactionInput, EmployeeUncheckedUpdateWithoutInventoryTransactionInput>
  }

  export type EmployeeUpdateWithoutInventoryTransactionInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutInventoryTransactionInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutCreatedInventoryTransactionsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedInventoryTransactionsInput, EmployeeUncheckedUpdateWithoutCreatedInventoryTransactionsInput>
    create: XOR<EmployeeCreateWithoutCreatedInventoryTransactionsInput, EmployeeUncheckedCreateWithoutCreatedInventoryTransactionsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedInventoryTransactionsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedInventoryTransactionsInput, EmployeeUncheckedUpdateWithoutCreatedInventoryTransactionsInput>
  }

  export type EmployeeUpdateWithoutCreatedInventoryTransactionsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedInventoryTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedInventoryTransactionsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedInventoryTransactionsInput, EmployeeUncheckedUpdateWithoutUpdatedInventoryTransactionsInput>
    create: XOR<EmployeeCreateWithoutUpdatedInventoryTransactionsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryTransactionsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedInventoryTransactionsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedInventoryTransactionsInput, EmployeeUncheckedUpdateWithoutUpdatedInventoryTransactionsInput>
  }

  export type EmployeeUpdateWithoutUpdatedInventoryTransactionsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedInventoryTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeCreateWithoutInventoryCountInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutInventoryCountInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutInventoryCountInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutInventoryCountInput, EmployeeUncheckedCreateWithoutInventoryCountInput>
  }

  export type InventoryCountItemCreateWithoutInventoryCountInput = {
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    item?: ItemCreateNestedOneWithoutInventoryCountItemsInput
    medicine?: MedicineCreateNestedOneWithoutInventoryCountItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryCountItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryCountItemsInput
  }

  export type InventoryCountItemUncheckedCreateWithoutInventoryCountInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountItemCreateOrConnectWithoutInventoryCountInput = {
    where: InventoryCountItemWhereUniqueInput
    create: XOR<InventoryCountItemCreateWithoutInventoryCountInput, InventoryCountItemUncheckedCreateWithoutInventoryCountInput>
  }

  export type InventoryCountItemCreateManyInventoryCountInputEnvelope = {
    data: InventoryCountItemCreateManyInventoryCountInput | InventoryCountItemCreateManyInventoryCountInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedInventoryCountsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedInventoryCountsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedInventoryCountsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedInventoryCountsInput, EmployeeUncheckedCreateWithoutCreatedInventoryCountsInput>
  }

  export type EmployeeCreateWithoutUpdatedInventoryCountsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedInventoryCountsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedInventoryCountsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedInventoryCountsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryCountsInput>
  }

  export type EmployeeUpsertWithoutInventoryCountInput = {
    update: XOR<EmployeeUpdateWithoutInventoryCountInput, EmployeeUncheckedUpdateWithoutInventoryCountInput>
    create: XOR<EmployeeCreateWithoutInventoryCountInput, EmployeeUncheckedCreateWithoutInventoryCountInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutInventoryCountInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutInventoryCountInput, EmployeeUncheckedUpdateWithoutInventoryCountInput>
  }

  export type EmployeeUpdateWithoutInventoryCountInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutInventoryCountInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type InventoryCountItemUpsertWithWhereUniqueWithoutInventoryCountInput = {
    where: InventoryCountItemWhereUniqueInput
    update: XOR<InventoryCountItemUpdateWithoutInventoryCountInput, InventoryCountItemUncheckedUpdateWithoutInventoryCountInput>
    create: XOR<InventoryCountItemCreateWithoutInventoryCountInput, InventoryCountItemUncheckedCreateWithoutInventoryCountInput>
  }

  export type InventoryCountItemUpdateWithWhereUniqueWithoutInventoryCountInput = {
    where: InventoryCountItemWhereUniqueInput
    data: XOR<InventoryCountItemUpdateWithoutInventoryCountInput, InventoryCountItemUncheckedUpdateWithoutInventoryCountInput>
  }

  export type InventoryCountItemUpdateManyWithWhereWithoutInventoryCountInput = {
    where: InventoryCountItemScalarWhereInput
    data: XOR<InventoryCountItemUpdateManyMutationInput, InventoryCountItemUncheckedUpdateManyWithoutInventoryCountInput>
  }

  export type EmployeeUpsertWithoutCreatedInventoryCountsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedInventoryCountsInput, EmployeeUncheckedUpdateWithoutCreatedInventoryCountsInput>
    create: XOR<EmployeeCreateWithoutCreatedInventoryCountsInput, EmployeeUncheckedCreateWithoutCreatedInventoryCountsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedInventoryCountsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedInventoryCountsInput, EmployeeUncheckedUpdateWithoutCreatedInventoryCountsInput>
  }

  export type EmployeeUpdateWithoutCreatedInventoryCountsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedInventoryCountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedInventoryCountsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedInventoryCountsInput, EmployeeUncheckedUpdateWithoutUpdatedInventoryCountsInput>
    create: XOR<EmployeeCreateWithoutUpdatedInventoryCountsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryCountsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedInventoryCountsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedInventoryCountsInput, EmployeeUncheckedUpdateWithoutUpdatedInventoryCountsInput>
  }

  export type EmployeeUpdateWithoutUpdatedInventoryCountsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedInventoryCountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type InventoryCountCreateWithoutItemsInput = {
    date: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee: EmployeeCreateNestedOneWithoutInventoryCountInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedInventoryCountsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedInventoryCountsInput
  }

  export type InventoryCountUncheckedCreateWithoutItemsInput = {
    id?: number
    date: Date | string
    status: string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountCreateOrConnectWithoutItemsInput = {
    where: InventoryCountWhereUniqueInput
    create: XOR<InventoryCountCreateWithoutItemsInput, InventoryCountUncheckedCreateWithoutItemsInput>
  }

  export type ItemCreateWithoutInventoryCountItemsInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutItemsInput
    supplier: SupplierCreateNestedOneWithoutItemsInput
    patientItems?: PatientItemCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutItemInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedItemsInput
  }

  export type ItemUncheckedCreateWithoutInventoryCountItemsInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutItemInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutInventoryCountItemsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutInventoryCountItemsInput, ItemUncheckedCreateWithoutInventoryCountItemsInput>
  }

  export type MedicineCreateWithoutInventoryCountItemsInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutMedicinesInput
    supplier: SupplierCreateNestedOneWithoutMedicinesInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemCreateNestedManyWithoutMedicineInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedMedicinesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedMedicinesInput
  }

  export type MedicineUncheckedCreateWithoutInventoryCountItemsInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutMedicineInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicineCreateOrConnectWithoutInventoryCountItemsInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutInventoryCountItemsInput, MedicineUncheckedCreateWithoutInventoryCountItemsInput>
  }

  export type EmployeeCreateWithoutCreatedInventoryCountItemsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedInventoryCountItemsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedInventoryCountItemsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedInventoryCountItemsInput, EmployeeUncheckedCreateWithoutCreatedInventoryCountItemsInput>
  }

  export type EmployeeCreateWithoutUpdatedInventoryCountItemsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedInventoryCountItemsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedInventoryCountItemsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedInventoryCountItemsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryCountItemsInput>
  }

  export type InventoryCountUpsertWithoutItemsInput = {
    update: XOR<InventoryCountUpdateWithoutItemsInput, InventoryCountUncheckedUpdateWithoutItemsInput>
    create: XOR<InventoryCountCreateWithoutItemsInput, InventoryCountUncheckedCreateWithoutItemsInput>
    where?: InventoryCountWhereInput
  }

  export type InventoryCountUpdateToOneWithWhereWithoutItemsInput = {
    where?: InventoryCountWhereInput
    data: XOR<InventoryCountUpdateWithoutItemsInput, InventoryCountUncheckedUpdateWithoutItemsInput>
  }

  export type InventoryCountUpdateWithoutItemsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutInventoryCountNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryCountsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountsNestedInput
  }

  export type InventoryCountUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ItemUpsertWithoutInventoryCountItemsInput = {
    update: XOR<ItemUpdateWithoutInventoryCountItemsInput, ItemUncheckedUpdateWithoutInventoryCountItemsInput>
    create: XOR<ItemCreateWithoutInventoryCountItemsInput, ItemUncheckedCreateWithoutInventoryCountItemsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutInventoryCountItemsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutInventoryCountItemsInput, ItemUncheckedUpdateWithoutInventoryCountItemsInput>
  }

  export type ItemUpdateWithoutInventoryCountItemsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutItemsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutItemsNestedInput
    patientItems?: PatientItemUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutItemNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutInventoryCountItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientItems?: PatientItemUncheckedUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type MedicineUpsertWithoutInventoryCountItemsInput = {
    update: XOR<MedicineUpdateWithoutInventoryCountItemsInput, MedicineUncheckedUpdateWithoutInventoryCountItemsInput>
    create: XOR<MedicineCreateWithoutInventoryCountItemsInput, MedicineUncheckedCreateWithoutInventoryCountItemsInput>
    where?: MedicineWhereInput
  }

  export type MedicineUpdateToOneWithWhereWithoutInventoryCountItemsInput = {
    where?: MedicineWhereInput
    data: XOR<MedicineUpdateWithoutInventoryCountItemsInput, MedicineUncheckedUpdateWithoutInventoryCountItemsInput>
  }

  export type MedicineUpdateWithoutInventoryCountItemsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutMedicinesNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutMedicineNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedMedicinesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutInventoryCountItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type EmployeeUpsertWithoutCreatedInventoryCountItemsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedInventoryCountItemsInput, EmployeeUncheckedUpdateWithoutCreatedInventoryCountItemsInput>
    create: XOR<EmployeeCreateWithoutCreatedInventoryCountItemsInput, EmployeeUncheckedCreateWithoutCreatedInventoryCountItemsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedInventoryCountItemsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedInventoryCountItemsInput, EmployeeUncheckedUpdateWithoutCreatedInventoryCountItemsInput>
  }

  export type EmployeeUpdateWithoutCreatedInventoryCountItemsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedInventoryCountItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedInventoryCountItemsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedInventoryCountItemsInput, EmployeeUncheckedUpdateWithoutUpdatedInventoryCountItemsInput>
    create: XOR<EmployeeCreateWithoutUpdatedInventoryCountItemsInput, EmployeeUncheckedCreateWithoutUpdatedInventoryCountItemsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedInventoryCountItemsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedInventoryCountItemsInput, EmployeeUncheckedUpdateWithoutUpdatedInventoryCountItemsInput>
  }

  export type EmployeeUpdateWithoutUpdatedInventoryCountItemsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedInventoryCountItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type SupplierCreateWithoutPurchaseOrdersInput = {
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicines?: MedicineCreateNestedManyWithoutSupplierInput
    items?: ItemCreateNestedManyWithoutSupplierInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedSuppliersInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedSuppliersInput
  }

  export type SupplierUncheckedCreateWithoutPurchaseOrdersInput = {
    id?: number
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    medicines?: MedicineUncheckedCreateNestedManyWithoutSupplierInput
    items?: ItemUncheckedCreateNestedManyWithoutSupplierInput
  }

  export type SupplierCreateOrConnectWithoutPurchaseOrdersInput = {
    where: SupplierWhereUniqueInput
    create: XOR<SupplierCreateWithoutPurchaseOrdersInput, SupplierUncheckedCreateWithoutPurchaseOrdersInput>
  }

  export type PurchaseOrderItemCreateWithoutPurchaseOrderInput = {
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    item?: ItemCreateNestedOneWithoutPurchaseOrderItemsInput
    medicine?: MedicineCreateNestedOneWithoutPurchaseOrderItemsInput
  }

  export type PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderItemCreateOrConnectWithoutPurchaseOrderInput = {
    where: PurchaseOrderItemWhereUniqueInput
    create: XOR<PurchaseOrderItemCreateWithoutPurchaseOrderInput, PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput>
  }

  export type PurchaseOrderItemCreateManyPurchaseOrderInputEnvelope = {
    data: PurchaseOrderItemCreateManyPurchaseOrderInput | PurchaseOrderItemCreateManyPurchaseOrderInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedPOsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPOsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPOsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPOsInput, EmployeeUncheckedCreateWithoutCreatedPOsInput>
  }

  export type EmployeeCreateWithoutUpdatedPOsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPOsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPOsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPOsInput, EmployeeUncheckedCreateWithoutUpdatedPOsInput>
  }

  export type EmployeeCreateWithoutPurchaseOrderInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutPurchaseOrderInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutPurchaseOrderInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutPurchaseOrderInput, EmployeeUncheckedCreateWithoutPurchaseOrderInput>
  }

  export type SupplierUpsertWithoutPurchaseOrdersInput = {
    update: XOR<SupplierUpdateWithoutPurchaseOrdersInput, SupplierUncheckedUpdateWithoutPurchaseOrdersInput>
    create: XOR<SupplierCreateWithoutPurchaseOrdersInput, SupplierUncheckedCreateWithoutPurchaseOrdersInput>
    where?: SupplierWhereInput
  }

  export type SupplierUpdateToOneWithWhereWithoutPurchaseOrdersInput = {
    where?: SupplierWhereInput
    data: XOR<SupplierUpdateWithoutPurchaseOrdersInput, SupplierUncheckedUpdateWithoutPurchaseOrdersInput>
  }

  export type SupplierUpdateWithoutPurchaseOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutSupplierNestedInput
    items?: ItemUpdateManyWithoutSupplierNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedSuppliersNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedSuppliersNestedInput
  }

  export type SupplierUncheckedUpdateWithoutPurchaseOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutSupplierNestedInput
    items?: ItemUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type PurchaseOrderItemUpsertWithWhereUniqueWithoutPurchaseOrderInput = {
    where: PurchaseOrderItemWhereUniqueInput
    update: XOR<PurchaseOrderItemUpdateWithoutPurchaseOrderInput, PurchaseOrderItemUncheckedUpdateWithoutPurchaseOrderInput>
    create: XOR<PurchaseOrderItemCreateWithoutPurchaseOrderInput, PurchaseOrderItemUncheckedCreateWithoutPurchaseOrderInput>
  }

  export type PurchaseOrderItemUpdateWithWhereUniqueWithoutPurchaseOrderInput = {
    where: PurchaseOrderItemWhereUniqueInput
    data: XOR<PurchaseOrderItemUpdateWithoutPurchaseOrderInput, PurchaseOrderItemUncheckedUpdateWithoutPurchaseOrderInput>
  }

  export type PurchaseOrderItemUpdateManyWithWhereWithoutPurchaseOrderInput = {
    where: PurchaseOrderItemScalarWhereInput
    data: XOR<PurchaseOrderItemUpdateManyMutationInput, PurchaseOrderItemUncheckedUpdateManyWithoutPurchaseOrderInput>
  }

  export type EmployeeUpsertWithoutCreatedPOsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPOsInput, EmployeeUncheckedUpdateWithoutCreatedPOsInput>
    create: XOR<EmployeeCreateWithoutCreatedPOsInput, EmployeeUncheckedCreateWithoutCreatedPOsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPOsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPOsInput, EmployeeUncheckedUpdateWithoutCreatedPOsInput>
  }

  export type EmployeeUpdateWithoutCreatedPOsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPOsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPOsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPOsInput, EmployeeUncheckedUpdateWithoutUpdatedPOsInput>
    create: XOR<EmployeeCreateWithoutUpdatedPOsInput, EmployeeUncheckedCreateWithoutUpdatedPOsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPOsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPOsInput, EmployeeUncheckedUpdateWithoutUpdatedPOsInput>
  }

  export type EmployeeUpdateWithoutUpdatedPOsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPOsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutPurchaseOrderInput = {
    update: XOR<EmployeeUpdateWithoutPurchaseOrderInput, EmployeeUncheckedUpdateWithoutPurchaseOrderInput>
    create: XOR<EmployeeCreateWithoutPurchaseOrderInput, EmployeeUncheckedCreateWithoutPurchaseOrderInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutPurchaseOrderInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutPurchaseOrderInput, EmployeeUncheckedUpdateWithoutPurchaseOrderInput>
  }

  export type EmployeeUpdateWithoutPurchaseOrderInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutPurchaseOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type PurchaseOrderCreateWithoutItemsInput = {
    orderNumber: string
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    supplier: SupplierCreateNestedOneWithoutPurchaseOrdersInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPOsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPOsInput
    Employee?: EmployeeCreateNestedOneWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUncheckedCreateWithoutItemsInput = {
    id?: number
    orderNumber: string
    supplierId: number
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: number | null
  }

  export type PurchaseOrderCreateOrConnectWithoutItemsInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutItemsInput, PurchaseOrderUncheckedCreateWithoutItemsInput>
  }

  export type ItemCreateWithoutPurchaseOrderItemsInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutItemsInput
    supplier: SupplierCreateNestedOneWithoutItemsInput
    patientItems?: PatientItemCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutItemInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedItemsInput
  }

  export type ItemUncheckedCreateWithoutPurchaseOrderItemsInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutItemInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutItemInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutItemInput
  }

  export type ItemCreateOrConnectWithoutPurchaseOrderItemsInput = {
    where: ItemWhereUniqueInput
    create: XOR<ItemCreateWithoutPurchaseOrderItemsInput, ItemUncheckedCreateWithoutPurchaseOrderItemsInput>
  }

  export type MedicineCreateWithoutPurchaseOrderItemsInput = {
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CategoryCreateNestedOneWithoutMedicinesInput
    supplier: SupplierCreateNestedOneWithoutMedicinesInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemCreateNestedManyWithoutMedicineInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedMedicinesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedMedicinesInput
  }

  export type MedicineUncheckedCreateWithoutPurchaseOrderItemsInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutMedicineInput
    inventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutMedicineInput
    inventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutMedicineInput
  }

  export type MedicineCreateOrConnectWithoutPurchaseOrderItemsInput = {
    where: MedicineWhereUniqueInput
    create: XOR<MedicineCreateWithoutPurchaseOrderItemsInput, MedicineUncheckedCreateWithoutPurchaseOrderItemsInput>
  }

  export type PurchaseOrderUpsertWithoutItemsInput = {
    update: XOR<PurchaseOrderUpdateWithoutItemsInput, PurchaseOrderUncheckedUpdateWithoutItemsInput>
    create: XOR<PurchaseOrderCreateWithoutItemsInput, PurchaseOrderUncheckedCreateWithoutItemsInput>
    where?: PurchaseOrderWhereInput
  }

  export type PurchaseOrderUpdateToOneWithWhereWithoutItemsInput = {
    where?: PurchaseOrderWhereInput
    data: XOR<PurchaseOrderUpdateWithoutItemsInput, PurchaseOrderUncheckedUpdateWithoutItemsInput>
  }

  export type PurchaseOrderUpdateWithoutItemsInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutPurchaseOrdersNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPOsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPOsNestedInput
    Employee?: EmployeeUpdateOneWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ItemUpsertWithoutPurchaseOrderItemsInput = {
    update: XOR<ItemUpdateWithoutPurchaseOrderItemsInput, ItemUncheckedUpdateWithoutPurchaseOrderItemsInput>
    create: XOR<ItemCreateWithoutPurchaseOrderItemsInput, ItemUncheckedCreateWithoutPurchaseOrderItemsInput>
    where?: ItemWhereInput
  }

  export type ItemUpdateToOneWithWhereWithoutPurchaseOrderItemsInput = {
    where?: ItemWhereInput
    data: XOR<ItemUpdateWithoutPurchaseOrderItemsInput, ItemUncheckedUpdateWithoutPurchaseOrderItemsInput>
  }

  export type ItemUpdateWithoutPurchaseOrderItemsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutItemsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutItemsNestedInput
    patientItems?: PatientItemUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutItemNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutPurchaseOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientItems?: PatientItemUncheckedUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type MedicineUpsertWithoutPurchaseOrderItemsInput = {
    update: XOR<MedicineUpdateWithoutPurchaseOrderItemsInput, MedicineUncheckedUpdateWithoutPurchaseOrderItemsInput>
    create: XOR<MedicineCreateWithoutPurchaseOrderItemsInput, MedicineUncheckedCreateWithoutPurchaseOrderItemsInput>
    where?: MedicineWhereInput
  }

  export type MedicineUpdateToOneWithWhereWithoutPurchaseOrderItemsInput = {
    where?: MedicineWhereInput
    data: XOR<MedicineUpdateWithoutPurchaseOrderItemsInput, MedicineUncheckedUpdateWithoutPurchaseOrderItemsInput>
  }

  export type MedicineUpdateWithoutPurchaseOrderItemsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutMedicinesNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutMedicineNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedMedicinesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutPurchaseOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type EmployeeCreateWithoutBillingsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutBillingsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutBillingsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutBillingsInput, EmployeeUncheckedCreateWithoutBillingsInput>
  }

  export type PatientsCreateWithoutBillingsInput = {
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    deleted?: boolean
    deletedAt?: Date | string | null
    consultations?: ConsultationsCreateNestedManyWithoutPatientInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientsInput
  }

  export type PatientsUncheckedCreateWithoutBillingsInput = {
    id?: number
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientsCreateOrConnectWithoutBillingsInput = {
    where: PatientsWhereUniqueInput
    create: XOR<PatientsCreateWithoutBillingsInput, PatientsUncheckedCreateWithoutBillingsInput>
  }

  export type PatientTreatmentCreateWithoutBillingInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    treatment: TreatmentCreateNestedOneWithoutPatientTreatmentsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientTreatmentsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientTreatmentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientTreatmentsInput
  }

  export type PatientTreatmentUncheckedCreateWithoutBillingInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    patientAssessmentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientTreatmentCreateOrConnectWithoutBillingInput = {
    where: PatientTreatmentWhereUniqueInput
    create: XOR<PatientTreatmentCreateWithoutBillingInput, PatientTreatmentUncheckedCreateWithoutBillingInput>
  }

  export type PatientTreatmentCreateManyBillingInputEnvelope = {
    data: PatientTreatmentCreateManyBillingInput | PatientTreatmentCreateManyBillingInput[]
    skipDuplicates?: boolean
  }

  export type PatientMedicationCreateWithoutBillingInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medicine: MedicineCreateNestedOneWithoutPatientMedicationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientMedicationsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientMedicationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientMedicationsInput
  }

  export type PatientMedicationUncheckedCreateWithoutBillingInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    patientAssessmentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientMedicationCreateOrConnectWithoutBillingInput = {
    where: PatientMedicationWhereUniqueInput
    create: XOR<PatientMedicationCreateWithoutBillingInput, PatientMedicationUncheckedCreateWithoutBillingInput>
  }

  export type PatientMedicationCreateManyBillingInputEnvelope = {
    data: PatientMedicationCreateManyBillingInput | PatientMedicationCreateManyBillingInput[]
    skipDuplicates?: boolean
  }

  export type PatientPackageCreateWithoutBillingInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    package: PackageCreateNestedOneWithoutPatientPackagesInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientPackagesInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientPackagesInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientPackagesInput
  }

  export type PatientPackageUncheckedCreateWithoutBillingInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientPackageCreateOrConnectWithoutBillingInput = {
    where: PatientPackageWhereUniqueInput
    create: XOR<PatientPackageCreateWithoutBillingInput, PatientPackageUncheckedCreateWithoutBillingInput>
  }

  export type PatientPackageCreateManyBillingInputEnvelope = {
    data: PatientPackageCreateManyBillingInput | PatientPackageCreateManyBillingInput[]
    skipDuplicates?: boolean
  }

  export type PatientItemCreateWithoutBillingInput = {
    quantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    item: ItemCreateNestedOneWithoutPatientItemsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutPatientItemsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedPatientItemsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPatientItemsInput
  }

  export type PatientItemUncheckedCreateWithoutBillingInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientItemCreateOrConnectWithoutBillingInput = {
    where: PatientItemWhereUniqueInput
    create: XOR<PatientItemCreateWithoutBillingInput, PatientItemUncheckedCreateWithoutBillingInput>
  }

  export type PatientItemCreateManyBillingInputEnvelope = {
    data: PatientItemCreateManyBillingInput | PatientItemCreateManyBillingInput[]
    skipDuplicates?: boolean
  }

  export type ConsultationsCreateWithoutBillingsInput = {
    status: string
    appointmentId?: number | null
    triageId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedConsultationsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedConsultationsInput
    doctor: EmployeeCreateNestedOneWithoutConsultationsInput
    patient?: PatientsCreateNestedOneWithoutConsultationsInput
    patientAssessment?: PatientAssessmentCreateNestedOneWithoutConsultationsInput
    patientTriage?: PatientTriageCreateNestedOneWithoutConsultationsInput
  }

  export type ConsultationsUncheckedCreateWithoutBillingsInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ConsultationsCreateOrConnectWithoutBillingsInput = {
    where: ConsultationsWhereUniqueInput
    create: XOR<ConsultationsCreateWithoutBillingsInput, ConsultationsUncheckedCreateWithoutBillingsInput>
  }

  export type PaymentCreateWithoutBillingInput = {
    paymentType: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: EmployeeCreateNestedOneWithoutCreatedPaymentsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutBillingInput = {
    id?: number
    paymentType: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PaymentCreateOrConnectWithoutBillingInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput>
  }

  export type PaymentCreateManyBillingInputEnvelope = {
    data: PaymentCreateManyBillingInput | PaymentCreateManyBillingInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCreatedBillingsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedBillingsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedBillingsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedBillingsInput, EmployeeUncheckedCreateWithoutCreatedBillingsInput>
  }

  export type EmployeeCreateWithoutUpdatedBillingsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedBillingsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedBillingsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedBillingsInput, EmployeeUncheckedCreateWithoutUpdatedBillingsInput>
  }

  export type EmployeeUpsertWithoutBillingsInput = {
    update: XOR<EmployeeUpdateWithoutBillingsInput, EmployeeUncheckedUpdateWithoutBillingsInput>
    create: XOR<EmployeeCreateWithoutBillingsInput, EmployeeUncheckedCreateWithoutBillingsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutBillingsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutBillingsInput, EmployeeUncheckedUpdateWithoutBillingsInput>
  }

  export type EmployeeUpdateWithoutBillingsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutBillingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type PatientsUpsertWithoutBillingsInput = {
    update: XOR<PatientsUpdateWithoutBillingsInput, PatientsUncheckedUpdateWithoutBillingsInput>
    create: XOR<PatientsCreateWithoutBillingsInput, PatientsUncheckedCreateWithoutBillingsInput>
    where?: PatientsWhereInput
  }

  export type PatientsUpdateToOneWithWhereWithoutBillingsInput = {
    where?: PatientsWhereInput
    data: XOR<PatientsUpdateWithoutBillingsInput, PatientsUncheckedUpdateWithoutBillingsInput>
  }

  export type PatientsUpdateWithoutBillingsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultations?: ConsultationsUpdateManyWithoutPatientNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientsNestedInput
  }

  export type PatientsUncheckedUpdateWithoutBillingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientTreatmentUpsertWithWhereUniqueWithoutBillingInput = {
    where: PatientTreatmentWhereUniqueInput
    update: XOR<PatientTreatmentUpdateWithoutBillingInput, PatientTreatmentUncheckedUpdateWithoutBillingInput>
    create: XOR<PatientTreatmentCreateWithoutBillingInput, PatientTreatmentUncheckedCreateWithoutBillingInput>
  }

  export type PatientTreatmentUpdateWithWhereUniqueWithoutBillingInput = {
    where: PatientTreatmentWhereUniqueInput
    data: XOR<PatientTreatmentUpdateWithoutBillingInput, PatientTreatmentUncheckedUpdateWithoutBillingInput>
  }

  export type PatientTreatmentUpdateManyWithWhereWithoutBillingInput = {
    where: PatientTreatmentScalarWhereInput
    data: XOR<PatientTreatmentUpdateManyMutationInput, PatientTreatmentUncheckedUpdateManyWithoutBillingInput>
  }

  export type PatientMedicationUpsertWithWhereUniqueWithoutBillingInput = {
    where: PatientMedicationWhereUniqueInput
    update: XOR<PatientMedicationUpdateWithoutBillingInput, PatientMedicationUncheckedUpdateWithoutBillingInput>
    create: XOR<PatientMedicationCreateWithoutBillingInput, PatientMedicationUncheckedCreateWithoutBillingInput>
  }

  export type PatientMedicationUpdateWithWhereUniqueWithoutBillingInput = {
    where: PatientMedicationWhereUniqueInput
    data: XOR<PatientMedicationUpdateWithoutBillingInput, PatientMedicationUncheckedUpdateWithoutBillingInput>
  }

  export type PatientMedicationUpdateManyWithWhereWithoutBillingInput = {
    where: PatientMedicationScalarWhereInput
    data: XOR<PatientMedicationUpdateManyMutationInput, PatientMedicationUncheckedUpdateManyWithoutBillingInput>
  }

  export type PatientPackageUpsertWithWhereUniqueWithoutBillingInput = {
    where: PatientPackageWhereUniqueInput
    update: XOR<PatientPackageUpdateWithoutBillingInput, PatientPackageUncheckedUpdateWithoutBillingInput>
    create: XOR<PatientPackageCreateWithoutBillingInput, PatientPackageUncheckedCreateWithoutBillingInput>
  }

  export type PatientPackageUpdateWithWhereUniqueWithoutBillingInput = {
    where: PatientPackageWhereUniqueInput
    data: XOR<PatientPackageUpdateWithoutBillingInput, PatientPackageUncheckedUpdateWithoutBillingInput>
  }

  export type PatientPackageUpdateManyWithWhereWithoutBillingInput = {
    where: PatientPackageScalarWhereInput
    data: XOR<PatientPackageUpdateManyMutationInput, PatientPackageUncheckedUpdateManyWithoutBillingInput>
  }

  export type PatientItemUpsertWithWhereUniqueWithoutBillingInput = {
    where: PatientItemWhereUniqueInput
    update: XOR<PatientItemUpdateWithoutBillingInput, PatientItemUncheckedUpdateWithoutBillingInput>
    create: XOR<PatientItemCreateWithoutBillingInput, PatientItemUncheckedCreateWithoutBillingInput>
  }

  export type PatientItemUpdateWithWhereUniqueWithoutBillingInput = {
    where: PatientItemWhereUniqueInput
    data: XOR<PatientItemUpdateWithoutBillingInput, PatientItemUncheckedUpdateWithoutBillingInput>
  }

  export type PatientItemUpdateManyWithWhereWithoutBillingInput = {
    where: PatientItemScalarWhereInput
    data: XOR<PatientItemUpdateManyMutationInput, PatientItemUncheckedUpdateManyWithoutBillingInput>
  }

  export type ConsultationsUpsertWithoutBillingsInput = {
    update: XOR<ConsultationsUpdateWithoutBillingsInput, ConsultationsUncheckedUpdateWithoutBillingsInput>
    create: XOR<ConsultationsCreateWithoutBillingsInput, ConsultationsUncheckedCreateWithoutBillingsInput>
    where?: ConsultationsWhereInput
  }

  export type ConsultationsUpdateToOneWithWhereWithoutBillingsInput = {
    where?: ConsultationsWhereInput
    data: XOR<ConsultationsUpdateWithoutBillingsInput, ConsultationsUncheckedUpdateWithoutBillingsInput>
  }

  export type ConsultationsUpdateWithoutBillingsInput = {
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedConsultationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedConsultationsNestedInput
    doctor?: EmployeeUpdateOneRequiredWithoutConsultationsNestedInput
    patient?: PatientsUpdateOneWithoutConsultationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutConsultationsNestedInput
    patientTriage?: PatientTriageUpdateOneWithoutConsultationsNestedInput
  }

  export type ConsultationsUncheckedUpdateWithoutBillingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutBillingInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutBillingInput, PaymentUncheckedUpdateWithoutBillingInput>
    create: XOR<PaymentCreateWithoutBillingInput, PaymentUncheckedCreateWithoutBillingInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutBillingInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutBillingInput, PaymentUncheckedUpdateWithoutBillingInput>
  }

  export type PaymentUpdateManyWithWhereWithoutBillingInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutBillingInput>
  }

  export type EmployeeUpsertWithoutCreatedBillingsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedBillingsInput, EmployeeUncheckedUpdateWithoutCreatedBillingsInput>
    create: XOR<EmployeeCreateWithoutCreatedBillingsInput, EmployeeUncheckedCreateWithoutCreatedBillingsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedBillingsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedBillingsInput, EmployeeUncheckedUpdateWithoutCreatedBillingsInput>
  }

  export type EmployeeUpdateWithoutCreatedBillingsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedBillingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedBillingsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedBillingsInput, EmployeeUncheckedUpdateWithoutUpdatedBillingsInput>
    create: XOR<EmployeeCreateWithoutUpdatedBillingsInput, EmployeeUncheckedCreateWithoutUpdatedBillingsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedBillingsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedBillingsInput, EmployeeUncheckedUpdateWithoutUpdatedBillingsInput>
  }

  export type EmployeeUpdateWithoutUpdatedBillingsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedBillingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type BillingsCreateWithoutPaymentsInput = {
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor?: EmployeeCreateNestedOneWithoutBillingsInput
    patient?: PatientsCreateNestedOneWithoutBillingsInput
    patientTreatments?: PatientTreatmentCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemCreateNestedManyWithoutBillingInput
    consultation: ConsultationsCreateNestedOneWithoutBillingsInput
    createdBy: EmployeeCreateNestedOneWithoutCreatedBillingsInput
    updatedBy: EmployeeCreateNestedOneWithoutUpdatedBillingsInput
  }

  export type BillingsUncheckedCreateWithoutPaymentsInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    patientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutBillingInput
    patientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutBillingInput
    patientPackages?: PatientPackageUncheckedCreateNestedManyWithoutBillingInput
    patientItems?: PatientItemUncheckedCreateNestedManyWithoutBillingInput
  }

  export type BillingsCreateOrConnectWithoutPaymentsInput = {
    where: BillingsWhereUniqueInput
    create: XOR<BillingsCreateWithoutPaymentsInput, BillingsUncheckedCreateWithoutPaymentsInput>
  }

  export type EmployeeCreateWithoutCreatedPaymentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    updatedPayments?: PaymentCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutCreatedPaymentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPayments?: PaymentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutCreatedPaymentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCreatedPaymentsInput, EmployeeUncheckedCreateWithoutCreatedPaymentsInput>
  }

  export type EmployeeCreateWithoutUpdatedPaymentsInput = {
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutEmployeeInput
    createdBy: UserCreateNestedOneWithoutCreatedEmployeesInput
    updatedBy: UserCreateNestedOneWithoutUpdatedEmployeesInput
    schedules?: ScheduleCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsCreateNestedManyWithoutDoctorInput
    billings?: BillingsCreateNestedManyWithoutDoctorInput
    notes?: NoteCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    createdSchedules?: ScheduleCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeUncheckedCreateWithoutUpdatedPaymentsInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutEmployeeInput
    Appointments?: AppointmentsUncheckedCreateNestedManyWithoutDoctorInput
    consultations?: ConsultationsUncheckedCreateNestedManyWithoutDoctorInput
    billings?: BillingsUncheckedCreateNestedManyWithoutDoctorInput
    notes?: NoteUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryTransaction?: InventoryTransactionUncheckedCreateNestedManyWithoutEmployeeInput
    InventoryCount?: InventoryCountUncheckedCreateNestedManyWithoutEmployeeInput
    createdPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPOs?: PurchaseOrderUncheckedCreateNestedManyWithoutUpdatedByInput
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutEmployeeInput
    createdConsultations?: ConsultationsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedConsultations?: ConsultationsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdAppointments?: AppointmentsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedAppointments?: AppointmentsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatients?: PatientsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatients?: PatientsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTriages?: PatientTriageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientAssessments?: PatientAssessmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientTreatments?: PatientTreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientMedications?: PatientMedicationUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPatientPackages?: PatientPackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPatientItems?: PatientItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPatientItems?: PatientItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdMedicines?: MedicineUncheckedCreateNestedManyWithoutCreatedByInput
    updatedMedicines?: MedicineUncheckedCreateNestedManyWithoutUpdatedByInput
    createdItems?: ItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedItems?: ItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdTreatments?: TreatmentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedTreatments?: TreatmentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPackages?: PackageUncheckedCreateNestedManyWithoutUpdatedByInput
    createdCategories?: CategoryUncheckedCreateNestedManyWithoutCreatedByInput
    updatedCategories?: CategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    createdSuppliers?: SupplierUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSuppliers?: SupplierUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCounts?: InventoryCountUncheckedCreateNestedManyWithoutUpdatedByInput
    createdInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutCreatedByInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedCreateNestedManyWithoutUpdatedByInput
    createdBillings?: BillingsUncheckedCreateNestedManyWithoutCreatedByInput
    updatedBillings?: BillingsUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    createdSchedules?: ScheduleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedSchedules?: ScheduleUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type EmployeeCreateOrConnectWithoutUpdatedPaymentsInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUpdatedPaymentsInput, EmployeeUncheckedCreateWithoutUpdatedPaymentsInput>
  }

  export type BillingsUpsertWithoutPaymentsInput = {
    update: XOR<BillingsUpdateWithoutPaymentsInput, BillingsUncheckedUpdateWithoutPaymentsInput>
    create: XOR<BillingsCreateWithoutPaymentsInput, BillingsUncheckedCreateWithoutPaymentsInput>
    where?: BillingsWhereInput
  }

  export type BillingsUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: BillingsWhereInput
    data: XOR<BillingsUpdateWithoutPaymentsInput, BillingsUncheckedUpdateWithoutPaymentsInput>
  }

  export type BillingsUpdateWithoutPaymentsInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type EmployeeUpsertWithoutCreatedPaymentsInput = {
    update: XOR<EmployeeUpdateWithoutCreatedPaymentsInput, EmployeeUncheckedUpdateWithoutCreatedPaymentsInput>
    create: XOR<EmployeeCreateWithoutCreatedPaymentsInput, EmployeeUncheckedCreateWithoutCreatedPaymentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCreatedPaymentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCreatedPaymentsInput, EmployeeUncheckedUpdateWithoutCreatedPaymentsInput>
  }

  export type EmployeeUpdateWithoutCreatedPaymentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUpsertWithoutUpdatedPaymentsInput = {
    update: XOR<EmployeeUpdateWithoutUpdatedPaymentsInput, EmployeeUncheckedUpdateWithoutUpdatedPaymentsInput>
    create: XOR<EmployeeCreateWithoutUpdatedPaymentsInput, EmployeeUncheckedCreateWithoutUpdatedPaymentsInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUpdatedPaymentsInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUpdatedPaymentsInput, EmployeeUncheckedUpdateWithoutUpdatedPaymentsInput>
  }

  export type EmployeeUpdateWithoutUpdatedPaymentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeCreateManyCreatedByInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type EmployeeCreateManyUpdatedByInput = {
    id?: number
    userId: number
    firstName: string
    lastName: string
    email: string
    department?: EmployeeCreatedepartmentInput | string[]
    position: $Enums.Position
    hireDate?: Date | string | null
    salary?: number | null
    phoneNumber?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type AuditLogCreateManyUserInput = {
    id?: number
    entityId?: number | null
    entityType?: string | null
    action: string
    details: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type EmployeeUpdateWithoutCreatedByInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EmployeeUpdateWithoutUpdatedByInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutEmployeeNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedEmployeesNestedInput
    schedules?: ScheduleUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUpdateManyWithoutDoctorNestedInput
    notes?: NoteUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutEmployeeNestedInput
    Appointments?: AppointmentsUncheckedUpdateManyWithoutDoctorNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutDoctorNestedInput
    billings?: BillingsUncheckedUpdateManyWithoutDoctorNestedInput
    notes?: NoteUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryTransaction?: InventoryTransactionUncheckedUpdateManyWithoutEmployeeNestedInput
    InventoryCount?: InventoryCountUncheckedUpdateManyWithoutEmployeeNestedInput
    createdPOs?: PurchaseOrderUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPOs?: PurchaseOrderUncheckedUpdateManyWithoutUpdatedByNestedInput
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutEmployeeNestedInput
    createdConsultations?: ConsultationsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedConsultations?: ConsultationsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdAppointments?: AppointmentsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedAppointments?: AppointmentsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatients?: PatientsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatients?: PatientsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTriages?: PatientTriageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTriages?: PatientTriageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientAssessments?: PatientAssessmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientMedications?: PatientMedicationUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientPackages?: PatientPackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPatientPackages?: PatientPackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPatientItems?: PatientItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPatientItems?: PatientItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdMedicines?: MedicineUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedMedicines?: MedicineUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdItems?: ItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedItems?: ItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdTreatments?: TreatmentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedTreatments?: TreatmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPackages?: PackageUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdCategories?: CategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedCategories?: CategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSuppliers?: SupplierUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSuppliers?: SupplierUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCounts?: InventoryCountUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedInventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdBillings?: BillingsUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedBillings?: BillingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPayments?: PaymentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdSchedules?: ScheduleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedSchedules?: ScheduleUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    department?: EmployeeUpdatedepartmentInput | string[]
    position?: EnumPositionFieldUpdateOperationsInput | $Enums.Position
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableFloatFieldUpdateOperationsInput | number | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogUpdateWithoutUserInput = {
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    details?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateManyEmployeeInput = {
    id?: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type AppointmentsCreateManyDoctorInput = {
    id?: number
    patientId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    createdById: number
    updatedById: number
  }

  export type ConsultationsCreateManyDoctorInput = {
    id?: number
    status: string
    appointmentId?: number | null
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type BillingsCreateManyDoctorInput = {
    id?: number
    patientId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type NoteCreateManyEmployeeInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    noteType: string
    patientTriageId?: number | null
    patientAssessmentId?: number | null
  }

  export type InventoryTransactionCreateManyEmployeeInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountCreateManyEmployeeInput = {
    id?: number
    date: Date | string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PurchaseOrderCreateManyCreatedByInput = {
    id?: number
    orderNumber: string
    supplierId: number
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: number | null
  }

  export type PurchaseOrderCreateManyUpdatedByInput = {
    id?: number
    orderNumber: string
    supplierId: number
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: number | null
  }

  export type PurchaseOrderCreateManyEmployeeInput = {
    id?: number
    orderNumber: string
    supplierId: number
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsultationsCreateManyCreatedByInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ConsultationsCreateManyUpdatedByInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    createdById: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AppointmentsCreateManyCreatedByInput = {
    id?: number
    patientId: number
    doctorId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    updatedById: number
  }

  export type AppointmentsCreateManyUpdatedByInput = {
    id?: number
    patientId: number
    doctorId: number
    date: Date | string
    notes: string
    email: string
    endTime: string
    firstName: string
    lastName: string
    countryCode: string
    phoneNumber: string
    startTime: string
    created_at?: Date | string
    updated_at?: Date | string
    createdById: number
  }

  export type PatientsCreateManyCreatedByInput = {
    id?: number
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    updatedById: number
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type PatientsCreateManyUpdatedByInput = {
    id?: number
    firstName: string
    middleName?: string | null
    lastName: string
    nationality?: string | null
    maritalStatus?: string | null
    dob?: string | null
    gender?: string | null
    source?: string | null
    email: string
    countryCode: string
    phoneNumber: string
    address?: string | null
    district?: string | null
    emirate?: string | null
    country?: string | null
    visaType?: string | null
    nationalID?: string | null
    otherID?: string | null
    emergencyContactNumber?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    allergies?: string | null
    profilePicture?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctorId?: number | null
    mrNumber: string
    appointmentId?: number | null
    createdById: number
    deleted?: boolean
    deletedAt?: Date | string | null
  }

  export type PatientTriageCreateManyCreatedByInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    updatedById: number
  }

  export type PatientTriageCreateManyUpdatedByInput = {
    id?: number
    status?: string | null
    priority?: string | null
    immunizationUpToDate?: string | null
    immunizationRemarks?: string | null
    allergenHistory?: string | null
    systolic?: string | null
    diastolic?: string | null
    temperature?: string | null
    height?: string | null
    weight?: string | null
    spO2?: string | null
    bmi?: string | null
    pulse?: string | null
    pastMedicalHistory?: string | null
    familyHistory?: string | null
    socialHistory?: string | null
    surgicalHistory?: string | null
    creams?: string | null
    nurseAssessment?: string | null
    medications?: string | null
    otherNotes?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    painScale?: number | null
    currentHistory?: string | null
    createdById: number
  }

  export type PatientAssessmentCreateManyCreatedByInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    updatedById: number
  }

  export type PatientAssessmentCreateManyUpdatedByInput = {
    id?: number
    visitType?: string | null
    consultationType?: string | null
    status?: string | null
    createdAt?: Date | string
    complaints?: string | null
    facial_dermapen_prp?: string | null
    instructions?: string | null
    laser_q_note?: string | null
    prescription?: string | null
    provider_notes?: string | null
    recommendations?: string | null
    slimming_note?: string | null
    images?: PatientAssessmentCreateimagesInput | string[]
    createdById: number
  }

  export type PatientTreatmentCreateManyCreatedByInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PatientTreatmentCreateManyUpdatedByInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PatientMedicationCreateManyUpdatedByInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PatientMedicationCreateManyCreatedByInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PatientPackageCreateManyUpdatedByInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PatientPackageCreateManyCreatedByInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PatientItemCreateManyCreatedByInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PatientItemCreateManyUpdatedByInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type MedicineCreateManyCreatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type MedicineCreateManyUpdatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type ItemCreateManyCreatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type ItemCreateManyUpdatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type TreatmentCreateManyCreatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type TreatmentCreateManyUpdatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PackageCreateManyCreatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PackageCreateManyUpdatedByInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type CategoryCreateManyCreatedByInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type CategoryCreateManyUpdatedByInput = {
    id?: number
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type SupplierCreateManyCreatedByInput = {
    id?: number
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type SupplierCreateManyUpdatedByInput = {
    id?: number
    name: string
    contactName?: string | null
    email?: string | null
    phone?: string | null
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type InventoryTransactionCreateManyCreatedByInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type InventoryTransactionCreateManyUpdatedByInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type InventoryCountCreateManyCreatedByInput = {
    id?: number
    date: Date | string
    status: string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type InventoryCountCreateManyUpdatedByInput = {
    id?: number
    date: Date | string
    status: string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type InventoryCountItemCreateManyCreatedByInput = {
    id?: number
    inventoryCountId: number
    itemId?: number | null
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type InventoryCountItemCreateManyUpdatedByInput = {
    id?: number
    inventoryCountId: number
    itemId?: number | null
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type BillingsCreateManyCreatedByInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type BillingsCreateManyUpdatedByInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type PaymentCreateManyCreatedByInput = {
    id?: number
    paymentType: string
    amount: number
    billingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type PaymentCreateManyUpdatedByInput = {
    id?: number
    paymentType: string
    amount: number
    billingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type ScheduleCreateManyCreatedByInput = {
    id?: number
    employeeId: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: number
  }

  export type ScheduleCreateManyUpdatedByInput = {
    id?: number
    employeeId: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
  }

  export type ScheduleUpdateWithoutEmployeeInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedSchedulesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsUpdateWithoutDoctorInput = {
    patientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput
  }

  export type AppointmentsUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ConsultationsUpdateWithoutDoctorInput = {
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedConsultationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedConsultationsNestedInput
    patient?: PatientsUpdateOneWithoutConsultationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutConsultationsNestedInput
    patientTriage?: PatientTriageUpdateOneWithoutConsultationsNestedInput
    billings?: BillingsUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billings?: BillingsUncheckedUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingsUpdateWithoutDoctorInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type BillingsUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type NoteUpdateWithoutEmployeeInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noteType?: StringFieldUpdateOperationsInput | string
    patientTriage?: PatientTriageUpdateOneWithoutNotesNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noteType?: StringFieldUpdateOperationsInput | string
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NoteUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noteType?: StringFieldUpdateOperationsInput | string
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InventoryTransactionUpdateWithoutEmployeeInput = {
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneWithoutInventoryTransactionsNestedInput
    medicine?: MedicineUpdateOneWithoutInventoryTransactionsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryTransactionsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryTransactionsNestedInput
  }

  export type InventoryTransactionUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountUpdateWithoutEmployeeInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InventoryCountItemUpdateManyWithoutInventoryCountNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryCountsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountsNestedInput
  }

  export type InventoryCountUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    items?: InventoryCountItemUncheckedUpdateManyWithoutInventoryCountNestedInput
  }

  export type InventoryCountUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseOrderUpdateWithoutCreatedByInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutPurchaseOrdersNestedInput
    items?: PurchaseOrderItemUpdateManyWithoutPurchaseOrderNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPOsNestedInput
    Employee?: EmployeeUpdateOneWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: PurchaseOrderItemUncheckedUpdateManyWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PurchaseOrderUpdateWithoutUpdatedByInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutPurchaseOrdersNestedInput
    items?: PurchaseOrderItemUpdateManyWithoutPurchaseOrderNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPOsNestedInput
    Employee?: EmployeeUpdateOneWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: PurchaseOrderItemUncheckedUpdateManyWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PurchaseOrderUpdateWithoutEmployeeInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutPurchaseOrdersNestedInput
    items?: PurchaseOrderItemUpdateManyWithoutPurchaseOrderNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPOsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPOsNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: PurchaseOrderItemUncheckedUpdateManyWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationsUpdateWithoutCreatedByInput = {
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedConsultationsNestedInput
    doctor?: EmployeeUpdateOneRequiredWithoutConsultationsNestedInput
    patient?: PatientsUpdateOneWithoutConsultationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutConsultationsNestedInput
    patientTriage?: PatientTriageUpdateOneWithoutConsultationsNestedInput
    billings?: BillingsUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billings?: BillingsUncheckedUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultationsUpdateWithoutUpdatedByInput = {
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedConsultationsNestedInput
    doctor?: EmployeeUpdateOneRequiredWithoutConsultationsNestedInput
    patient?: PatientsUpdateOneWithoutConsultationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutConsultationsNestedInput
    patientTriage?: PatientTriageUpdateOneWithoutConsultationsNestedInput
    billings?: BillingsUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billings?: BillingsUncheckedUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentsUpdateWithoutCreatedByInput = {
    patientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneRequiredWithoutAppointmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedAppointmentsNestedInput
  }

  export type AppointmentsUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsUpdateWithoutUpdatedByInput = {
    patientId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneRequiredWithoutAppointmentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
  }

  export type AppointmentsUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    startTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientsUpdateWithoutCreatedByInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billings?: BillingsUpdateManyWithoutPatientNestedInput
    consultations?: ConsultationsUpdateManyWithoutPatientNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientsNestedInput
  }

  export type PatientsUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billings?: BillingsUncheckedUpdateManyWithoutPatientNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientsUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientsUpdateWithoutUpdatedByInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billings?: BillingsUpdateManyWithoutPatientNestedInput
    consultations?: ConsultationsUpdateManyWithoutPatientNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientsNestedInput
  }

  export type PatientsUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billings?: BillingsUncheckedUpdateManyWithoutPatientNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientsUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    maritalStatus?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    emirate?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    visaType?: NullableStringFieldUpdateOperationsInput | string | null
    nationalID?: NullableStringFieldUpdateOperationsInput | string | null
    otherID?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    mrNumber?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientTriageUpdateWithoutCreatedByInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    problems?: TriageProblemUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUpdateManyWithoutPatientTriageNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTriagesNestedInput
  }

  export type PatientTriageUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
    problems?: TriageProblemUncheckedUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUncheckedUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientTriageNestedInput
  }

  export type PatientTriageUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTriageUpdateWithoutUpdatedByInput = {
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    problems?: TriageProblemUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUpdateManyWithoutPatientTriageNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTriagesNestedInput
  }

  export type PatientTriageUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    problems?: TriageProblemUncheckedUpdateManyWithoutPatientTriageNestedInput
    allergies?: TriageAllergyUncheckedUpdateManyWithoutPatientTriageNestedInput
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientTriageNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientTriageNestedInput
  }

  export type PatientTriageUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationUpToDate?: NullableStringFieldUpdateOperationsInput | string | null
    immunizationRemarks?: NullableStringFieldUpdateOperationsInput | string | null
    allergenHistory?: NullableStringFieldUpdateOperationsInput | string | null
    systolic?: NullableStringFieldUpdateOperationsInput | string | null
    diastolic?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    spO2?: NullableStringFieldUpdateOperationsInput | string | null
    bmi?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    pastMedicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    familyHistory?: NullableStringFieldUpdateOperationsInput | string | null
    socialHistory?: NullableStringFieldUpdateOperationsInput | string | null
    surgicalHistory?: NullableStringFieldUpdateOperationsInput | string | null
    creams?: NullableStringFieldUpdateOperationsInput | string | null
    nurseAssessment?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    otherNotes?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    painScale?: NullableIntFieldUpdateOperationsInput | number | null
    currentHistory?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientAssessmentUpdateWithoutCreatedByInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    consultations?: ConsultationsUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUpdateManyWithoutPatientAssessmentNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientAssessmentsNestedInput
  }

  export type PatientAssessmentUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    updatedById?: IntFieldUpdateOperationsInput | number
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientAssessmentNestedInput
  }

  export type PatientAssessmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientAssessmentUpdateWithoutUpdatedByInput = {
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    consultations?: ConsultationsUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUpdateManyWithoutPatientAssessmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientAssessmentsNestedInput
  }

  export type PatientAssessmentUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
    consultations?: ConsultationsUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutPatientAssessmentNestedInput
    notes?: NoteUncheckedUpdateManyWithoutPatientAssessmentNestedInput
  }

  export type PatientAssessmentUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    visitType?: NullableStringFieldUpdateOperationsInput | string | null
    consultationType?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaints?: NullableStringFieldUpdateOperationsInput | string | null
    facial_dermapen_prp?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    laser_q_note?: NullableStringFieldUpdateOperationsInput | string | null
    prescription?: NullableStringFieldUpdateOperationsInput | string | null
    provider_notes?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    slimming_note?: NullableStringFieldUpdateOperationsInput | string | null
    images?: PatientAssessmentUpdateimagesInput | string[]
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTreatmentUpdateWithoutCreatedByInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatment?: TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientTreatmentsNestedInput
    billing?: BillingsUpdateOneWithoutPatientTreatmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTreatmentUpdateWithoutUpdatedByInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatment?: TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientTreatmentsNestedInput
    billing?: BillingsUpdateOneWithoutPatientTreatmentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationUpdateWithoutUpdatedByInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine?: MedicineUpdateOneRequiredWithoutPatientMedicationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientMedicationsNestedInput
    billing?: BillingsUpdateOneWithoutPatientMedicationsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientMedicationsNestedInput
  }

  export type PatientMedicationUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationUpdateWithoutCreatedByInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine?: MedicineUpdateOneRequiredWithoutPatientMedicationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientMedicationsNestedInput
    billing?: BillingsUpdateOneWithoutPatientMedicationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientMedicationsNestedInput
  }

  export type PatientMedicationUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageUpdateWithoutUpdatedByInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneRequiredWithoutPatientPackagesNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientPackagesNestedInput
    billing?: BillingsUpdateOneWithoutPatientPackagesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientPackagesNestedInput
  }

  export type PatientPackageUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageUpdateWithoutCreatedByInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneRequiredWithoutPatientPackagesNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientPackagesNestedInput
    billing?: BillingsUpdateOneWithoutPatientPackagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientPackagesNestedInput
  }

  export type PatientPackageUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemUpdateWithoutCreatedByInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutPatientItemsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientItemsNestedInput
    billing?: BillingsUpdateOneWithoutPatientItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientItemsNestedInput
  }

  export type PatientItemUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemUpdateWithoutUpdatedByInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutPatientItemsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientItemsNestedInput
    billing?: BillingsUpdateOneWithoutPatientItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientItemsNestedInput
  }

  export type PatientItemUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type MedicineUpdateWithoutCreatedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutMedicinesNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutMedicineNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicineUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type MedicineUpdateWithoutUpdatedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutMedicinesNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutMedicinesNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutMedicineNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicineUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type ItemUpdateWithoutCreatedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutItemsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutItemsNestedInput
    patientItems?: PatientItemUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutItemNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    patientItems?: PatientItemUncheckedUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ItemUpdateWithoutUpdatedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutItemsNestedInput
    supplier?: SupplierUpdateOneRequiredWithoutItemsNestedInput
    patientItems?: PatientItemUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutItemNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    patientItems?: PatientItemUncheckedUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type TreatmentUpdateWithoutCreatedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutTreatmentsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutTreatmentNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedTreatmentsNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type TreatmentUpdateWithoutUpdatedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutTreatmentsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutTreatmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedTreatmentsNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PackageUpdateWithoutCreatedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutPackagesNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPackageNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPackagesNestedInput
  }

  export type PackageUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PackageUpdateWithoutUpdatedByInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutPackagesNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutPackageNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPackagesNestedInput
  }

  export type PackageUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryUpdateWithoutCreatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutCategoryNestedInput
    items?: ItemUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUpdateManyWithoutCategoryNestedInput
    packages?: PackageUpdateManyWithoutCategoryNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutCategoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutCategoryNestedInput
    packages?: PackageUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryUpdateWithoutUpdatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutCategoryNestedInput
    items?: ItemUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUpdateManyWithoutCategoryNestedInput
    packages?: PackageUpdateManyWithoutCategoryNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutCategoryNestedInput
    items?: ItemUncheckedUpdateManyWithoutCategoryNestedInput
    treatments?: TreatmentUncheckedUpdateManyWithoutCategoryNestedInput
    packages?: PackageUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type SupplierUpdateWithoutCreatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutSupplierNestedInput
    items?: ItemUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutSupplierNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedSuppliersNestedInput
  }

  export type SupplierUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutSupplierNestedInput
    items?: ItemUncheckedUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type SupplierUpdateWithoutUpdatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicines?: MedicineUpdateManyWithoutSupplierNestedInput
    items?: ItemUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUpdateManyWithoutSupplierNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedSuppliersNestedInput
  }

  export type SupplierUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    medicines?: MedicineUncheckedUpdateManyWithoutSupplierNestedInput
    items?: ItemUncheckedUpdateManyWithoutSupplierNestedInput
    purchaseOrders?: PurchaseOrderUncheckedUpdateManyWithoutSupplierNestedInput
  }

  export type SupplierUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    contactName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionUpdateWithoutCreatedByInput = {
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneWithoutInventoryTransactionsNestedInput
    medicine?: MedicineUpdateOneWithoutInventoryTransactionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutInventoryTransactionNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryTransactionsNestedInput
  }

  export type InventoryTransactionUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionUpdateWithoutUpdatedByInput = {
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneWithoutInventoryTransactionsNestedInput
    medicine?: MedicineUpdateOneWithoutInventoryTransactionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutInventoryTransactionNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryTransactionsNestedInput
  }

  export type InventoryTransactionUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountUpdateWithoutCreatedByInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutInventoryCountNestedInput
    items?: InventoryCountItemUpdateManyWithoutInventoryCountNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountsNestedInput
  }

  export type InventoryCountUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    items?: InventoryCountItemUncheckedUpdateManyWithoutInventoryCountNestedInput
  }

  export type InventoryCountUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountUpdateWithoutUpdatedByInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutInventoryCountNestedInput
    items?: InventoryCountItemUpdateManyWithoutInventoryCountNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryCountsNestedInput
  }

  export type InventoryCountUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    items?: InventoryCountItemUncheckedUpdateManyWithoutInventoryCountNestedInput
  }

  export type InventoryCountUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemUpdateWithoutCreatedByInput = {
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryCount?: InventoryCountUpdateOneRequiredWithoutItemsNestedInput
    item?: ItemUpdateOneWithoutInventoryCountItemsNestedInput
    medicine?: MedicineUpdateOneWithoutInventoryCountItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountItemsNestedInput
  }

  export type InventoryCountItemUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemUpdateWithoutUpdatedByInput = {
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryCount?: InventoryCountUpdateOneRequiredWithoutItemsNestedInput
    item?: ItemUpdateOneWithoutInventoryCountItemsNestedInput
    medicine?: MedicineUpdateOneWithoutInventoryCountItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryCountItemsNestedInput
  }

  export type InventoryCountItemUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type BillingsUpdateWithoutCreatedByInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type BillingsUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type BillingsUpdateWithoutUpdatedByInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type BillingsUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUpdateWithoutCreatedByInput = {
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing?: BillingsUpdateOneRequiredWithoutPaymentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    billingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    billingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUpdateWithoutUpdatedByInput = {
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    billing?: BillingsUpdateOneRequiredWithoutPaymentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    billingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    billingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUpdateWithoutCreatedByInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutSchedulesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUpdateWithoutUpdatedByInput = {
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: EmployeeUpdateOneRequiredWithoutSchedulesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type ScheduleUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    employeeId?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
  }

  export type BillingsCreateManyPatientInput = {
    id?: number
    doctorId?: number | null
    consultationId: number
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type ConsultationsCreateManyPatientInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    triageId?: number | null
    patientAssessmentId?: number | null
    patientTriageId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type BillingsUpdateWithoutPatientInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    consultation?: ConsultationsUpdateOneRequiredWithoutBillingsNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type BillingsUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    consultationId?: IntFieldUpdateOperationsInput | number
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ConsultationsUpdateWithoutPatientInput = {
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedConsultationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedConsultationsNestedInput
    doctor?: EmployeeUpdateOneRequiredWithoutConsultationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutConsultationsNestedInput
    patientTriage?: PatientTriageUpdateOneWithoutConsultationsNestedInput
    billings?: BillingsUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billings?: BillingsUncheckedUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingsCreateManyConsultationInput = {
    id?: number
    patientId?: number | null
    doctorId?: number | null
    total?: number | null
    tax?: number | null
    discount?: number | null
    previousBalance?: number | null
    paymentMade?: string | null
    subtotal?: number | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type BillingsUpdateWithoutConsultationInput = {
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: EmployeeUpdateOneWithoutBillingsNestedInput
    patient?: PatientsUpdateOneWithoutBillingsNestedInput
    patientTreatments?: PatientTreatmentUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUpdateManyWithoutBillingNestedInput
    payments?: PaymentUpdateManyWithoutBillingNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedBillingsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedBillingsNestedInput
  }

  export type BillingsUncheckedUpdateWithoutConsultationInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutBillingNestedInput
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutBillingNestedInput
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutBillingNestedInput
    patientItems?: PatientItemUncheckedUpdateManyWithoutBillingNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutBillingNestedInput
  }

  export type BillingsUncheckedUpdateManyWithoutConsultationInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: NullableIntFieldUpdateOperationsInput | number | null
    total?: NullableFloatFieldUpdateOperationsInput | number | null
    tax?: NullableFloatFieldUpdateOperationsInput | number | null
    discount?: NullableFloatFieldUpdateOperationsInput | number | null
    previousBalance?: NullableFloatFieldUpdateOperationsInput | number | null
    paymentMade?: NullableStringFieldUpdateOperationsInput | string | null
    subtotal?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type AvailabilityCreateManyDoctorInput = {
    id?: number
    date: Date | string
    startTime: string
    endTime: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AvailabilityUpdateWithoutDoctorInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvailabilityUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AvailabilityUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriageAllergyCreateManyAllergyInput = {
    id?: number
    patientTriageId?: number | null
  }

  export type TriageAllergyUpdateWithoutAllergyInput = {
    patientTriage?: PatientTriageUpdateOneWithoutAllergiesNestedInput
  }

  export type TriageAllergyUncheckedUpdateWithoutAllergyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TriageAllergyUncheckedUpdateManyWithoutAllergyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TriageProblemCreateManyProblemInput = {
    id?: number
    patientTriageId?: number | null
  }

  export type TriageProblemUpdateWithoutProblemInput = {
    patientTriage?: PatientTriageUpdateOneWithoutProblemsNestedInput
  }

  export type TriageProblemUncheckedUpdateWithoutProblemInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TriageProblemUncheckedUpdateManyWithoutProblemInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TriageProblemCreateManyPatientTriageInput = {
    id?: number
    problemId?: number | null
  }

  export type TriageAllergyCreateManyPatientTriageInput = {
    id?: number
    allergyId?: number | null
  }

  export type ConsultationsCreateManyPatientTriageInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientAssessmentId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type NoteCreateManyPatientTriageInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    noteType: string
    patientAssessmentId?: number | null
  }

  export type TriageProblemUpdateWithoutPatientTriageInput = {
    problem?: ProblemUpdateOneWithoutTriageProblemNestedInput
  }

  export type TriageProblemUncheckedUpdateWithoutPatientTriageInput = {
    id?: IntFieldUpdateOperationsInput | number
    problemId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TriageProblemUncheckedUpdateManyWithoutPatientTriageInput = {
    id?: IntFieldUpdateOperationsInput | number
    problemId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TriageAllergyUpdateWithoutPatientTriageInput = {
    allergy?: AllergyUpdateOneWithoutTriageAllergyNestedInput
  }

  export type TriageAllergyUncheckedUpdateWithoutPatientTriageInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TriageAllergyUncheckedUpdateManyWithoutPatientTriageInput = {
    id?: IntFieldUpdateOperationsInput | number
    allergyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConsultationsUpdateWithoutPatientTriageInput = {
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedConsultationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedConsultationsNestedInput
    doctor?: EmployeeUpdateOneRequiredWithoutConsultationsNestedInput
    patient?: PatientsUpdateOneWithoutConsultationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutConsultationsNestedInput
    billings?: BillingsUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateWithoutPatientTriageInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billings?: BillingsUncheckedUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateManyWithoutPatientTriageInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoteUpdateWithoutPatientTriageInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noteType?: StringFieldUpdateOperationsInput | string
    patientAssessment?: PatientAssessmentUpdateOneWithoutNotesNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutPatientTriageInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    noteType?: StringFieldUpdateOperationsInput | string
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NoteUncheckedUpdateManyWithoutPatientTriageInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    noteType?: StringFieldUpdateOperationsInput | string
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ConsultationsCreateManyPatientAssessmentInput = {
    id?: number
    status: string
    appointmentId?: number | null
    doctorId: number
    patientId?: number | null
    triageId?: number | null
    patientTriageId?: number | null
    createdById: number
    updatedById: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PatientMedicationCreateManyPatientAssessmentInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientTreatmentCreateManyPatientAssessmentInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientPackageCreateManyPatientAssessmentInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientItemCreateManyPatientAssessmentInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type NoteCreateManyPatientAssessmentInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    noteType: string
    patientTriageId?: number | null
  }

  export type ConsultationsUpdateWithoutPatientAssessmentInput = {
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedConsultationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedConsultationsNestedInput
    doctor?: EmployeeUpdateOneRequiredWithoutConsultationsNestedInput
    patient?: PatientsUpdateOneWithoutConsultationsNestedInput
    patientTriage?: PatientTriageUpdateOneWithoutConsultationsNestedInput
    billings?: BillingsUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    billings?: BillingsUncheckedUpdateManyWithoutConsultationNestedInput
  }

  export type ConsultationsUncheckedUpdateManyWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableIntFieldUpdateOperationsInput | number | null
    doctorId?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    triageId?: NullableIntFieldUpdateOperationsInput | number | null
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMedicationUpdateWithoutPatientAssessmentInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine?: MedicineUpdateOneRequiredWithoutPatientMedicationsNestedInput
    billing?: BillingsUpdateOneWithoutPatientMedicationsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientMedicationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientMedicationsNestedInput
  }

  export type PatientMedicationUncheckedUpdateWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationUncheckedUpdateManyWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTreatmentUpdateWithoutPatientAssessmentInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatment?: TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput
    billing?: BillingsUpdateOneWithoutPatientTreatmentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTreatmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageUpdateWithoutPatientAssessmentInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneRequiredWithoutPatientPackagesNestedInput
    billing?: BillingsUpdateOneWithoutPatientPackagesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientPackagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientPackagesNestedInput
  }

  export type PatientPackageUncheckedUpdateWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageUncheckedUpdateManyWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemUpdateWithoutPatientAssessmentInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutPatientItemsNestedInput
    billing?: BillingsUpdateOneWithoutPatientItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientItemsNestedInput
  }

  export type PatientItemUncheckedUpdateWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemUncheckedUpdateManyWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type NoteUpdateWithoutPatientAssessmentInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    noteType?: StringFieldUpdateOperationsInput | string
    patientTriage?: PatientTriageUpdateOneWithoutNotesNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    noteType?: StringFieldUpdateOperationsInput | string
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NoteUncheckedUpdateManyWithoutPatientAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    noteType?: StringFieldUpdateOperationsInput | string
    patientTriageId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PatientMedicationCreateManyMedicineInput = {
    id?: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryTransactionCreateManyMedicineInput = {
    id?: number
    itemId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountItemCreateManyMedicineInput = {
    id?: number
    inventoryCountId: number
    itemId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PurchaseOrderItemCreateManyMedicineInput = {
    id?: number
    purchaseOrderId: number
    itemId?: number | null
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientMedicationUpdateWithoutMedicineInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientMedicationsNestedInput
    billing?: BillingsUpdateOneWithoutPatientMedicationsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientMedicationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientMedicationsNestedInput
  }

  export type PatientMedicationUncheckedUpdateWithoutMedicineInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationUncheckedUpdateManyWithoutMedicineInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionUpdateWithoutMedicineInput = {
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneWithoutInventoryTransactionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutInventoryTransactionNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryTransactionsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryTransactionsNestedInput
  }

  export type InventoryTransactionUncheckedUpdateWithoutMedicineInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutMedicineInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemUpdateWithoutMedicineInput = {
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryCount?: InventoryCountUpdateOneRequiredWithoutItemsNestedInput
    item?: ItemUpdateOneWithoutInventoryCountItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryCountItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountItemsNestedInput
  }

  export type InventoryCountItemUncheckedUpdateWithoutMedicineInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutMedicineInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseOrderItemUpdateWithoutMedicineInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseOrder?: PurchaseOrderUpdateOneRequiredWithoutItemsNestedInput
    item?: ItemUpdateOneWithoutPurchaseOrderItemsNestedInput
  }

  export type PurchaseOrderItemUncheckedUpdateWithoutMedicineInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutMedicineInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientItemCreateManyItemInput = {
    id?: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryTransactionCreateManyItemInput = {
    id?: number
    medicineId?: number | null
    type: string
    quantity: number
    date: Date | string
    employeeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountItemCreateManyItemInput = {
    id?: number
    inventoryCountId: number
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PurchaseOrderItemCreateManyItemInput = {
    id?: number
    purchaseOrderId: number
    medicineId?: number | null
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientItemUpdateWithoutItemInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientItemsNestedInput
    billing?: BillingsUpdateOneWithoutPatientItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientItemsNestedInput
  }

  export type PatientItemUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionUpdateWithoutItemInput = {
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine?: MedicineUpdateOneWithoutInventoryTransactionsNestedInput
    employee?: EmployeeUpdateOneRequiredWithoutInventoryTransactionNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryTransactionsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryTransactionsNestedInput
  }

  export type InventoryTransactionUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryTransactionUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemUpdateWithoutItemInput = {
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventoryCount?: InventoryCountUpdateOneRequiredWithoutItemsNestedInput
    medicine?: MedicineUpdateOneWithoutInventoryCountItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryCountItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountItemsNestedInput
  }

  export type InventoryCountItemUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryCountId?: IntFieldUpdateOperationsInput | number
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseOrderItemUpdateWithoutItemInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseOrder?: PurchaseOrderUpdateOneRequiredWithoutItemsNestedInput
    medicine?: MedicineUpdateOneWithoutPurchaseOrderItemsNestedInput
  }

  export type PurchaseOrderItemUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientTreatmentCreateManyTreatmentInput = {
    id?: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientTreatmentUpdateWithoutTreatmentInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientTreatmentsNestedInput
    billing?: BillingsUpdateOneWithoutPatientTreatmentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTreatmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateWithoutTreatmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutTreatmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageCreateManyPackageInput = {
    id?: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    billingId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientPackageUpdateWithoutPackageInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientPackagesNestedInput
    billing?: BillingsUpdateOneWithoutPatientPackagesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientPackagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientPackagesNestedInput
  }

  export type PatientPackageUncheckedUpdateWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageUncheckedUpdateManyWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    billingId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type MedicineCreateManyCategoryInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type ItemCreateManyCategoryInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    supplierId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type TreatmentCreateManyCategoryInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PackageCreateManyCategoryInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type MedicineUpdateWithoutCategoryInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutMedicinesNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutMedicineNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedMedicinesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicineUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ItemUpdateWithoutCategoryInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    supplier?: SupplierUpdateOneRequiredWithoutItemsNestedInput
    patientItems?: PatientItemUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutItemNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientItems?: PatientItemUncheckedUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    supplierId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type TreatmentUpdateWithoutCategoryInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientTreatments?: PatientTreatmentUpdateManyWithoutTreatmentNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedTreatmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedTreatmentsNestedInput
  }

  export type TreatmentUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientTreatments?: PatientTreatmentUncheckedUpdateManyWithoutTreatmentNestedInput
  }

  export type TreatmentUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PackageUpdateWithoutCategoryInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientPackages?: PatientPackageUpdateManyWithoutPackageNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPackagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPackagesNestedInput
  }

  export type PackageUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientPackages?: PatientPackageUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type MedicineCreateManySupplierInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    expirationDate?: Date | string | null
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type ItemCreateManySupplierInput = {
    id?: number
    code: string
    name: string
    description?: string | null
    cost: number
    price: number
    quantity: number
    reorderPoint: number
    unit: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PurchaseOrderCreateManySupplierInput = {
    id?: number
    orderNumber: string
    orderDate: Date | string
    status: string
    totalAmount: number
    notes?: string | null
    createdById: number
    updatedById: number
    createdAt?: Date | string
    updatedAt?: Date | string
    employeeId?: number | null
  }

  export type MedicineUpdateWithoutSupplierInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutMedicinesNestedInput
    patientMedications?: PatientMedicationUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutMedicineNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedMedicinesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedMedicinesNestedInput
  }

  export type MedicineUncheckedUpdateWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientMedications?: PatientMedicationUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutMedicineNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutMedicineNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutMedicineNestedInput
  }

  export type MedicineUncheckedUpdateManyWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    expirationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type ItemUpdateWithoutSupplierInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoryUpdateOneRequiredWithoutItemsNestedInput
    patientItems?: PatientItemUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUpdateManyWithoutItemNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedItemsNestedInput
  }

  export type ItemUncheckedUpdateWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    patientItems?: PatientItemUncheckedUpdateManyWithoutItemNestedInput
    inventoryTransactions?: InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput
    inventoryCountItems?: InventoryCountItemUncheckedUpdateManyWithoutItemNestedInput
    purchaseOrderItems?: PurchaseOrderItemUncheckedUpdateManyWithoutItemNestedInput
  }

  export type ItemUncheckedUpdateManyWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: FloatFieldUpdateOperationsInput | number
    price?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    unit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseOrderUpdateWithoutSupplierInput = {
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: PurchaseOrderItemUpdateManyWithoutPurchaseOrderNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPOsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPOsNestedInput
    Employee?: EmployeeUpdateOneWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: PurchaseOrderItemUncheckedUpdateManyWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutSupplierInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderNumber?: StringFieldUpdateOperationsInput | string
    orderDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employeeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InventoryCountItemCreateManyInventoryCountInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    expectedQuantity: number
    actualQuantity: number
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type InventoryCountItemUpdateWithoutInventoryCountInput = {
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneWithoutInventoryCountItemsNestedInput
    medicine?: MedicineUpdateOneWithoutInventoryCountItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedInventoryCountItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedInventoryCountItemsNestedInput
  }

  export type InventoryCountItemUncheckedUpdateWithoutInventoryCountInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCountItemUncheckedUpdateManyWithoutInventoryCountInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    expectedQuantity?: IntFieldUpdateOperationsInput | number
    actualQuantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseOrderItemCreateManyPurchaseOrderInput = {
    id?: number
    itemId?: number | null
    medicineId?: number | null
    quantity: number
    unitPrice: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderItemUpdateWithoutPurchaseOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneWithoutPurchaseOrderItemsNestedInput
    medicine?: MedicineUpdateOneWithoutPurchaseOrderItemsNestedInput
  }

  export type PurchaseOrderItemUncheckedUpdateWithoutPurchaseOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderItemUncheckedUpdateManyWithoutPurchaseOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: NullableIntFieldUpdateOperationsInput | number | null
    medicineId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: FloatFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientTreatmentCreateManyBillingInput = {
    id?: number
    quantity: number
    notes?: string | null
    treatmentId: number
    patientAssessmentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientMedicationCreateManyBillingInput = {
    id?: number
    quantity: number
    notes?: string | null
    medicineId: number
    patientAssessmentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientPackageCreateManyBillingInput = {
    id?: number
    packageId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientItemCreateManyBillingInput = {
    id?: number
    itemId: number
    quantity: number
    notes?: string | null
    patientAssessmentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PaymentCreateManyBillingInput = {
    id?: number
    paymentType: string
    amount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: number
    updatedById: number
  }

  export type PatientTreatmentUpdateWithoutBillingInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatment?: TreatmentUpdateOneRequiredWithoutPatientTreatmentsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientTreatmentsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientTreatmentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientTreatmentsNestedInput
  }

  export type PatientTreatmentUncheckedUpdateWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientTreatmentUncheckedUpdateManyWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationUpdateWithoutBillingInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicine?: MedicineUpdateOneRequiredWithoutPatientMedicationsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientMedicationsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientMedicationsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientMedicationsNestedInput
  }

  export type PatientMedicationUncheckedUpdateWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientMedicationUncheckedUpdateManyWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    medicineId?: IntFieldUpdateOperationsInput | number
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageUpdateWithoutBillingInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneRequiredWithoutPatientPackagesNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientPackagesNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientPackagesNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientPackagesNestedInput
  }

  export type PatientPackageUncheckedUpdateWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientPackageUncheckedUpdateManyWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemUpdateWithoutBillingInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: ItemUpdateOneRequiredWithoutPatientItemsNestedInput
    patientAssessment?: PatientAssessmentUpdateOneWithoutPatientItemsNestedInput
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPatientItemsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPatientItemsNestedInput
  }

  export type PatientItemUncheckedUpdateWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PatientItemUncheckedUpdateManyWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    patientAssessmentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUpdateWithoutBillingInput = {
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EmployeeUpdateOneRequiredWithoutCreatedPaymentsNestedInput
    updatedBy?: EmployeeUpdateOneRequiredWithoutUpdatedPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }

  export type PaymentUncheckedUpdateManyWithoutBillingInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentType?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: IntFieldUpdateOperationsInput | number
    updatedById?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeCountOutputTypeDefaultArgs instead
     */
    export type EmployeeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientsCountOutputTypeDefaultArgs instead
     */
    export type PatientsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsultationsCountOutputTypeDefaultArgs instead
     */
    export type ConsultationsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConsultationsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorsCountOutputTypeDefaultArgs instead
     */
    export type DoctorsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllergyCountOutputTypeDefaultArgs instead
     */
    export type AllergyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllergyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProblemCountOutputTypeDefaultArgs instead
     */
    export type ProblemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProblemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientTriageCountOutputTypeDefaultArgs instead
     */
    export type PatientTriageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientTriageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientAssessmentCountOutputTypeDefaultArgs instead
     */
    export type PatientAssessmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientAssessmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicineCountOutputTypeDefaultArgs instead
     */
    export type MedicineCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicineCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemCountOutputTypeDefaultArgs instead
     */
    export type ItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TreatmentCountOutputTypeDefaultArgs instead
     */
    export type TreatmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TreatmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackageCountOutputTypeDefaultArgs instead
     */
    export type PackageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierCountOutputTypeDefaultArgs instead
     */
    export type SupplierCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryCountCountOutputTypeDefaultArgs instead
     */
    export type InventoryCountCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryCountCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PurchaseOrderCountOutputTypeDefaultArgs instead
     */
    export type PurchaseOrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PurchaseOrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillingsCountOutputTypeDefaultArgs instead
     */
    export type BillingsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillingsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeDefaultArgs instead
     */
    export type EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScheduleDefaultArgs instead
     */
    export type ScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientsDefaultArgs instead
     */
    export type PatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsultationsDefaultArgs instead
     */
    export type ConsultationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConsultationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppointmentsDefaultArgs instead
     */
    export type AppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppointmentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorsDefaultArgs instead
     */
    export type DoctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AvailabilityDefaultArgs instead
     */
    export type AvailabilityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AvailabilityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AllergyDefaultArgs instead
     */
    export type AllergyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AllergyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TriageAllergyDefaultArgs instead
     */
    export type TriageAllergyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TriageAllergyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProblemDefaultArgs instead
     */
    export type ProblemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProblemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TriageProblemDefaultArgs instead
     */
    export type TriageProblemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TriageProblemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientTriageDefaultArgs instead
     */
    export type PatientTriageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientTriageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientAssessmentDefaultArgs instead
     */
    export type PatientAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientAssessmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteDefaultArgs instead
     */
    export type NoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientTreatmentDefaultArgs instead
     */
    export type PatientTreatmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientTreatmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientMedicationDefaultArgs instead
     */
    export type PatientMedicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientMedicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientPackageDefaultArgs instead
     */
    export type PatientPackageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientPackageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientItemDefaultArgs instead
     */
    export type PatientItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicineDefaultArgs instead
     */
    export type MedicineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicineDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItemDefaultArgs instead
     */
    export type ItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TreatmentDefaultArgs instead
     */
    export type TreatmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TreatmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PackageDefaultArgs instead
     */
    export type PackageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PackageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SupplierDefaultArgs instead
     */
    export type SupplierArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SupplierDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryTransactionDefaultArgs instead
     */
    export type InventoryTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryCountDefaultArgs instead
     */
    export type InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryCountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryCountItemDefaultArgs instead
     */
    export type InventoryCountItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryCountItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PurchaseOrderDefaultArgs instead
     */
    export type PurchaseOrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PurchaseOrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PurchaseOrderItemDefaultArgs instead
     */
    export type PurchaseOrderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PurchaseOrderItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillingsDefaultArgs instead
     */
    export type BillingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentDefaultArgs instead
     */
    export type PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}