
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.20.0
 * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
 */
Prisma.prismaVersion = {
  client: "5.20.0",
  engine: "06fc58a368dc7be9fbbbe894adf8d445d208c284"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted',
  deletedAt: 'deletedAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  department: 'department',
  position: 'position',
  hireDate: 'hireDate',
  salary: 'salary',
  phoneNumber: 'phoneNumber',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById',
  deleted: 'deleted',
  deletedAt: 'deletedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  entityId: 'entityId',
  entityType: 'entityType',
  userId: 'userId',
  action: 'action',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PatientsScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  nationality: 'nationality',
  maritalStatus: 'maritalStatus',
  dob: 'dob',
  gender: 'gender',
  source: 'source',
  email: 'email',
  countryCode: 'countryCode',
  phoneNumber: 'phoneNumber',
  address: 'address',
  district: 'district',
  emirate: 'emirate',
  country: 'country',
  visaType: 'visaType',
  nationalID: 'nationalID',
  otherID: 'otherID',
  emergencyContactNumber: 'emergencyContactNumber',
  emergencyContactName: 'emergencyContactName',
  emergencyContactRelationship: 'emergencyContactRelationship',
  allergies: 'allergies',
  profilePicture: 'profilePicture',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  doctorId: 'doctorId',
  mrNumber: 'mrNumber',
  appointmentId: 'appointmentId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  deleted: 'deleted',
  deletedAt: 'deletedAt'
};

exports.Prisma.ConsultationsScalarFieldEnum = {
  id: 'id',
  status: 'status',
  appointmentId: 'appointmentId',
  doctorId: 'doctorId',
  patientId: 'patientId',
  triageId: 'triageId',
  patientAssessmentId: 'patientAssessmentId',
  patientTriageId: 'patientTriageId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AppointmentsScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  date: 'date',
  notes: 'notes',
  email: 'email',
  endTime: 'endTime',
  firstName: 'firstName',
  lastName: 'lastName',
  countryCode: 'countryCode',
  phoneNumber: 'phoneNumber',
  startTime: 'startTime',
  created_at: 'created_at',
  updated_at: 'updated_at',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.DoctorsScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  created_at: 'created_at',
  updated_at: 'updated_at',
  password: 'password'
};

exports.Prisma.AvailabilityScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AllergyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TriageAllergyScalarFieldEnum = {
  id: 'id',
  patientTriageId: 'patientTriageId',
  allergyId: 'allergyId'
};

exports.Prisma.ProblemScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.TriageProblemScalarFieldEnum = {
  id: 'id',
  patientTriageId: 'patientTriageId',
  problemId: 'problemId'
};

exports.Prisma.PatientTriageScalarFieldEnum = {
  id: 'id',
  status: 'status',
  priority: 'priority',
  immunizationUpToDate: 'immunizationUpToDate',
  immunizationRemarks: 'immunizationRemarks',
  allergenHistory: 'allergenHistory',
  systolic: 'systolic',
  diastolic: 'diastolic',
  temperature: 'temperature',
  height: 'height',
  weight: 'weight',
  spO2: 'spO2',
  bmi: 'bmi',
  pulse: 'pulse',
  pastMedicalHistory: 'pastMedicalHistory',
  familyHistory: 'familyHistory',
  socialHistory: 'socialHistory',
  surgicalHistory: 'surgicalHistory',
  creams: 'creams',
  nurseAssessment: 'nurseAssessment',
  medications: 'medications',
  otherNotes: 'otherNotes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  painScale: 'painScale',
  currentHistory: 'currentHistory',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PatientAssessmentScalarFieldEnum = {
  id: 'id',
  visitType: 'visitType',
  consultationType: 'consultationType',
  status: 'status',
  createdAt: 'createdAt',
  complaints: 'complaints',
  facial_dermapen_prp: 'facial_dermapen_prp',
  instructions: 'instructions',
  laser_q_note: 'laser_q_note',
  prescription: 'prescription',
  provider_notes: 'provider_notes',
  recommendations: 'recommendations',
  slimming_note: 'slimming_note',
  images: 'images',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  noteType: 'noteType',
  patientTriageId: 'patientTriageId',
  patientAssessmentId: 'patientAssessmentId'
};

exports.Prisma.PatientTreatmentScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  notes: 'notes',
  treatmentId: 'treatmentId',
  patientAssessmentId: 'patientAssessmentId',
  billingId: 'billingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PatientMedicationScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  notes: 'notes',
  medicineId: 'medicineId',
  patientAssessmentId: 'patientAssessmentId',
  billingId: 'billingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PatientPackageScalarFieldEnum = {
  id: 'id',
  packageId: 'packageId',
  quantity: 'quantity',
  notes: 'notes',
  patientAssessmentId: 'patientAssessmentId',
  billingId: 'billingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PatientItemScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  quantity: 'quantity',
  notes: 'notes',
  patientAssessmentId: 'patientAssessmentId',
  billingId: 'billingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.MedicineScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  cost: 'cost',
  price: 'price',
  quantity: 'quantity',
  reorderPoint: 'reorderPoint',
  unit: 'unit',
  expirationDate: 'expirationDate',
  categoryId: 'categoryId',
  supplierId: 'supplierId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  cost: 'cost',
  price: 'price',
  quantity: 'quantity',
  reorderPoint: 'reorderPoint',
  unit: 'unit',
  categoryId: 'categoryId',
  supplierId: 'supplierId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.TreatmentScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  cost: 'cost',
  price: 'price',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  cost: 'cost',
  price: 'price',
  duration: 'duration',
  categoryId: 'categoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.InventoryTransactionScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  medicineId: 'medicineId',
  type: 'type',
  quantity: 'quantity',
  date: 'date',
  employeeId: 'employeeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.InventoryCountScalarFieldEnum = {
  id: 'id',
  date: 'date',
  status: 'status',
  employeeId: 'employeeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.InventoryCountItemScalarFieldEnum = {
  id: 'id',
  inventoryCountId: 'inventoryCountId',
  itemId: 'itemId',
  medicineId: 'medicineId',
  expectedQuantity: 'expectedQuantity',
  actualQuantity: 'actualQuantity',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  supplierId: 'supplierId',
  orderDate: 'orderDate',
  status: 'status',
  totalAmount: 'totalAmount',
  notes: 'notes',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  employeeId: 'employeeId'
};

exports.Prisma.PurchaseOrderItemScalarFieldEnum = {
  id: 'id',
  purchaseOrderId: 'purchaseOrderId',
  itemId: 'itemId',
  medicineId: 'medicineId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillingsScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  consultationId: 'consultationId',
  total: 'total',
  tax: 'tax',
  discount: 'discount',
  previousBalance: 'previousBalance',
  paymentMade: 'paymentMade',
  subtotal: 'subtotal',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  paymentType: 'paymentType',
  amount: 'amount',
  billingId: 'billingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Position = exports.$Enums.Position = {
  ADMIN: 'ADMIN',
  DOCTOR: 'DOCTOR',
  NURSE: 'NURSE',
  RECEPTIONIST: 'RECEPTIONIST',
  DEVELOPER: 'DEVELOPER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Employee: 'Employee',
  AuditLog: 'AuditLog',
  Schedule: 'Schedule',
  Patients: 'Patients',
  Consultations: 'Consultations',
  Appointments: 'Appointments',
  Doctors: 'Doctors',
  Availability: 'Availability',
  Allergy: 'Allergy',
  TriageAllergy: 'TriageAllergy',
  Problem: 'Problem',
  TriageProblem: 'TriageProblem',
  PatientTriage: 'PatientTriage',
  PatientAssessment: 'PatientAssessment',
  Note: 'Note',
  PatientTreatment: 'PatientTreatment',
  PatientMedication: 'PatientMedication',
  PatientPackage: 'PatientPackage',
  PatientItem: 'PatientItem',
  Medicine: 'Medicine',
  Item: 'Item',
  Treatment: 'Treatment',
  Package: 'Package',
  Category: 'Category',
  Supplier: 'Supplier',
  InventoryTransaction: 'InventoryTransaction',
  InventoryCount: 'InventoryCount',
  InventoryCountItem: 'InventoryCountItem',
  PurchaseOrder: 'PurchaseOrder',
  PurchaseOrderItem: 'PurchaseOrderItem',
  Billings: 'Billings',
  Payment: 'Payment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
